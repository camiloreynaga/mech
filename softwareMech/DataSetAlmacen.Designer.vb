'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5466
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetAlmacen"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetAlmacen
    Inherits Global.System.Data.DataSet
    
    Private tableVSolDetSol As VSolDetSolDataTable
    
    Private tableVCotDetCot As VCotDetCotDataTable
    
    Private tableVOrdenDetOrden As VOrdenDetOrdenDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VSolDetSol")) Is Nothing) Then
                MyBase.Tables.Add(New VSolDetSolDataTable(ds.Tables("VSolDetSol")))
            End If
            If (Not (ds.Tables("VCotDetCot")) Is Nothing) Then
                MyBase.Tables.Add(New VCotDetCotDataTable(ds.Tables("VCotDetCot")))
            End If
            If (Not (ds.Tables("VOrdenDetOrden")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDetOrdenDataTable(ds.Tables("VOrdenDetOrden")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VSolDetSol() As VSolDetSolDataTable
        Get
            Return Me.tableVSolDetSol
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VCotDetCot() As VCotDetCotDataTable
        Get
            Return Me.tableVCotDetCot
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VOrdenDetOrden() As VOrdenDetOrdenDataTable
        Get
            Return Me.tableVOrdenDetOrden
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetAlmacen = CType(MyBase.Clone,DataSetAlmacen)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VSolDetSol")) Is Nothing) Then
                MyBase.Tables.Add(New VSolDetSolDataTable(ds.Tables("VSolDetSol")))
            End If
            If (Not (ds.Tables("VCotDetCot")) Is Nothing) Then
                MyBase.Tables.Add(New VCotDetCotDataTable(ds.Tables("VCotDetCot")))
            End If
            If (Not (ds.Tables("VOrdenDetOrden")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDetOrdenDataTable(ds.Tables("VOrdenDetOrden")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVSolDetSol = CType(MyBase.Tables("VSolDetSol"),VSolDetSolDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVSolDetSol) Is Nothing) Then
                Me.tableVSolDetSol.InitVars
            End If
        End If
        Me.tableVCotDetCot = CType(MyBase.Tables("VCotDetCot"),VCotDetCotDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVCotDetCot) Is Nothing) Then
                Me.tableVCotDetCot.InitVars
            End If
        End If
        Me.tableVOrdenDetOrden = CType(MyBase.Tables("VOrdenDetOrden"),VOrdenDetOrdenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVOrdenDetOrden) Is Nothing) Then
                Me.tableVOrdenDetOrden.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetAlmacen"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetAlmacen.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVSolDetSol = New VSolDetSolDataTable
        MyBase.Tables.Add(Me.tableVSolDetSol)
        Me.tableVCotDetCot = New VCotDetCotDataTable
        MyBase.Tables.Add(Me.tableVCotDetCot)
        Me.tableVOrdenDetOrden = New VOrdenDetOrdenDataTable
        MyBase.Tables.Add(Me.tableVOrdenDetOrden)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVSolDetSol() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVCotDetCot() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVOrdenDetOrden() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetAlmacen = New DataSetAlmacen
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VSolDetSolRowChangeEventHandler(ByVal sender As Object, ByVal e As VSolDetSolRowChangeEvent)
    
    Public Delegate Sub VCotDetCotRowChangeEventHandler(ByVal sender As Object, ByVal e As VCotDetCotRowChangeEvent)
    
    Public Delegate Sub VOrdenDetOrdenRowChangeEventHandler(ByVal sender As Object, ByVal e As VOrdenDetOrdenRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VSolDetSolDataTable
        Inherits Global.System.Data.TypedTableBase(Of VSolDetSolRow)
        
        Private columnidSol As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnfecSol As Global.System.Data.DataColumn
        
        Private columnest As Global.System.Data.DataColumn
        
        Private columnnombres As Global.System.Data.DataColumn
        
        Private columnnombres1 As Global.System.Data.DataColumn
        
        Private columnobs As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columncodPers As Global.System.Data.DataColumn
        
        Private columncodPersA As Global.System.Data.DataColumn
        
        Private columncodDetS As Global.System.Data.DataColumn
        
        Private columnprioridad As Global.System.Data.DataColumn
        
        Private columndescrip As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnareaM As Global.System.Data.DataColumn
        
        Private columntipoM As Global.System.Data.DataColumn
        
        Private columnjefe As Global.System.Data.DataColumn
        
        Private columncodAreaM As Global.System.Data.DataColumn
        
        Private columncodTipM As Global.System.Data.DataColumn
        
        Private columncodMat As Global.System.Data.DataColumn
        
        Private columnobsSol As Global.System.Data.DataColumn
        
        Private columnestSol As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VSolDetSol"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombres1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombres1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPersAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPersA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDetSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDetS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prioridadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprioridad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property areaMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnareaM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codAreaMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodAreaM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codTipMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodTipM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobsSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VSolDetSolRow
            Get
                Return CType(Me.Rows(index),VSolDetSolRow)
            End Get
        End Property
        
        Public Event VSolDetSolRowChanging As VSolDetSolRowChangeEventHandler
        
        Public Event VSolDetSolRowChanged As VSolDetSolRowChangeEventHandler
        
        Public Event VSolDetSolRowDeleting As VSolDetSolRowChangeEventHandler
        
        Public Event VSolDetSolRowDeleted As VSolDetSolRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVSolDetSolRow(ByVal row As VSolDetSolRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVSolDetSolRow( _
                    ByVal idSol As Integer,  _
                    ByVal nro As String,  _
                    ByVal fecSol As Date,  _
                    ByVal est As String,  _
                    ByVal nombres As String,  _
                    ByVal nombres1 As String,  _
                    ByVal obs As String,  _
                    ByVal estado As Integer,  _
                    ByVal codPers As Integer,  _
                    ByVal codPersA As Integer,  _
                    ByVal codDetS As Integer,  _
                    ByVal prioridad As String,  _
                    ByVal descrip As String,  _
                    ByVal cant As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal areaM As String,  _
                    ByVal tipoM As String,  _
                    ByVal jefe As String,  _
                    ByVal codAreaM As Integer,  _
                    ByVal codTipM As Integer,  _
                    ByVal codMat As Integer,  _
                    ByVal obsSol As String,  _
                    ByVal estSol As String) As VSolDetSolRow
            Dim rowVSolDetSolRow As VSolDetSolRow = CType(Me.NewRow,VSolDetSolRow)
            Dim columnValuesArray() As Object = New Object() {idSol, nro, fecSol, est, nombres, nombres1, obs, estado, codPers, codPersA, codDetS, prioridad, descrip, cant, unidad, areaM, tipoM, jefe, codAreaM, codTipM, codMat, obsSol, estSol}
            rowVSolDetSolRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVSolDetSolRow)
            Return rowVSolDetSolRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VSolDetSolDataTable = CType(MyBase.Clone,VSolDetSolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VSolDetSolDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidSol = MyBase.Columns("idSol")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnfecSol = MyBase.Columns("fecSol")
            Me.columnest = MyBase.Columns("est")
            Me.columnnombres = MyBase.Columns("nombres")
            Me.columnnombres1 = MyBase.Columns("nombres1")
            Me.columnobs = MyBase.Columns("obs")
            Me.columnestado = MyBase.Columns("estado")
            Me.columncodPers = MyBase.Columns("codPers")
            Me.columncodPersA = MyBase.Columns("codPersA")
            Me.columncodDetS = MyBase.Columns("codDetS")
            Me.columnprioridad = MyBase.Columns("prioridad")
            Me.columndescrip = MyBase.Columns("descrip")
            Me.columncant = MyBase.Columns("cant")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnareaM = MyBase.Columns("areaM")
            Me.columntipoM = MyBase.Columns("tipoM")
            Me.columnjefe = MyBase.Columns("jefe")
            Me.columncodAreaM = MyBase.Columns("codAreaM")
            Me.columncodTipM = MyBase.Columns("codTipM")
            Me.columncodMat = MyBase.Columns("codMat")
            Me.columnobsSol = MyBase.Columns("obsSol")
            Me.columnestSol = MyBase.Columns("estSol")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidSol = New Global.System.Data.DataColumn("idSol", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidSol)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnfecSol = New Global.System.Data.DataColumn("fecSol", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecSol)
            Me.columnest = New Global.System.Data.DataColumn("est", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnest)
            Me.columnnombres = New Global.System.Data.DataColumn("nombres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombres)
            Me.columnnombres1 = New Global.System.Data.DataColumn("nombres1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombres1)
            Me.columnobs = New Global.System.Data.DataColumn("obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columncodPers = New Global.System.Data.DataColumn("codPers", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPers)
            Me.columncodPersA = New Global.System.Data.DataColumn("codPersA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPersA)
            Me.columncodDetS = New Global.System.Data.DataColumn("codDetS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDetS)
            Me.columnprioridad = New Global.System.Data.DataColumn("prioridad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprioridad)
            Me.columndescrip = New Global.System.Data.DataColumn("descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescrip)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnareaM = New Global.System.Data.DataColumn("areaM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnareaM)
            Me.columntipoM = New Global.System.Data.DataColumn("tipoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoM)
            Me.columnjefe = New Global.System.Data.DataColumn("jefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjefe)
            Me.columncodAreaM = New Global.System.Data.DataColumn("codAreaM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodAreaM)
            Me.columncodTipM = New Global.System.Data.DataColumn("codTipM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodTipM)
            Me.columncodMat = New Global.System.Data.DataColumn("codMat", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMat)
            Me.columnobsSol = New Global.System.Data.DataColumn("obsSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobsSol)
            Me.columnestSol = New Global.System.Data.DataColumn("estSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestSol)
            Me.columnidSol.AllowDBNull = false
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 13
            Me.columnest.ReadOnly = true
            Me.columnest.MaxLength = 9
            Me.columnnombres.ReadOnly = true
            Me.columnnombres.MaxLength = 51
            Me.columnnombres1.ReadOnly = true
            Me.columnnombres1.MaxLength = 51
            Me.columnobs.MaxLength = 200
            Me.columncodPers.AllowDBNull = false
            Me.columncodDetS.AllowDBNull = false
            Me.columnprioridad.MaxLength = 20
            Me.columndescrip.MaxLength = 100
            Me.columnunidad.MaxLength = 20
            Me.columnareaM.MaxLength = 40
            Me.columntipoM.MaxLength = 40
            Me.columnjefe.ReadOnly = true
            Me.columnjefe.MaxLength = 51
            Me.columncodAreaM.AllowDBNull = false
            Me.columncodTipM.AllowDBNull = false
            Me.columncodMat.AllowDBNull = false
            Me.columnobsSol.MaxLength = 100
            Me.columnestSol.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVSolDetSolRow() As VSolDetSolRow
            Return CType(Me.NewRow,VSolDetSolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VSolDetSolRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VSolDetSolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VSolDetSolRowChangedEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowChanged(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VSolDetSolRowChangingEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowChanging(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VSolDetSolRowDeletedEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowDeleted(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VSolDetSolRowDeletingEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowDeleting(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVSolDetSolRow(ByVal row As VSolDetSolRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VSolDetSolDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VCotDetCotDataTable
        Inherits Global.System.Data.TypedTableBase(Of VCotDetCotRow)
        
        Private columncodDetC As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnfecCot As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnatencion As Global.System.Data.DataColumn
        
        Private columncelRpm As Global.System.Data.DataColumn
        
        Private columnfonos As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnnomRem As Global.System.Data.DataColumn
        
        Private columnfono As Global.System.Data.DataColumn
        
        Private columnemaRem As Global.System.Data.DataColumn
        
        Private columntiempoVig As Global.System.Data.DataColumn
        
        Private columnplazo As Global.System.Data.DataColumn
        
        Private columnforma As Global.System.Data.DataColumn
        
        Private columnlugarEnt As Global.System.Data.DataColumn
        
        Private columnincluir As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnlugar As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnnomSol As Global.System.Data.DataColumn
        
        Private columnobs As Global.System.Data.DataColumn
        
        Private columncodGruC As Global.System.Data.DataColumn
        
        Private columndescrip As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnmaterial As Global.System.Data.DataColumn
        
        Private columnprecio As Global.System.Data.DataColumn
        
        Private columnsubTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VCotDetCot"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDetCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDetC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecCotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecCot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property atencionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnatencion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property celRpmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncelRpm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfonos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emaRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemaRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tiempoVigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntiempoVig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property plazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnplazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugarEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property incluirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnincluir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codGruCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodGruC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VCotDetCotRow
            Get
                Return CType(Me.Rows(index),VCotDetCotRow)
            End Get
        End Property
        
        Public Event VCotDetCotRowChanging As VCotDetCotRowChangeEventHandler
        
        Public Event VCotDetCotRowChanged As VCotDetCotRowChangeEventHandler
        
        Public Event VCotDetCotRowDeleting As VCotDetCotRowChangeEventHandler
        
        Public Event VCotDetCotRowDeleted As VCotDetCotRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVCotDetCotRow(ByVal row As VCotDetCotRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVCotDetCotRow( _
                    ByVal codDetC As Integer,  _
                    ByVal nro As String,  _
                    ByVal fecCot As Date,  _
                    ByVal razon As String,  _
                    ByVal ruc As String,  _
                    ByVal atencion As String,  _
                    ByVal celRpm As String,  _
                    ByVal fonos As String,  _
                    ByVal email As String,  _
                    ByVal nomRem As String,  _
                    ByVal fono As String,  _
                    ByVal emaRem As String,  _
                    ByVal tiempoVig As String,  _
                    ByVal plazo As String,  _
                    ByVal forma As String,  _
                    ByVal lugarEnt As String,  _
                    ByVal incluir As String,  _
                    ByVal codigo As String,  _
                    ByVal lugar As String,  _
                    ByVal nombre As String,  _
                    ByVal nomSol As String,  _
                    ByVal obs As String,  _
                    ByVal codGruC As Integer,  _
                    ByVal descrip As String,  _
                    ByVal cant As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal material As String,  _
                    ByVal precio As Decimal,  _
                    ByVal subTotal As Decimal) As VCotDetCotRow
            Dim rowVCotDetCotRow As VCotDetCotRow = CType(Me.NewRow,VCotDetCotRow)
            Dim columnValuesArray() As Object = New Object() {codDetC, nro, fecCot, razon, ruc, atencion, celRpm, fonos, email, nomRem, fono, emaRem, tiempoVig, plazo, forma, lugarEnt, incluir, codigo, lugar, nombre, nomSol, obs, codGruC, descrip, cant, unidad, material, precio, subTotal}
            rowVCotDetCotRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVCotDetCotRow)
            Return rowVCotDetCotRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VCotDetCotDataTable = CType(MyBase.Clone,VCotDetCotDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VCotDetCotDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodDetC = MyBase.Columns("codDetC")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnfecCot = MyBase.Columns("fecCot")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnatencion = MyBase.Columns("atencion")
            Me.columncelRpm = MyBase.Columns("celRpm")
            Me.columnfonos = MyBase.Columns("fonos")
            Me.columnemail = MyBase.Columns("email")
            Me.columnnomRem = MyBase.Columns("nomRem")
            Me.columnfono = MyBase.Columns("fono")
            Me.columnemaRem = MyBase.Columns("emaRem")
            Me.columntiempoVig = MyBase.Columns("tiempoVig")
            Me.columnplazo = MyBase.Columns("plazo")
            Me.columnforma = MyBase.Columns("forma")
            Me.columnlugarEnt = MyBase.Columns("lugarEnt")
            Me.columnincluir = MyBase.Columns("incluir")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnlugar = MyBase.Columns("lugar")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnnomSol = MyBase.Columns("nomSol")
            Me.columnobs = MyBase.Columns("obs")
            Me.columncodGruC = MyBase.Columns("codGruC")
            Me.columndescrip = MyBase.Columns("descrip")
            Me.columncant = MyBase.Columns("cant")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnmaterial = MyBase.Columns("material")
            Me.columnprecio = MyBase.Columns("precio")
            Me.columnsubTotal = MyBase.Columns("subTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodDetC = New Global.System.Data.DataColumn("codDetC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDetC)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnfecCot = New Global.System.Data.DataColumn("fecCot", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecCot)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnatencion = New Global.System.Data.DataColumn("atencion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnatencion)
            Me.columncelRpm = New Global.System.Data.DataColumn("celRpm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncelRpm)
            Me.columnfonos = New Global.System.Data.DataColumn("fonos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfonos)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnnomRem = New Global.System.Data.DataColumn("nomRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomRem)
            Me.columnfono = New Global.System.Data.DataColumn("fono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfono)
            Me.columnemaRem = New Global.System.Data.DataColumn("emaRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemaRem)
            Me.columntiempoVig = New Global.System.Data.DataColumn("tiempoVig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntiempoVig)
            Me.columnplazo = New Global.System.Data.DataColumn("plazo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplazo)
            Me.columnforma = New Global.System.Data.DataColumn("forma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnforma)
            Me.columnlugarEnt = New Global.System.Data.DataColumn("lugarEnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugarEnt)
            Me.columnincluir = New Global.System.Data.DataColumn("incluir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnincluir)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnlugar = New Global.System.Data.DataColumn("lugar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugar)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnnomSol = New Global.System.Data.DataColumn("nomSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomSol)
            Me.columnobs = New Global.System.Data.DataColumn("obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs)
            Me.columncodGruC = New Global.System.Data.DataColumn("codGruC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodGruC)
            Me.columndescrip = New Global.System.Data.DataColumn("descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescrip)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnmaterial = New Global.System.Data.DataColumn("material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaterial)
            Me.columnprecio = New Global.System.Data.DataColumn("precio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio)
            Me.columnsubTotal = New Global.System.Data.DataColumn("subTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubTotal)
            Me.columncodDetC.AllowDBNull = false
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 13
            Me.columnrazon.MaxLength = 60
            Me.columnruc.MaxLength = 11
            Me.columnatencion.MaxLength = 40
            Me.columncelRpm.MaxLength = 50
            Me.columnfonos.ReadOnly = true
            Me.columnfonos.MaxLength = 61
            Me.columnemail.MaxLength = 30
            Me.columnnomRem.ReadOnly = true
            Me.columnnomRem.MaxLength = 51
            Me.columnfono.MaxLength = 60
            Me.columnemaRem.MaxLength = 50
            Me.columntiempoVig.MaxLength = 20
            Me.columnplazo.MaxLength = 40
            Me.columnforma.MaxLength = 20
            Me.columnlugarEnt.MaxLength = 100
            Me.columnincluir.MaxLength = 100
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columnlugar.MaxLength = 100
            Me.columnnombre.MaxLength = 100
            Me.columnnomSol.ReadOnly = true
            Me.columnnomSol.MaxLength = 51
            Me.columnobs.MaxLength = 200
            Me.columncodGruC.AllowDBNull = false
            Me.columndescrip.MaxLength = 40
            Me.columnunidad.MaxLength = 20
            Me.columnmaterial.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVCotDetCotRow() As VCotDetCotRow
            Return CType(Me.NewRow,VCotDetCotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VCotDetCotRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VCotDetCotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VCotDetCotRowChangedEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowChanged(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VCotDetCotRowChangingEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowChanging(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VCotDetCotRowDeletedEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowDeleted(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VCotDetCotRowDeletingEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowDeleting(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVCotDetCotRow(ByVal row As VCotDetCotRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VCotDetCotDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VOrdenDetOrdenDataTable
        Inherits Global.System.Data.TypedTableBase(Of VOrdenDetOrdenRow)
        
        Private columncodDetO As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnfecOrden As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnatiendeCom As Global.System.Data.DataColumn
        
        Private columncelAti As Global.System.Data.DataColumn
        
        Private columnfonos As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnnomRem As Global.System.Data.DataColumn
        
        Private columnfono As Global.System.Data.DataColumn
        
        Private columnemaRem As Global.System.Data.DataColumn
        
        Private columntransfe As Global.System.Data.DataColumn
        
        Private columnplazoEnt As Global.System.Data.DataColumn
        
        Private columnforma As Global.System.Data.DataColumn
        
        Private columnlugarEnt As Global.System.Data.DataColumn
        
        Private columnigv As Global.System.Data.DataColumn
        
        Private columncalIGV As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnlugar As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnnomAte As Global.System.Data.DataColumn
        
        Private columnobsFac As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnmaterial As Global.System.Data.DataColumn
        
        Private columnprecio As Global.System.Data.DataColumn
        
        Private columnsubTotal As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        Private columnmoneda As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnnroProf As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VOrdenDetOrden"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDetOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDetO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property atiendeComColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnatiendeCom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property celAtiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncelAti
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfonos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emaRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemaRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property plazoEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnplazoEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugarEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property igvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnigv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property calIGVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncalIGV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomAteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomAte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsFacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobsFac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroProfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroProf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VOrdenDetOrdenRow
            Get
                Return CType(Me.Rows(index),VOrdenDetOrdenRow)
            End Get
        End Property
        
        Public Event VOrdenDetOrdenRowChanging As VOrdenDetOrdenRowChangeEventHandler
        
        Public Event VOrdenDetOrdenRowChanged As VOrdenDetOrdenRowChangeEventHandler
        
        Public Event VOrdenDetOrdenRowDeleting As VOrdenDetOrdenRowChangeEventHandler
        
        Public Event VOrdenDetOrdenRowDeleted As VOrdenDetOrdenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVOrdenDetOrdenRow(ByVal row As VOrdenDetOrdenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVOrdenDetOrdenRow( _
                    ByVal codDetO As Integer,  _
                    ByVal nro As String,  _
                    ByVal fecOrden As Date,  _
                    ByVal razon As String,  _
                    ByVal ruc As String,  _
                    ByVal atiendeCom As String,  _
                    ByVal celAti As String,  _
                    ByVal fonos As String,  _
                    ByVal email As String,  _
                    ByVal nomRem As String,  _
                    ByVal fono As String,  _
                    ByVal emaRem As String,  _
                    ByVal transfe As String,  _
                    ByVal plazoEnt As String,  _
                    ByVal forma As String,  _
                    ByVal lugarEnt As String,  _
                    ByVal igv As Decimal,  _
                    ByVal calIGV As Integer,  _
                    ByVal codigo As String,  _
                    ByVal lugar As String,  _
                    ByVal nombre As String,  _
                    ByVal nomAte As String,  _
                    ByVal obsFac As String,  _
                    ByVal cant As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal material As String,  _
                    ByVal precio As Decimal,  _
                    ByVal subTotal As Decimal,  _
                    ByVal codMon As Integer,  _
                    ByVal moneda As String,  _
                    ByVal simbolo As String,  _
                    ByVal nroProf As String) As VOrdenDetOrdenRow
            Dim rowVOrdenDetOrdenRow As VOrdenDetOrdenRow = CType(Me.NewRow,VOrdenDetOrdenRow)
            Dim columnValuesArray() As Object = New Object() {codDetO, nro, fecOrden, razon, ruc, atiendeCom, celAti, fonos, email, nomRem, fono, emaRem, transfe, plazoEnt, forma, lugarEnt, igv, calIGV, codigo, lugar, nombre, nomAte, obsFac, cant, unidad, material, precio, subTotal, codMon, moneda, simbolo, nroProf}
            rowVOrdenDetOrdenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVOrdenDetOrdenRow)
            Return rowVOrdenDetOrdenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VOrdenDetOrdenDataTable = CType(MyBase.Clone,VOrdenDetOrdenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VOrdenDetOrdenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodDetO = MyBase.Columns("codDetO")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnfecOrden = MyBase.Columns("fecOrden")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnatiendeCom = MyBase.Columns("atiendeCom")
            Me.columncelAti = MyBase.Columns("celAti")
            Me.columnfonos = MyBase.Columns("fonos")
            Me.columnemail = MyBase.Columns("email")
            Me.columnnomRem = MyBase.Columns("nomRem")
            Me.columnfono = MyBase.Columns("fono")
            Me.columnemaRem = MyBase.Columns("emaRem")
            Me.columntransfe = MyBase.Columns("transfe")
            Me.columnplazoEnt = MyBase.Columns("plazoEnt")
            Me.columnforma = MyBase.Columns("forma")
            Me.columnlugarEnt = MyBase.Columns("lugarEnt")
            Me.columnigv = MyBase.Columns("igv")
            Me.columncalIGV = MyBase.Columns("calIGV")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnlugar = MyBase.Columns("lugar")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnnomAte = MyBase.Columns("nomAte")
            Me.columnobsFac = MyBase.Columns("obsFac")
            Me.columncant = MyBase.Columns("cant")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnmaterial = MyBase.Columns("material")
            Me.columnprecio = MyBase.Columns("precio")
            Me.columnsubTotal = MyBase.Columns("subTotal")
            Me.columncodMon = MyBase.Columns("codMon")
            Me.columnmoneda = MyBase.Columns("moneda")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnnroProf = MyBase.Columns("nroProf")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodDetO = New Global.System.Data.DataColumn("codDetO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDetO)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnfecOrden = New Global.System.Data.DataColumn("fecOrden", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecOrden)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnatiendeCom = New Global.System.Data.DataColumn("atiendeCom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnatiendeCom)
            Me.columncelAti = New Global.System.Data.DataColumn("celAti", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncelAti)
            Me.columnfonos = New Global.System.Data.DataColumn("fonos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfonos)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnnomRem = New Global.System.Data.DataColumn("nomRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomRem)
            Me.columnfono = New Global.System.Data.DataColumn("fono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfono)
            Me.columnemaRem = New Global.System.Data.DataColumn("emaRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemaRem)
            Me.columntransfe = New Global.System.Data.DataColumn("transfe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfe)
            Me.columnplazoEnt = New Global.System.Data.DataColumn("plazoEnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplazoEnt)
            Me.columnforma = New Global.System.Data.DataColumn("forma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnforma)
            Me.columnlugarEnt = New Global.System.Data.DataColumn("lugarEnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugarEnt)
            Me.columnigv = New Global.System.Data.DataColumn("igv", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnigv)
            Me.columncalIGV = New Global.System.Data.DataColumn("calIGV", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncalIGV)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnlugar = New Global.System.Data.DataColumn("lugar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugar)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnnomAte = New Global.System.Data.DataColumn("nomAte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomAte)
            Me.columnobsFac = New Global.System.Data.DataColumn("obsFac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobsFac)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnmaterial = New Global.System.Data.DataColumn("material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaterial)
            Me.columnprecio = New Global.System.Data.DataColumn("precio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio)
            Me.columnsubTotal = New Global.System.Data.DataColumn("subTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubTotal)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
            Me.columnmoneda = New Global.System.Data.DataColumn("moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmoneda)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnnroProf = New Global.System.Data.DataColumn("nroProf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroProf)
            Me.columncodDetO.AllowDBNull = false
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 13
            Me.columnrazon.MaxLength = 60
            Me.columnruc.MaxLength = 11
            Me.columnatiendeCom.MaxLength = 50
            Me.columncelAti.MaxLength = 50
            Me.columnfonos.ReadOnly = true
            Me.columnfonos.MaxLength = 61
            Me.columnemail.MaxLength = 30
            Me.columnnomRem.ReadOnly = true
            Me.columnnomRem.MaxLength = 51
            Me.columnfono.MaxLength = 60
            Me.columnemaRem.MaxLength = 50
            Me.columntransfe.MaxLength = 100
            Me.columnplazoEnt.MaxLength = 40
            Me.columnforma.MaxLength = 20
            Me.columnlugarEnt.MaxLength = 100
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columnlugar.MaxLength = 100
            Me.columnnombre.MaxLength = 100
            Me.columnnomAte.ReadOnly = true
            Me.columnnomAte.MaxLength = 51
            Me.columnobsFac.MaxLength = 200
            Me.columnunidad.MaxLength = 20
            Me.columnmaterial.MaxLength = 100
            Me.columncodMon.AllowDBNull = false
            Me.columnmoneda.MaxLength = 20
            Me.columnsimbolo.MaxLength = 10
            Me.columnnroProf.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVOrdenDetOrdenRow() As VOrdenDetOrdenRow
            Return CType(Me.NewRow,VOrdenDetOrdenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VOrdenDetOrdenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VOrdenDetOrdenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VOrdenDetOrdenRowChangedEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowChanged(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VOrdenDetOrdenRowChangingEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowChanging(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VOrdenDetOrdenRowDeletedEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowDeleted(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VOrdenDetOrdenRowDeletingEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowDeleting(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVOrdenDetOrdenRow(ByVal row As VOrdenDetOrdenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VOrdenDetOrdenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VSolDetSolRow
        Inherits Global.System.Data.DataRow
        
        Private tableVSolDetSol As VSolDetSolDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVSolDetSol = CType(Me.Table,VSolDetSolDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idSol() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.idSolColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.idSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecSol() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.fecSolColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecSol' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.fecSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property est() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.estColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'est' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.estColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombres() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.nombresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombres' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.nombresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombres1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.nombres1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombres1' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.nombres1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obs' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.estadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPers() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codPersColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codPersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPersA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.codPersAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codPersA' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.codPersAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDetS() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codDetSColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codDetSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prioridad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.prioridadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'prioridad' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.prioridadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descrip() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.descripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descrip' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.descripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.cantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property areaM() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.areaMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'areaM' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.areaMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoM() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.tipoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoM' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.tipoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jefe() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.jefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'jefe' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.jefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codAreaM() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codAreaMColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codAreaMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codTipM() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codTipMColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codTipMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMat() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codMatColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codMatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obsSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.obsSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obsSol' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.obsSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.estSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estSol' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.estSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVSolDetSol.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecSolNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.fecSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecSolNull()
            Me(Me.tableVSolDetSol.fecSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.estColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestNull()
            Me(Me.tableVSolDetSol.estColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombresNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.nombresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombresNull()
            Me(Me.tableVSolDetSol.nombresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnombres1Null() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.nombres1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnombres1Null()
            Me(Me.tableVSolDetSol.nombres1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsNull()
            Me(Me.tableVSolDetSol.obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableVSolDetSol.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodPersANull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.codPersAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodPersANull()
            Me(Me.tableVSolDetSol.codPersAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprioridadNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.prioridadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprioridadNull()
            Me(Me.tableVSolDetSol.prioridadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.descripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripNull()
            Me(Me.tableVSolDetSol.descripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tableVSolDetSol.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVSolDetSol.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsareaMNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.areaMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetareaMNull()
            Me(Me.tableVSolDetSol.areaMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoMNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.tipoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoMNull()
            Me(Me.tableVSolDetSol.tipoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjefeNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.jefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjefeNull()
            Me(Me.tableVSolDetSol.jefeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsSolNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.obsSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsSolNull()
            Me(Me.tableVSolDetSol.obsSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestSolNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.estSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestSolNull()
            Me(Me.tableVSolDetSol.estSolColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VCotDetCotRow
        Inherits Global.System.Data.DataRow
        
        Private tableVCotDetCot As VCotDetCotDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVCotDetCot = CType(Me.Table,VCotDetCotDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDetC() As Integer
            Get
                Return CType(Me(Me.tableVCotDetCot.codDetCColumn),Integer)
            End Get
            Set
                Me(Me.tableVCotDetCot.codDetCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecCot() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.fecCotColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecCot' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.fecCotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property atencion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.atencionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'atencion' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.atencionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property celRpm() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.celRpmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'celRpm' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.celRpmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fonos() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.fonosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fonos' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.fonosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'email' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nomRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomRem' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nomRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fono() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.fonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fono' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.fonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emaRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.emaRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'emaRem' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.emaRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tiempoVig() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.tiempoVigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tiempoVig' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.tiempoVigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property plazo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.plazoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'plazo' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.plazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property forma() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.formaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'forma' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.formaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugarEnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.lugarEntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugarEnt' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.lugarEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property incluir() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.incluirColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'incluir' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.incluirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableVCotDetCot.codigoColumn),String)
            End Get
            Set
                Me(Me.tableVCotDetCot.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugar() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.lugarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugar' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.lugarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nomSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomSol' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nomSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obs' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codGruC() As Integer
            Get
                Return CType(Me(Me.tableVCotDetCot.codGruCColumn),Integer)
            End Get
            Set
                Me(Me.tableVCotDetCot.codGruCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descrip() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.descripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descrip' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.descripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.cantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property material() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'material' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.precioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'precio' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.precioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.subTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subTotal' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.subTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVCotDetCot.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecCotNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.fecCotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecCotNull()
            Me(Me.tableVCotDetCot.fecCotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVCotDetCot.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVCotDetCot.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsatencionNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.atencionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetatencionNull()
            Me(Me.tableVCotDetCot.atencionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscelRpmNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.celRpmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcelRpmNull()
            Me(Me.tableVCotDetCot.celRpmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonosNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.fonosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonosNull()
            Me(Me.tableVCotDetCot.fonosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableVCotDetCot.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomRemNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nomRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomRemNull()
            Me(Me.tableVCotDetCot.nomRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonoNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.fonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonoNull()
            Me(Me.tableVCotDetCot.fonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemaRemNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.emaRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemaRemNull()
            Me(Me.tableVCotDetCot.emaRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstiempoVigNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.tiempoVigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettiempoVigNull()
            Me(Me.tableVCotDetCot.tiempoVigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsplazoNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.plazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetplazoNull()
            Me(Me.tableVCotDetCot.plazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.formaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaNull()
            Me(Me.tableVCotDetCot.formaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarEntNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.lugarEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarEntNull()
            Me(Me.tableVCotDetCot.lugarEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsincluirNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.incluirColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetincluirNull()
            Me(Me.tableVCotDetCot.incluirColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.lugarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarNull()
            Me(Me.tableVCotDetCot.lugarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVCotDetCot.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomSolNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nomSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomSolNull()
            Me(Me.tableVCotDetCot.nomSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsNull()
            Me(Me.tableVCotDetCot.obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.descripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripNull()
            Me(Me.tableVCotDetCot.descripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tableVCotDetCot.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVCotDetCot.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaterialNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaterialNull()
            Me(Me.tableVCotDetCot.materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprecioNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.precioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprecioNull()
            Me(Me.tableVCotDetCot.precioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubTotalNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.subTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubTotalNull()
            Me(Me.tableVCotDetCot.subTotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VOrdenDetOrdenRow
        Inherits Global.System.Data.DataRow
        
        Private tableVOrdenDetOrden As VOrdenDetOrdenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVOrdenDetOrden = CType(Me.Table,VOrdenDetOrdenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDetO() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDetOrden.codDetOColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.codDetOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecOrden() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fecOrdenColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecOrden' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fecOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property atiendeCom() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.atiendeComColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'atiendeCom' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.atiendeComColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property celAti() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.celAtiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'celAti' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.celAtiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fonos() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fonosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fonos' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fonosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'email' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nomRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomRem' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nomRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fono() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fono' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emaRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.emaRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'emaRem' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.emaRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfe() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.transfeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'transfe' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.transfeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property plazoEnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.plazoEntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'plazoEnt' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.plazoEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property forma() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.formaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'forma' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.formaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugarEnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.lugarEntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugarEnt' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.lugarEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property igv() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.igvColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'igv' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.igvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property calIGV() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.calIGVColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'calIGV' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.calIGVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableVOrdenDetOrden.codigoColumn),String)
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugar() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.lugarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugar' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.lugarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomAte() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nomAteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomAte' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nomAteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obsFac() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.obsFacColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obsFac' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.obsFacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.cantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property material() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'material' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.precioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'precio' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.precioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.subTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subTotal' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.subTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDetOrden.codMonColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.monedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'moneda' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.monedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroProf() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nroProfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroProf' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nroProfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVOrdenDetOrden.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecOrdenNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fecOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecOrdenNull()
            Me(Me.tableVOrdenDetOrden.fecOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVOrdenDetOrden.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVOrdenDetOrden.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsatiendeComNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.atiendeComColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetatiendeComNull()
            Me(Me.tableVOrdenDetOrden.atiendeComColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscelAtiNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.celAtiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcelAtiNull()
            Me(Me.tableVOrdenDetOrden.celAtiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonosNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fonosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonosNull()
            Me(Me.tableVOrdenDetOrden.fonosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableVOrdenDetOrden.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomRemNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nomRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomRemNull()
            Me(Me.tableVOrdenDetOrden.nomRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonoNull()
            Me(Me.tableVOrdenDetOrden.fonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemaRemNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.emaRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemaRemNull()
            Me(Me.tableVOrdenDetOrden.emaRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstransfeNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.transfeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettransfeNull()
            Me(Me.tableVOrdenDetOrden.transfeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsplazoEntNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.plazoEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetplazoEntNull()
            Me(Me.tableVOrdenDetOrden.plazoEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.formaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaNull()
            Me(Me.tableVOrdenDetOrden.formaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarEntNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.lugarEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarEntNull()
            Me(Me.tableVOrdenDetOrden.lugarEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsigvNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.igvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetigvNull()
            Me(Me.tableVOrdenDetOrden.igvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscalIGVNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.calIGVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcalIGVNull()
            Me(Me.tableVOrdenDetOrden.calIGVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.lugarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarNull()
            Me(Me.tableVOrdenDetOrden.lugarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVOrdenDetOrden.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomAteNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nomAteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomAteNull()
            Me(Me.tableVOrdenDetOrden.nomAteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsFacNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.obsFacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsFacNull()
            Me(Me.tableVOrdenDetOrden.obsFacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tableVOrdenDetOrden.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVOrdenDetOrden.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaterialNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaterialNull()
            Me(Me.tableVOrdenDetOrden.materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprecioNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.precioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprecioNull()
            Me(Me.tableVOrdenDetOrden.precioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubTotalNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.subTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubTotalNull()
            Me(Me.tableVOrdenDetOrden.subTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmonedaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.monedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmonedaNull()
            Me(Me.tableVOrdenDetOrden.monedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableVOrdenDetOrden.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroProfNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nroProfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroProfNull()
            Me(Me.tableVOrdenDetOrden.nroProfColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VSolDetSolRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VSolDetSolRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VSolDetSolRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VSolDetSolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VCotDetCotRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VCotDetCotRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VCotDetCotRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VCotDetCotRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VOrdenDetOrdenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VOrdenDetOrdenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VOrdenDetOrdenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VOrdenDetOrdenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetAlmacenTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VSolDetSolTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VSolDetSol"
            tableMapping.ColumnMappings.Add("idSol", "idSol")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("fecSol", "fecSol")
            tableMapping.ColumnMappings.Add("est", "est")
            tableMapping.ColumnMappings.Add("nombres", "nombres")
            tableMapping.ColumnMappings.Add("nombres1", "nombres1")
            tableMapping.ColumnMappings.Add("obs", "obs")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("codPers", "codPers")
            tableMapping.ColumnMappings.Add("codPersA", "codPersA")
            tableMapping.ColumnMappings.Add("codDetS", "codDetS")
            tableMapping.ColumnMappings.Add("prioridad", "prioridad")
            tableMapping.ColumnMappings.Add("descrip", "descrip")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("areaM", "areaM")
            tableMapping.ColumnMappings.Add("tipoM", "tipoM")
            tableMapping.ColumnMappings.Add("jefe", "jefe")
            tableMapping.ColumnMappings.Add("codAreaM", "codAreaM")
            tableMapping.ColumnMappings.Add("codTipM", "codTipM")
            tableMapping.ColumnMappings.Add("codMat", "codMat")
            tableMapping.ColumnMappings.Add("obsSol", "obsSol")
            tableMapping.ColumnMappings.Add("estSol", "estSol")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=PROGRAMADORUNO;Initial Catalog=BD_ConstrucMech;User ID=mech;Password="& _ 
                "mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select idSol,nro,fecSol,est,nombres,nombres1,obs,estado,codPers,codPersA,codDetS,"& _ 
                "prioridad,descrip,cant,unidad,areaM,tipoM,jefe,obsSol,codAreaM,codTipM,codMat,es"& _ 
                "tSol from VSolDetSol where idSol=@idSol"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idSol", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "idSol", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VSolDetSolDataTable, ByVal idSol As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(idSol,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal idSol As Integer) As DataSetAlmacen.VSolDetSolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(idSol,Integer)
            Dim dataTable As DataSetAlmacen.VSolDetSolDataTable = New DataSetAlmacen.VSolDetSolDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VCotDetCotTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VCotDetCot"
            tableMapping.ColumnMappings.Add("codDetC", "codDetC")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("fecCot", "fecCot")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("atencion", "atencion")
            tableMapping.ColumnMappings.Add("celRpm", "celRpm")
            tableMapping.ColumnMappings.Add("fonos", "fonos")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("nomRem", "nomRem")
            tableMapping.ColumnMappings.Add("fono", "fono")
            tableMapping.ColumnMappings.Add("emaRem", "emaRem")
            tableMapping.ColumnMappings.Add("tiempoVig", "tiempoVig")
            tableMapping.ColumnMappings.Add("plazo", "plazo")
            tableMapping.ColumnMappings.Add("forma", "forma")
            tableMapping.ColumnMappings.Add("lugarEnt", "lugarEnt")
            tableMapping.ColumnMappings.Add("incluir", "incluir")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("lugar", "lugar")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("nomSol", "nomSol")
            tableMapping.ColumnMappings.Add("obs", "obs")
            tableMapping.ColumnMappings.Add("codGruC", "codGruC")
            tableMapping.ColumnMappings.Add("descrip", "descrip")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("material", "material")
            tableMapping.ColumnMappings.Add("precio", "precio")
            tableMapping.ColumnMappings.Add("subTotal", "subTotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=174.36.22.84,8888;Initial Catalog=BD_ConstrucMech;User ID=mech;Passwo"& _ 
                "rd=mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select codDetC,nro,fecCot,razon,ruc,atencion,celRpm,fonos,email,nomRem,fono,emaRe"& _ 
                "m,tiempoVig,plazo,forma,lugarEnt,incluir,codigo,lugar,nombre,nomSol,obs,codGruC,"& _ 
                "descrip,cant,unidad,material,precio,subTotal from VCotDetCot where codCot=@codC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codC", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "codCot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VCotDetCotDataTable, ByVal codC As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codC,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codC As Integer) As DataSetAlmacen.VCotDetCotDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codC,Integer)
            Dim dataTable As DataSetAlmacen.VCotDetCotDataTable = New DataSetAlmacen.VCotDetCotDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VOrdenDetOrdenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VOrdenDetOrden"
            tableMapping.ColumnMappings.Add("codDetO", "codDetO")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("fecOrden", "fecOrden")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("atiendeCom", "atiendeCom")
            tableMapping.ColumnMappings.Add("celAti", "celAti")
            tableMapping.ColumnMappings.Add("fonos", "fonos")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("nomRem", "nomRem")
            tableMapping.ColumnMappings.Add("fono", "fono")
            tableMapping.ColumnMappings.Add("emaRem", "emaRem")
            tableMapping.ColumnMappings.Add("transfe", "transfe")
            tableMapping.ColumnMappings.Add("plazoEnt", "plazoEnt")
            tableMapping.ColumnMappings.Add("forma", "forma")
            tableMapping.ColumnMappings.Add("lugarEnt", "lugarEnt")
            tableMapping.ColumnMappings.Add("igv", "igv")
            tableMapping.ColumnMappings.Add("calIGV", "calIGV")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("lugar", "lugar")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("nomAte", "nomAte")
            tableMapping.ColumnMappings.Add("obsFac", "obsFac")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("material", "material")
            tableMapping.ColumnMappings.Add("precio", "precio")
            tableMapping.ColumnMappings.Add("subTotal", "subTotal")
            tableMapping.ColumnMappings.Add("codMon", "codMon")
            tableMapping.ColumnMappings.Add("moneda", "moneda")
            tableMapping.ColumnMappings.Add("simbolo", "simbolo")
            tableMapping.ColumnMappings.Add("nroProf", "nroProf")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=PROGRAMADORUNO;Initial Catalog=BD_ConstrucMech;User ID=mech;Password="& _ 
                "mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select codDetO,nro,fecOrden,razon,ruc,atiendeCom,celAti,fonos,email,nomRem,fono,e"& _ 
                "maRem,transfe,plazoEnt,forma,lugarEnt,igv,calIGV,codigo,lugar,nombre,nomAte,obsF"& _ 
                "ac,cant,unidad,material,precio,subTotal,codMon,moneda,simbolo,nroProf from VOrde"& _ 
                "nDetOrden where nroOrden=@nro"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nroOrden", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VOrdenDetOrdenDataTable, ByVal nro As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nro,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal nro As Integer) As DataSetAlmacen.VOrdenDetOrdenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nro,Integer)
            Dim dataTable As DataSetAlmacen.VOrdenDetOrdenDataTable = New DataSetAlmacen.VOrdenDetOrdenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetAlmacen, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetAlmacen, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetAlmacen, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetAlmacen) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
