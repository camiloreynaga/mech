'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4927
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetAlmacen"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetAlmacen
    Inherits Global.System.Data.DataSet
    
    Private tableVSolDetSol As VSolDetSolDataTable
    
    Private tableVOrdenDesembolsoImprimir As VOrdenDesembolsoImprimirDataTable
    
    Private tableVKardex As VKardexDataTable
    
    Private tableVOrdenDetOrden As VOrdenDetOrdenDataTable
    
    Private tableVGuiaDetGuiaE As VGuiaDetGuiaEDataTable
    
    Private tableVCotDetCot As VCotDetCotDataTable
    
    Private tableVDetSolCajaImprimir As VDetSolCajaImprimirDataTable
    
    Private tablevStockAlmacen1 As vStockAlmacen1DataTable
    
    Private tableVGastosPorDia As VGastosPorDiaDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VSolDetSol")) Is Nothing) Then
                MyBase.Tables.Add(New VSolDetSolDataTable(ds.Tables("VSolDetSol")))
            End If
            If (Not (ds.Tables("VOrdenDesembolsoImprimir")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDesembolsoImprimirDataTable(ds.Tables("VOrdenDesembolsoImprimir")))
            End If
            If (Not (ds.Tables("VKardex")) Is Nothing) Then
                MyBase.Tables.Add(New VKardexDataTable(ds.Tables("VKardex")))
            End If
            If (Not (ds.Tables("VOrdenDetOrden")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDetOrdenDataTable(ds.Tables("VOrdenDetOrden")))
            End If
            If (Not (ds.Tables("VGuiaDetGuiaE")) Is Nothing) Then
                MyBase.Tables.Add(New VGuiaDetGuiaEDataTable(ds.Tables("VGuiaDetGuiaE")))
            End If
            If (Not (ds.Tables("VCotDetCot")) Is Nothing) Then
                MyBase.Tables.Add(New VCotDetCotDataTable(ds.Tables("VCotDetCot")))
            End If
            If (Not (ds.Tables("VDetSolCajaImprimir")) Is Nothing) Then
                MyBase.Tables.Add(New VDetSolCajaImprimirDataTable(ds.Tables("VDetSolCajaImprimir")))
            End If
            If (Not (ds.Tables("vStockAlmacen1")) Is Nothing) Then
                MyBase.Tables.Add(New vStockAlmacen1DataTable(ds.Tables("vStockAlmacen1")))
            End If
            If (Not (ds.Tables("VGastosPorDia")) Is Nothing) Then
                MyBase.Tables.Add(New VGastosPorDiaDataTable(ds.Tables("VGastosPorDia")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VSolDetSol() As VSolDetSolDataTable
        Get
            Return Me.tableVSolDetSol
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VOrdenDesembolsoImprimir() As VOrdenDesembolsoImprimirDataTable
        Get
            Return Me.tableVOrdenDesembolsoImprimir
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VKardex() As VKardexDataTable
        Get
            Return Me.tableVKardex
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VOrdenDetOrden() As VOrdenDetOrdenDataTable
        Get
            Return Me.tableVOrdenDetOrden
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VGuiaDetGuiaE() As VGuiaDetGuiaEDataTable
        Get
            Return Me.tableVGuiaDetGuiaE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VCotDetCot() As VCotDetCotDataTable
        Get
            Return Me.tableVCotDetCot
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDetSolCajaImprimir() As VDetSolCajaImprimirDataTable
        Get
            Return Me.tableVDetSolCajaImprimir
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vStockAlmacen1() As vStockAlmacen1DataTable
        Get
            Return Me.tablevStockAlmacen1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VGastosPorDia() As VGastosPorDiaDataTable
        Get
            Return Me.tableVGastosPorDia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetAlmacen = CType(MyBase.Clone,DataSetAlmacen)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VSolDetSol")) Is Nothing) Then
                MyBase.Tables.Add(New VSolDetSolDataTable(ds.Tables("VSolDetSol")))
            End If
            If (Not (ds.Tables("VOrdenDesembolsoImprimir")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDesembolsoImprimirDataTable(ds.Tables("VOrdenDesembolsoImprimir")))
            End If
            If (Not (ds.Tables("VKardex")) Is Nothing) Then
                MyBase.Tables.Add(New VKardexDataTable(ds.Tables("VKardex")))
            End If
            If (Not (ds.Tables("VOrdenDetOrden")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDetOrdenDataTable(ds.Tables("VOrdenDetOrden")))
            End If
            If (Not (ds.Tables("VGuiaDetGuiaE")) Is Nothing) Then
                MyBase.Tables.Add(New VGuiaDetGuiaEDataTable(ds.Tables("VGuiaDetGuiaE")))
            End If
            If (Not (ds.Tables("VCotDetCot")) Is Nothing) Then
                MyBase.Tables.Add(New VCotDetCotDataTable(ds.Tables("VCotDetCot")))
            End If
            If (Not (ds.Tables("VDetSolCajaImprimir")) Is Nothing) Then
                MyBase.Tables.Add(New VDetSolCajaImprimirDataTable(ds.Tables("VDetSolCajaImprimir")))
            End If
            If (Not (ds.Tables("vStockAlmacen1")) Is Nothing) Then
                MyBase.Tables.Add(New vStockAlmacen1DataTable(ds.Tables("vStockAlmacen1")))
            End If
            If (Not (ds.Tables("VGastosPorDia")) Is Nothing) Then
                MyBase.Tables.Add(New VGastosPorDiaDataTable(ds.Tables("VGastosPorDia")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVSolDetSol = CType(MyBase.Tables("VSolDetSol"),VSolDetSolDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVSolDetSol) Is Nothing) Then
                Me.tableVSolDetSol.InitVars
            End If
        End If
        Me.tableVOrdenDesembolsoImprimir = CType(MyBase.Tables("VOrdenDesembolsoImprimir"),VOrdenDesembolsoImprimirDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVOrdenDesembolsoImprimir) Is Nothing) Then
                Me.tableVOrdenDesembolsoImprimir.InitVars
            End If
        End If
        Me.tableVKardex = CType(MyBase.Tables("VKardex"),VKardexDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVKardex) Is Nothing) Then
                Me.tableVKardex.InitVars
            End If
        End If
        Me.tableVOrdenDetOrden = CType(MyBase.Tables("VOrdenDetOrden"),VOrdenDetOrdenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVOrdenDetOrden) Is Nothing) Then
                Me.tableVOrdenDetOrden.InitVars
            End If
        End If
        Me.tableVGuiaDetGuiaE = CType(MyBase.Tables("VGuiaDetGuiaE"),VGuiaDetGuiaEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVGuiaDetGuiaE) Is Nothing) Then
                Me.tableVGuiaDetGuiaE.InitVars
            End If
        End If
        Me.tableVCotDetCot = CType(MyBase.Tables("VCotDetCot"),VCotDetCotDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVCotDetCot) Is Nothing) Then
                Me.tableVCotDetCot.InitVars
            End If
        End If
        Me.tableVDetSolCajaImprimir = CType(MyBase.Tables("VDetSolCajaImprimir"),VDetSolCajaImprimirDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVDetSolCajaImprimir) Is Nothing) Then
                Me.tableVDetSolCajaImprimir.InitVars
            End If
        End If
        Me.tablevStockAlmacen1 = CType(MyBase.Tables("vStockAlmacen1"),vStockAlmacen1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablevStockAlmacen1) Is Nothing) Then
                Me.tablevStockAlmacen1.InitVars
            End If
        End If
        Me.tableVGastosPorDia = CType(MyBase.Tables("VGastosPorDia"),VGastosPorDiaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVGastosPorDia) Is Nothing) Then
                Me.tableVGastosPorDia.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetAlmacen"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetAlmacen.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVSolDetSol = New VSolDetSolDataTable
        MyBase.Tables.Add(Me.tableVSolDetSol)
        Me.tableVOrdenDesembolsoImprimir = New VOrdenDesembolsoImprimirDataTable
        MyBase.Tables.Add(Me.tableVOrdenDesembolsoImprimir)
        Me.tableVKardex = New VKardexDataTable
        MyBase.Tables.Add(Me.tableVKardex)
        Me.tableVOrdenDetOrden = New VOrdenDetOrdenDataTable
        MyBase.Tables.Add(Me.tableVOrdenDetOrden)
        Me.tableVGuiaDetGuiaE = New VGuiaDetGuiaEDataTable
        MyBase.Tables.Add(Me.tableVGuiaDetGuiaE)
        Me.tableVCotDetCot = New VCotDetCotDataTable
        MyBase.Tables.Add(Me.tableVCotDetCot)
        Me.tableVDetSolCajaImprimir = New VDetSolCajaImprimirDataTable
        MyBase.Tables.Add(Me.tableVDetSolCajaImprimir)
        Me.tablevStockAlmacen1 = New vStockAlmacen1DataTable
        MyBase.Tables.Add(Me.tablevStockAlmacen1)
        Me.tableVGastosPorDia = New VGastosPorDiaDataTable
        MyBase.Tables.Add(Me.tableVGastosPorDia)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVSolDetSol() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVOrdenDesembolsoImprimir() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVKardex() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVOrdenDetOrden() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVGuiaDetGuiaE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVCotDetCot() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVDetSolCajaImprimir() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevStockAlmacen1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVGastosPorDia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetAlmacen = New DataSetAlmacen
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VSolDetSolRowChangeEventHandler(ByVal sender As Object, ByVal e As VSolDetSolRowChangeEvent)
    
    Public Delegate Sub VOrdenDesembolsoImprimirRowChangeEventHandler(ByVal sender As Object, ByVal e As VOrdenDesembolsoImprimirRowChangeEvent)
    
    Public Delegate Sub VKardexRowChangeEventHandler(ByVal sender As Object, ByVal e As VKardexRowChangeEvent)
    
    Public Delegate Sub VOrdenDetOrdenRowChangeEventHandler(ByVal sender As Object, ByVal e As VOrdenDetOrdenRowChangeEvent)
    
    Public Delegate Sub VGuiaDetGuiaERowChangeEventHandler(ByVal sender As Object, ByVal e As VGuiaDetGuiaERowChangeEvent)
    
    Public Delegate Sub VCotDetCotRowChangeEventHandler(ByVal sender As Object, ByVal e As VCotDetCotRowChangeEvent)
    
    Public Delegate Sub VDetSolCajaImprimirRowChangeEventHandler(ByVal sender As Object, ByVal e As VDetSolCajaImprimirRowChangeEvent)
    
    Public Delegate Sub vStockAlmacen1RowChangeEventHandler(ByVal sender As Object, ByVal e As vStockAlmacen1RowChangeEvent)
    
    Public Delegate Sub VGastosPorDiaRowChangeEventHandler(ByVal sender As Object, ByVal e As VGastosPorDiaRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VSolDetSolDataTable
        Inherits Global.System.Data.TypedTableBase(Of VSolDetSolRow)
        
        Private columnidSol As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnfecSol As Global.System.Data.DataColumn
        
        Private columnest As Global.System.Data.DataColumn
        
        Private columnnombres As Global.System.Data.DataColumn
        
        Private columnnombres1 As Global.System.Data.DataColumn
        
        Private columnobs As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columncodPers As Global.System.Data.DataColumn
        
        Private columncodPersA As Global.System.Data.DataColumn
        
        Private columncodDetS As Global.System.Data.DataColumn
        
        Private columnprioridad As Global.System.Data.DataColumn
        
        Private columndescrip As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnareaM As Global.System.Data.DataColumn
        
        Private columntipoM As Global.System.Data.DataColumn
        
        Private columnjefe As Global.System.Data.DataColumn
        
        Private columncodAreaM As Global.System.Data.DataColumn
        
        Private columncodTipM As Global.System.Data.DataColumn
        
        Private columncodMat As Global.System.Data.DataColumn
        
        Private columnobsSol As Global.System.Data.DataColumn
        
        Private columnestSol As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VSolDetSol"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombres1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombres1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPersAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPersA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDetSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDetS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prioridadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprioridad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property areaMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnareaM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jefeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjefe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codAreaMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodAreaM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codTipMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodTipM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobsSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VSolDetSolRow
            Get
                Return CType(Me.Rows(index),VSolDetSolRow)
            End Get
        End Property
        
        Public Event VSolDetSolRowChanging As VSolDetSolRowChangeEventHandler
        
        Public Event VSolDetSolRowChanged As VSolDetSolRowChangeEventHandler
        
        Public Event VSolDetSolRowDeleting As VSolDetSolRowChangeEventHandler
        
        Public Event VSolDetSolRowDeleted As VSolDetSolRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVSolDetSolRow(ByVal row As VSolDetSolRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVSolDetSolRow( _
                    ByVal idSol As Integer,  _
                    ByVal nro As String,  _
                    ByVal fecSol As Date,  _
                    ByVal est As String,  _
                    ByVal nombres As String,  _
                    ByVal nombres1 As String,  _
                    ByVal obs As String,  _
                    ByVal estado As Integer,  _
                    ByVal codPers As Integer,  _
                    ByVal codPersA As Integer,  _
                    ByVal codDetS As Integer,  _
                    ByVal prioridad As String,  _
                    ByVal descrip As String,  _
                    ByVal cant As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal areaM As String,  _
                    ByVal tipoM As String,  _
                    ByVal jefe As String,  _
                    ByVal codAreaM As Integer,  _
                    ByVal codTipM As Integer,  _
                    ByVal codMat As Integer,  _
                    ByVal obsSol As String,  _
                    ByVal estSol As String) As VSolDetSolRow
            Dim rowVSolDetSolRow As VSolDetSolRow = CType(Me.NewRow,VSolDetSolRow)
            Dim columnValuesArray() As Object = New Object() {idSol, nro, fecSol, est, nombres, nombres1, obs, estado, codPers, codPersA, codDetS, prioridad, descrip, cant, unidad, areaM, tipoM, jefe, codAreaM, codTipM, codMat, obsSol, estSol}
            rowVSolDetSolRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVSolDetSolRow)
            Return rowVSolDetSolRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VSolDetSolDataTable = CType(MyBase.Clone,VSolDetSolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VSolDetSolDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidSol = MyBase.Columns("idSol")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnfecSol = MyBase.Columns("fecSol")
            Me.columnest = MyBase.Columns("est")
            Me.columnnombres = MyBase.Columns("nombres")
            Me.columnnombres1 = MyBase.Columns("nombres1")
            Me.columnobs = MyBase.Columns("obs")
            Me.columnestado = MyBase.Columns("estado")
            Me.columncodPers = MyBase.Columns("codPers")
            Me.columncodPersA = MyBase.Columns("codPersA")
            Me.columncodDetS = MyBase.Columns("codDetS")
            Me.columnprioridad = MyBase.Columns("prioridad")
            Me.columndescrip = MyBase.Columns("descrip")
            Me.columncant = MyBase.Columns("cant")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnareaM = MyBase.Columns("areaM")
            Me.columntipoM = MyBase.Columns("tipoM")
            Me.columnjefe = MyBase.Columns("jefe")
            Me.columncodAreaM = MyBase.Columns("codAreaM")
            Me.columncodTipM = MyBase.Columns("codTipM")
            Me.columncodMat = MyBase.Columns("codMat")
            Me.columnobsSol = MyBase.Columns("obsSol")
            Me.columnestSol = MyBase.Columns("estSol")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidSol = New Global.System.Data.DataColumn("idSol", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidSol)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnfecSol = New Global.System.Data.DataColumn("fecSol", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecSol)
            Me.columnest = New Global.System.Data.DataColumn("est", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnest)
            Me.columnnombres = New Global.System.Data.DataColumn("nombres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombres)
            Me.columnnombres1 = New Global.System.Data.DataColumn("nombres1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombres1)
            Me.columnobs = New Global.System.Data.DataColumn("obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columncodPers = New Global.System.Data.DataColumn("codPers", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPers)
            Me.columncodPersA = New Global.System.Data.DataColumn("codPersA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPersA)
            Me.columncodDetS = New Global.System.Data.DataColumn("codDetS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDetS)
            Me.columnprioridad = New Global.System.Data.DataColumn("prioridad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprioridad)
            Me.columndescrip = New Global.System.Data.DataColumn("descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescrip)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnareaM = New Global.System.Data.DataColumn("areaM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnareaM)
            Me.columntipoM = New Global.System.Data.DataColumn("tipoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoM)
            Me.columnjefe = New Global.System.Data.DataColumn("jefe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjefe)
            Me.columncodAreaM = New Global.System.Data.DataColumn("codAreaM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodAreaM)
            Me.columncodTipM = New Global.System.Data.DataColumn("codTipM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodTipM)
            Me.columncodMat = New Global.System.Data.DataColumn("codMat", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMat)
            Me.columnobsSol = New Global.System.Data.DataColumn("obsSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobsSol)
            Me.columnestSol = New Global.System.Data.DataColumn("estSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestSol)
            Me.columnidSol.AllowDBNull = false
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 13
            Me.columnest.ReadOnly = true
            Me.columnest.MaxLength = 9
            Me.columnnombres.ReadOnly = true
            Me.columnnombres.MaxLength = 51
            Me.columnnombres1.ReadOnly = true
            Me.columnnombres1.MaxLength = 51
            Me.columnobs.MaxLength = 200
            Me.columncodPers.AllowDBNull = false
            Me.columncodDetS.AllowDBNull = false
            Me.columnprioridad.MaxLength = 20
            Me.columndescrip.MaxLength = 100
            Me.columnunidad.MaxLength = 20
            Me.columnareaM.MaxLength = 40
            Me.columntipoM.MaxLength = 40
            Me.columnjefe.ReadOnly = true
            Me.columnjefe.MaxLength = 51
            Me.columncodAreaM.AllowDBNull = false
            Me.columncodTipM.AllowDBNull = false
            Me.columncodMat.AllowDBNull = false
            Me.columnobsSol.MaxLength = 100
            Me.columnestSol.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVSolDetSolRow() As VSolDetSolRow
            Return CType(Me.NewRow,VSolDetSolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VSolDetSolRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VSolDetSolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VSolDetSolRowChangedEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowChanged(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VSolDetSolRowChangingEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowChanging(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VSolDetSolRowDeletedEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowDeleted(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VSolDetSolRowDeletingEvent) Is Nothing) Then
                RaiseEvent VSolDetSolRowDeleting(Me, New VSolDetSolRowChangeEvent(CType(e.Row,VSolDetSolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVSolDetSolRow(ByVal row As VSolDetSolRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VSolDetSolDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VOrdenDesembolsoImprimirDataTable
        Inherits Global.System.Data.TypedTableBase(Of VOrdenDesembolsoImprimirRow)
        
        Private columnidOP As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnfecDes As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        Private columnmoneda As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columnmontoDet As Global.System.Data.DataColumn
        
        Private columnmontoDif As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnobra As Global.System.Data.DataColumn
        
        Private columncodIde As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnfono As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnbanco As Global.System.Data.DataColumn
        
        Private columnnroCta As Global.System.Data.DataColumn
        
        Private columnnroDet As Global.System.Data.DataColumn
        
        Private columndatoReq As Global.System.Data.DataColumn
        
        Private columnfactCheck As Global.System.Data.DataColumn
        
        Private columnfaCheck As Global.System.Data.DataColumn
        
        Private columnbolCheck As Global.System.Data.DataColumn
        
        Private columnboCheck As Global.System.Data.DataColumn
        
        Private columnguiaCheck As Global.System.Data.DataColumn
        
        Private columnguCheck As Global.System.Data.DataColumn
        
        Private columnvouCheck As Global.System.Data.DataColumn
        
        Private columnvoCheck As Global.System.Data.DataColumn
        
        Private columnvouDCheck As Global.System.Data.DataColumn
        
        Private columnvoDCheck As Global.System.Data.DataColumn
        
        Private columnreciCheck As Global.System.Data.DataColumn
        
        Private columnreCheck As Global.System.Data.DataColumn
        
        Private columnotroCheck As Global.System.Data.DataColumn
        
        Private columndescOtro As Global.System.Data.DataColumn
        
        Private columnotCheck As Global.System.Data.DataColumn
        
        Private columnnroConfor As Global.System.Data.DataColumn
        
        Private columnfecEnt As Global.System.Data.DataColumn
        
        Private columnhist As Global.System.Data.DataColumn
        
        Private columnsoli As Global.System.Data.DataColumn
        
        Private columngere As Global.System.Data.DataColumn
        
        Private columnteso As Global.System.Data.DataColumn
        
        Private columnconta As Global.System.Data.DataColumn
        
        Private columncodTipP As Global.System.Data.DataColumn
        
        Private columntipoP As Global.System.Data.DataColumn
        
        Private columncodPagD As Global.System.Data.DataColumn
        
        Private columnfecPago As Global.System.Data.DataColumn
        
        Private columnpagoDet As Global.System.Data.DataColumn
        
        Private columncodMon1 As Global.System.Data.DataColumn
        
        Private columnmoneda1 As Global.System.Data.DataColumn
        
        Private columnsimbolo1 As Global.System.Data.DataColumn
        
        Private columnmontoPago As Global.System.Data.DataColumn
        
        Private columnsoliEst As Global.System.Data.DataColumn
        
        Private columngereEst As Global.System.Data.DataColumn
        
        Private columntesoEst As Global.System.Data.DataColumn
        
        Private columncontaEst As Global.System.Data.DataColumn
        
        Private columnnroP As Global.System.Data.DataColumn
        
        Private columnclasif As Global.System.Data.DataColumn
        
        Private columnmontoD As Global.System.Data.DataColumn
        
        Private columncodBan As Global.System.Data.DataColumn
        
        Private columnbancoPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VOrdenDesembolsoImprimir"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoDifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoDif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codIdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodIde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroCtaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroCta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datoReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatoReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property factCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfactCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property faCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfaCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bolCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbolCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property boCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnboCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guiaCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguiaCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vouCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvouCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property voCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvoCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vouDCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvouDCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property voDCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvoDCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reciCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreciCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property otroCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnotroCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descOtroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescOtro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property otCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnotCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroConforColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroConfor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property histColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhist
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gereColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngere
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codTipPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodTipP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPagDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPagD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pagoDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpagoDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMon1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property moneda1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmoneda1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simbolo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soliEstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoliEst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gereEstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngereEst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tesoEstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntesoEst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contaEstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontaEst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clasifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclasif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codBanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodBan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bancoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbancoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VOrdenDesembolsoImprimirRow
            Get
                Return CType(Me.Rows(index),VOrdenDesembolsoImprimirRow)
            End Get
        End Property
        
        Public Event VOrdenDesembolsoImprimirRowChanging As VOrdenDesembolsoImprimirRowChangeEventHandler
        
        Public Event VOrdenDesembolsoImprimirRowChanged As VOrdenDesembolsoImprimirRowChangeEventHandler
        
        Public Event VOrdenDesembolsoImprimirRowDeleting As VOrdenDesembolsoImprimirRowChangeEventHandler
        
        Public Event VOrdenDesembolsoImprimirRowDeleted As VOrdenDesembolsoImprimirRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVOrdenDesembolsoImprimirRow(ByVal row As VOrdenDesembolsoImprimirRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVOrdenDesembolsoImprimirRow( _
                    ByVal idOP As Integer,  _
                    ByVal nro As String,  _
                    ByVal fecDes As Date,  _
                    ByVal codMon As Integer,  _
                    ByVal moneda As String,  _
                    ByVal simbolo As String,  _
                    ByVal monto As Decimal,  _
                    ByVal montoDet As Decimal,  _
                    ByVal montoDif As Decimal,  _
                    ByVal estado As Integer,  _
                    ByVal codigo As String,  _
                    ByVal obra As String,  _
                    ByVal codIde As Integer,  _
                    ByVal razon As String,  _
                    ByVal ruc As String,  _
                    ByVal fono As String,  _
                    ByVal email As String,  _
                    ByVal banco As String,  _
                    ByVal nroCta As String,  _
                    ByVal nroDet As String,  _
                    ByVal datoReq As String,  _
                    ByVal factCheck As Integer,  _
                    ByVal faCheck As String,  _
                    ByVal bolCheck As Integer,  _
                    ByVal boCheck As String,  _
                    ByVal guiaCheck As Integer,  _
                    ByVal guCheck As String,  _
                    ByVal vouCheck As Integer,  _
                    ByVal voCheck As String,  _
                    ByVal vouDCheck As Integer,  _
                    ByVal voDCheck As String,  _
                    ByVal reciCheck As Integer,  _
                    ByVal reCheck As String,  _
                    ByVal otroCheck As Integer,  _
                    ByVal descOtro As String,  _
                    ByVal otCheck As String,  _
                    ByVal nroConfor As String,  _
                    ByVal fecEnt As String,  _
                    ByVal hist As String,  _
                    ByVal soli As String,  _
                    ByVal gere As String,  _
                    ByVal teso As String,  _
                    ByVal conta As String,  _
                    ByVal codTipP As Integer,  _
                    ByVal tipoP As String,  _
                    ByVal codPagD As Integer,  _
                    ByVal fecPago As Date,  _
                    ByVal pagoDet As String,  _
                    ByVal codMon1 As Integer,  _
                    ByVal moneda1 As String,  _
                    ByVal simbolo1 As String,  _
                    ByVal montoPago As Decimal,  _
                    ByVal soliEst As String,  _
                    ByVal gereEst As String,  _
                    ByVal tesoEst As String,  _
                    ByVal contaEst As String,  _
                    ByVal nroP As String,  _
                    ByVal clasif As String,  _
                    ByVal montoD As Decimal,  _
                    ByVal codBan As Integer,  _
                    ByVal bancoPago As String) As VOrdenDesembolsoImprimirRow
            Dim rowVOrdenDesembolsoImprimirRow As VOrdenDesembolsoImprimirRow = CType(Me.NewRow,VOrdenDesembolsoImprimirRow)
            Dim columnValuesArray() As Object = New Object() {idOP, nro, fecDes, codMon, moneda, simbolo, monto, montoDet, montoDif, estado, codigo, obra, codIde, razon, ruc, fono, email, banco, nroCta, nroDet, datoReq, factCheck, faCheck, bolCheck, boCheck, guiaCheck, guCheck, vouCheck, voCheck, vouDCheck, voDCheck, reciCheck, reCheck, otroCheck, descOtro, otCheck, nroConfor, fecEnt, hist, soli, gere, teso, conta, codTipP, tipoP, codPagD, fecPago, pagoDet, codMon1, moneda1, simbolo1, montoPago, soliEst, gereEst, tesoEst, contaEst, nroP, clasif, montoD, codBan, bancoPago}
            rowVOrdenDesembolsoImprimirRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVOrdenDesembolsoImprimirRow)
            Return rowVOrdenDesembolsoImprimirRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VOrdenDesembolsoImprimirDataTable = CType(MyBase.Clone,VOrdenDesembolsoImprimirDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VOrdenDesembolsoImprimirDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidOP = MyBase.Columns("idOP")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnfecDes = MyBase.Columns("fecDes")
            Me.columncodMon = MyBase.Columns("codMon")
            Me.columnmoneda = MyBase.Columns("moneda")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columnmontoDet = MyBase.Columns("montoDet")
            Me.columnmontoDif = MyBase.Columns("montoDif")
            Me.columnestado = MyBase.Columns("estado")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnobra = MyBase.Columns("obra")
            Me.columncodIde = MyBase.Columns("codIde")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnfono = MyBase.Columns("fono")
            Me.columnemail = MyBase.Columns("email")
            Me.columnbanco = MyBase.Columns("banco")
            Me.columnnroCta = MyBase.Columns("nroCta")
            Me.columnnroDet = MyBase.Columns("nroDet")
            Me.columndatoReq = MyBase.Columns("datoReq")
            Me.columnfactCheck = MyBase.Columns("factCheck")
            Me.columnfaCheck = MyBase.Columns("faCheck")
            Me.columnbolCheck = MyBase.Columns("bolCheck")
            Me.columnboCheck = MyBase.Columns("boCheck")
            Me.columnguiaCheck = MyBase.Columns("guiaCheck")
            Me.columnguCheck = MyBase.Columns("guCheck")
            Me.columnvouCheck = MyBase.Columns("vouCheck")
            Me.columnvoCheck = MyBase.Columns("voCheck")
            Me.columnvouDCheck = MyBase.Columns("vouDCheck")
            Me.columnvoDCheck = MyBase.Columns("voDCheck")
            Me.columnreciCheck = MyBase.Columns("reciCheck")
            Me.columnreCheck = MyBase.Columns("reCheck")
            Me.columnotroCheck = MyBase.Columns("otroCheck")
            Me.columndescOtro = MyBase.Columns("descOtro")
            Me.columnotCheck = MyBase.Columns("otCheck")
            Me.columnnroConfor = MyBase.Columns("nroConfor")
            Me.columnfecEnt = MyBase.Columns("fecEnt")
            Me.columnhist = MyBase.Columns("hist")
            Me.columnsoli = MyBase.Columns("soli")
            Me.columngere = MyBase.Columns("gere")
            Me.columnteso = MyBase.Columns("teso")
            Me.columnconta = MyBase.Columns("conta")
            Me.columncodTipP = MyBase.Columns("codTipP")
            Me.columntipoP = MyBase.Columns("tipoP")
            Me.columncodPagD = MyBase.Columns("codPagD")
            Me.columnfecPago = MyBase.Columns("fecPago")
            Me.columnpagoDet = MyBase.Columns("pagoDet")
            Me.columncodMon1 = MyBase.Columns("codMon1")
            Me.columnmoneda1 = MyBase.Columns("moneda1")
            Me.columnsimbolo1 = MyBase.Columns("simbolo1")
            Me.columnmontoPago = MyBase.Columns("montoPago")
            Me.columnsoliEst = MyBase.Columns("soliEst")
            Me.columngereEst = MyBase.Columns("gereEst")
            Me.columntesoEst = MyBase.Columns("tesoEst")
            Me.columncontaEst = MyBase.Columns("contaEst")
            Me.columnnroP = MyBase.Columns("nroP")
            Me.columnclasif = MyBase.Columns("clasif")
            Me.columnmontoD = MyBase.Columns("montoD")
            Me.columncodBan = MyBase.Columns("codBan")
            Me.columnbancoPago = MyBase.Columns("bancoPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidOP = New Global.System.Data.DataColumn("idOP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidOP)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnfecDes = New Global.System.Data.DataColumn("fecDes", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecDes)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
            Me.columnmoneda = New Global.System.Data.DataColumn("moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmoneda)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columnmontoDet = New Global.System.Data.DataColumn("montoDet", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoDet)
            Me.columnmontoDif = New Global.System.Data.DataColumn("montoDif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoDif)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnobra = New Global.System.Data.DataColumn("obra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobra)
            Me.columncodIde = New Global.System.Data.DataColumn("codIde", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodIde)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnfono = New Global.System.Data.DataColumn("fono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfono)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnbanco = New Global.System.Data.DataColumn("banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbanco)
            Me.columnnroCta = New Global.System.Data.DataColumn("nroCta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroCta)
            Me.columnnroDet = New Global.System.Data.DataColumn("nroDet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroDet)
            Me.columndatoReq = New Global.System.Data.DataColumn("datoReq", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatoReq)
            Me.columnfactCheck = New Global.System.Data.DataColumn("factCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfactCheck)
            Me.columnfaCheck = New Global.System.Data.DataColumn("faCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfaCheck)
            Me.columnbolCheck = New Global.System.Data.DataColumn("bolCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbolCheck)
            Me.columnboCheck = New Global.System.Data.DataColumn("boCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnboCheck)
            Me.columnguiaCheck = New Global.System.Data.DataColumn("guiaCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguiaCheck)
            Me.columnguCheck = New Global.System.Data.DataColumn("guCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguCheck)
            Me.columnvouCheck = New Global.System.Data.DataColumn("vouCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvouCheck)
            Me.columnvoCheck = New Global.System.Data.DataColumn("voCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvoCheck)
            Me.columnvouDCheck = New Global.System.Data.DataColumn("vouDCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvouDCheck)
            Me.columnvoDCheck = New Global.System.Data.DataColumn("voDCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvoDCheck)
            Me.columnreciCheck = New Global.System.Data.DataColumn("reciCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreciCheck)
            Me.columnreCheck = New Global.System.Data.DataColumn("reCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreCheck)
            Me.columnotroCheck = New Global.System.Data.DataColumn("otroCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnotroCheck)
            Me.columndescOtro = New Global.System.Data.DataColumn("descOtro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescOtro)
            Me.columnotCheck = New Global.System.Data.DataColumn("otCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnotCheck)
            Me.columnnroConfor = New Global.System.Data.DataColumn("nroConfor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroConfor)
            Me.columnfecEnt = New Global.System.Data.DataColumn("fecEnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecEnt)
            Me.columnhist = New Global.System.Data.DataColumn("hist", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhist)
            Me.columnsoli = New Global.System.Data.DataColumn("soli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoli)
            Me.columngere = New Global.System.Data.DataColumn("gere", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngere)
            Me.columnteso = New Global.System.Data.DataColumn("teso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteso)
            Me.columnconta = New Global.System.Data.DataColumn("conta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconta)
            Me.columncodTipP = New Global.System.Data.DataColumn("codTipP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodTipP)
            Me.columntipoP = New Global.System.Data.DataColumn("tipoP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoP)
            Me.columncodPagD = New Global.System.Data.DataColumn("codPagD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPagD)
            Me.columnfecPago = New Global.System.Data.DataColumn("fecPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecPago)
            Me.columnpagoDet = New Global.System.Data.DataColumn("pagoDet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpagoDet)
            Me.columncodMon1 = New Global.System.Data.DataColumn("codMon1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon1)
            Me.columnmoneda1 = New Global.System.Data.DataColumn("moneda1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmoneda1)
            Me.columnsimbolo1 = New Global.System.Data.DataColumn("simbolo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo1)
            Me.columnmontoPago = New Global.System.Data.DataColumn("montoPago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoPago)
            Me.columnsoliEst = New Global.System.Data.DataColumn("soliEst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoliEst)
            Me.columngereEst = New Global.System.Data.DataColumn("gereEst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngereEst)
            Me.columntesoEst = New Global.System.Data.DataColumn("tesoEst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntesoEst)
            Me.columncontaEst = New Global.System.Data.DataColumn("contaEst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontaEst)
            Me.columnnroP = New Global.System.Data.DataColumn("nroP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroP)
            Me.columnclasif = New Global.System.Data.DataColumn("clasif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclasif)
            Me.columnmontoD = New Global.System.Data.DataColumn("montoD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoD)
            Me.columncodBan = New Global.System.Data.DataColumn("codBan", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodBan)
            Me.columnbancoPago = New Global.System.Data.DataColumn("bancoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbancoPago)
            Me.columnidOP.AllowDBNull = false
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 18
            Me.columncodMon.AllowDBNull = false
            Me.columnmoneda.MaxLength = 20
            Me.columnsimbolo.MaxLength = 10
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columnobra.MaxLength = 100
            Me.columncodIde.AllowDBNull = false
            Me.columnrazon.MaxLength = 60
            Me.columnruc.MaxLength = 11
            Me.columnfono.MaxLength = 30
            Me.columnemail.MaxLength = 30
            Me.columnbanco.MaxLength = 60
            Me.columnnroCta.MaxLength = 50
            Me.columnnroDet.MaxLength = 30
            Me.columndatoReq.MaxLength = 200
            Me.columnfaCheck.ReadOnly = true
            Me.columnfaCheck.MaxLength = 1
            Me.columnboCheck.ReadOnly = true
            Me.columnboCheck.MaxLength = 1
            Me.columnguCheck.ReadOnly = true
            Me.columnguCheck.MaxLength = 1
            Me.columnvoCheck.ReadOnly = true
            Me.columnvoCheck.MaxLength = 1
            Me.columnvoDCheck.ReadOnly = true
            Me.columnvoDCheck.MaxLength = 1
            Me.columnreCheck.ReadOnly = true
            Me.columnreCheck.MaxLength = 1
            Me.columndescOtro.MaxLength = 60
            Me.columnotCheck.ReadOnly = true
            Me.columnotCheck.MaxLength = 1
            Me.columnnroConfor.MaxLength = 30
            Me.columnfecEnt.MaxLength = 10
            Me.columnhist.MaxLength = 200
            Me.columnsoli.ReadOnly = true
            Me.columnsoli.MaxLength = 100
            Me.columngere.ReadOnly = true
            Me.columngere.MaxLength = 100
            Me.columnteso.ReadOnly = true
            Me.columnteso.MaxLength = 100
            Me.columnconta.ReadOnly = true
            Me.columnconta.MaxLength = 100
            Me.columntipoP.MaxLength = 100
            Me.columnpagoDet.MaxLength = 100
            Me.columnmoneda1.MaxLength = 20
            Me.columnsimbolo1.MaxLength = 10
            Me.columnsoliEst.ReadOnly = true
            Me.columnsoliEst.MaxLength = 100
            Me.columngereEst.ReadOnly = true
            Me.columngereEst.MaxLength = 100
            Me.columntesoEst.ReadOnly = true
            Me.columntesoEst.MaxLength = 100
            Me.columncontaEst.ReadOnly = true
            Me.columncontaEst.MaxLength = 100
            Me.columnnroP.MaxLength = 20
            Me.columnclasif.MaxLength = 20
            Me.columnbancoPago.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVOrdenDesembolsoImprimirRow() As VOrdenDesembolsoImprimirRow
            Return CType(Me.NewRow,VOrdenDesembolsoImprimirRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VOrdenDesembolsoImprimirRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VOrdenDesembolsoImprimirRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VOrdenDesembolsoImprimirRowChangedEvent) Is Nothing) Then
                RaiseEvent VOrdenDesembolsoImprimirRowChanged(Me, New VOrdenDesembolsoImprimirRowChangeEvent(CType(e.Row,VOrdenDesembolsoImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VOrdenDesembolsoImprimirRowChangingEvent) Is Nothing) Then
                RaiseEvent VOrdenDesembolsoImprimirRowChanging(Me, New VOrdenDesembolsoImprimirRowChangeEvent(CType(e.Row,VOrdenDesembolsoImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VOrdenDesembolsoImprimirRowDeletedEvent) Is Nothing) Then
                RaiseEvent VOrdenDesembolsoImprimirRowDeleted(Me, New VOrdenDesembolsoImprimirRowChangeEvent(CType(e.Row,VOrdenDesembolsoImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VOrdenDesembolsoImprimirRowDeletingEvent) Is Nothing) Then
                RaiseEvent VOrdenDesembolsoImprimirRowDeleting(Me, New VOrdenDesembolsoImprimirRowChangeEvent(CType(e.Row,VOrdenDesembolsoImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVOrdenDesembolsoImprimirRow(ByVal row As VOrdenDesembolsoImprimirRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VOrdenDesembolsoImprimirDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VKardexDataTable
        Inherits Global.System.Data.TypedTableBase(Of VKardexRow)
        
        Private columnnroNota As Global.System.Data.DataColumn
        
        Private columntipo As Global.System.Data.DataColumn
        
        Private columnfecha As Global.System.Data.DataColumn
        
        Private columnmaterial As Global.System.Data.DataColumn
        
        Private columncantEnt As Global.System.Data.DataColumn
        
        Private columnpreUniEnt As Global.System.Data.DataColumn
        
        Private columncantSal As Global.System.Data.DataColumn
        
        Private columnpreUniSal As Global.System.Data.DataColumn
        
        Private columnsaldo As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnnroGuia As Global.System.Data.DataColumn
        
        Private columnnroDoc As Global.System.Data.DataColumn
        
        Private columnotroDoc As Global.System.Data.DataColumn
        
        Private columnubicacion As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnnom As Global.System.Data.DataColumn
        
        Private columnobs As Global.System.Data.DataColumn
        
        Private columncodMat As Global.System.Data.DataColumn
        
        Private columnidMU As Global.System.Data.DataColumn
        
        Private columncodUbi As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columncodGuia As Global.System.Data.DataColumn
        
        Private columncodDoc As Global.System.Data.DataColumn
        
        Private columncodTrans As Global.System.Data.DataColumn
        
        Private columncodPers As Global.System.Data.DataColumn
        
        Private columncodSal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VKardex"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncantEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property preUniEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpreUniEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantSalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncantSal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property preUniSalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpreUniSal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property otroDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnotroDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ubicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnubicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idMUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidMU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codUbiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodUbi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codTransColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodTrans
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codSalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodSal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VKardexRow
            Get
                Return CType(Me.Rows(index),VKardexRow)
            End Get
        End Property
        
        Public Event VKardexRowChanging As VKardexRowChangeEventHandler
        
        Public Event VKardexRowChanged As VKardexRowChangeEventHandler
        
        Public Event VKardexRowDeleting As VKardexRowChangeEventHandler
        
        Public Event VKardexRowDeleted As VKardexRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVKardexRow(ByVal row As VKardexRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVKardexRow( _
                    ByVal nroNota As Integer,  _
                    ByVal tipo As String,  _
                    ByVal fecha As Date,  _
                    ByVal material As String,  _
                    ByVal cantEnt As Decimal,  _
                    ByVal preUniEnt As Decimal,  _
                    ByVal cantSal As Decimal,  _
                    ByVal preUniSal As Decimal,  _
                    ByVal saldo As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal nroGuia As String,  _
                    ByVal nroDoc As String,  _
                    ByVal otroDoc As String,  _
                    ByVal ubicacion As String,  _
                    ByVal nombre As String,  _
                    ByVal nom As String,  _
                    ByVal obs As String,  _
                    ByVal codMat As Integer,  _
                    ByVal idMU As Integer,  _
                    ByVal codUbi As Integer,  _
                    ByVal codigo As String,  _
                    ByVal codGuia As Integer,  _
                    ByVal codDoc As Integer,  _
                    ByVal codTrans As Integer,  _
                    ByVal codPers As Integer,  _
                    ByVal codSal As Integer) As VKardexRow
            Dim rowVKardexRow As VKardexRow = CType(Me.NewRow,VKardexRow)
            Dim columnValuesArray() As Object = New Object() {nroNota, tipo, fecha, material, cantEnt, preUniEnt, cantSal, preUniSal, saldo, unidad, nroGuia, nroDoc, otroDoc, ubicacion, nombre, nom, obs, codMat, idMU, codUbi, codigo, codGuia, codDoc, codTrans, codPers, codSal}
            rowVKardexRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVKardexRow)
            Return rowVKardexRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VKardexDataTable = CType(MyBase.Clone,VKardexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VKardexDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnroNota = MyBase.Columns("nroNota")
            Me.columntipo = MyBase.Columns("tipo")
            Me.columnfecha = MyBase.Columns("fecha")
            Me.columnmaterial = MyBase.Columns("material")
            Me.columncantEnt = MyBase.Columns("cantEnt")
            Me.columnpreUniEnt = MyBase.Columns("preUniEnt")
            Me.columncantSal = MyBase.Columns("cantSal")
            Me.columnpreUniSal = MyBase.Columns("preUniSal")
            Me.columnsaldo = MyBase.Columns("saldo")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnnroGuia = MyBase.Columns("nroGuia")
            Me.columnnroDoc = MyBase.Columns("nroDoc")
            Me.columnotroDoc = MyBase.Columns("otroDoc")
            Me.columnubicacion = MyBase.Columns("ubicacion")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnnom = MyBase.Columns("nom")
            Me.columnobs = MyBase.Columns("obs")
            Me.columncodMat = MyBase.Columns("codMat")
            Me.columnidMU = MyBase.Columns("idMU")
            Me.columncodUbi = MyBase.Columns("codUbi")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columncodGuia = MyBase.Columns("codGuia")
            Me.columncodDoc = MyBase.Columns("codDoc")
            Me.columncodTrans = MyBase.Columns("codTrans")
            Me.columncodPers = MyBase.Columns("codPers")
            Me.columncodSal = MyBase.Columns("codSal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnroNota = New Global.System.Data.DataColumn("nroNota", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroNota)
            Me.columntipo = New Global.System.Data.DataColumn("tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipo)
            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha)
            Me.columnmaterial = New Global.System.Data.DataColumn("material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaterial)
            Me.columncantEnt = New Global.System.Data.DataColumn("cantEnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantEnt)
            Me.columnpreUniEnt = New Global.System.Data.DataColumn("preUniEnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpreUniEnt)
            Me.columncantSal = New Global.System.Data.DataColumn("cantSal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantSal)
            Me.columnpreUniSal = New Global.System.Data.DataColumn("preUniSal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpreUniSal)
            Me.columnsaldo = New Global.System.Data.DataColumn("saldo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldo)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnnroGuia = New Global.System.Data.DataColumn("nroGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroGuia)
            Me.columnnroDoc = New Global.System.Data.DataColumn("nroDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroDoc)
            Me.columnotroDoc = New Global.System.Data.DataColumn("otroDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnotroDoc)
            Me.columnubicacion = New Global.System.Data.DataColumn("ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnubicacion)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnnom = New Global.System.Data.DataColumn("nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnom)
            Me.columnobs = New Global.System.Data.DataColumn("obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs)
            Me.columncodMat = New Global.System.Data.DataColumn("codMat", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMat)
            Me.columnidMU = New Global.System.Data.DataColumn("idMU", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidMU)
            Me.columncodUbi = New Global.System.Data.DataColumn("codUbi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodUbi)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columncodGuia = New Global.System.Data.DataColumn("codGuia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodGuia)
            Me.columncodDoc = New Global.System.Data.DataColumn("codDoc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDoc)
            Me.columncodTrans = New Global.System.Data.DataColumn("codTrans", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodTrans)
            Me.columncodPers = New Global.System.Data.DataColumn("codPers", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPers)
            Me.columncodSal = New Global.System.Data.DataColumn("codSal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodSal)
            Me.columnnroNota.AllowDBNull = false
            Me.columntipo.MaxLength = 30
            Me.columnmaterial.MaxLength = 100
            Me.columnunidad.MaxLength = 20
            Me.columnnroGuia.MaxLength = 30
            Me.columnnroDoc.MaxLength = 30
            Me.columnotroDoc.MaxLength = 30
            Me.columnubicacion.MaxLength = 50
            Me.columnnombre.MaxLength = 100
            Me.columnnom.ReadOnly = true
            Me.columnnom.MaxLength = 51
            Me.columnobs.MaxLength = 200
            Me.columncodMat.AllowDBNull = false
            Me.columncodUbi.AllowDBNull = false
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columncodTrans.AllowDBNull = false
            Me.columncodPers.AllowDBNull = false
            Me.columncodSal.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVKardexRow() As VKardexRow
            Return CType(Me.NewRow,VKardexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VKardexRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VKardexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VKardexRowChangedEvent) Is Nothing) Then
                RaiseEvent VKardexRowChanged(Me, New VKardexRowChangeEvent(CType(e.Row,VKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VKardexRowChangingEvent) Is Nothing) Then
                RaiseEvent VKardexRowChanging(Me, New VKardexRowChangeEvent(CType(e.Row,VKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VKardexRowDeletedEvent) Is Nothing) Then
                RaiseEvent VKardexRowDeleted(Me, New VKardexRowChangeEvent(CType(e.Row,VKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VKardexRowDeletingEvent) Is Nothing) Then
                RaiseEvent VKardexRowDeleting(Me, New VKardexRowChangeEvent(CType(e.Row,VKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVKardexRow(ByVal row As VKardexRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VKardexDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VOrdenDetOrdenDataTable
        Inherits Global.System.Data.TypedTableBase(Of VOrdenDetOrdenRow)
        
        Private columncodDetO As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnfecOrden As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnatiendeCom As Global.System.Data.DataColumn
        
        Private columncelAti As Global.System.Data.DataColumn
        
        Private columnfonos As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnnomRem As Global.System.Data.DataColumn
        
        Private columnfono As Global.System.Data.DataColumn
        
        Private columnemaRem As Global.System.Data.DataColumn
        
        Private columntransfe As Global.System.Data.DataColumn
        
        Private columnplazoEnt As Global.System.Data.DataColumn
        
        Private columnforma As Global.System.Data.DataColumn
        
        Private columnlugarEnt As Global.System.Data.DataColumn
        
        Private columnigv As Global.System.Data.DataColumn
        
        Private columncalIGV As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnlugar As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnnomAte As Global.System.Data.DataColumn
        
        Private columnobsFac As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnmaterial As Global.System.Data.DataColumn
        
        Private columnprecio As Global.System.Data.DataColumn
        
        Private columnsubTotal As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        Private columnmoneda As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnnroProf As Global.System.Data.DataColumn
        
        Private columntrans As Global.System.Data.DataColumn
        
        Private columnrucT As Global.System.Data.DataColumn
        
        Private columndirT As Global.System.Data.DataColumn
        
        Private columnfonoT As Global.System.Data.DataColumn
        
        Private columncontacto As Global.System.Data.DataColumn
        
        Private columnnota As Global.System.Data.DataColumn
        
        Private columncuentaBan As Global.System.Data.DataColumn
        
        Private columncuentaDet As Global.System.Data.DataColumn
        
        Private columndni As Global.System.Data.DataColumn
        
        Private columnfonoAte As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VOrdenDetOrden"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDetOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDetO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property atiendeComColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnatiendeCom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property celAtiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncelAti
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfonos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emaRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemaRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property plazoEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnplazoEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugarEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property igvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnigv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property calIGVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncalIGV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomAteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomAte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsFacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobsFac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroProfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroProf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrans
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrucT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dirTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonoTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfonoT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cuentaBanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncuentaBan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cuentaDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncuentaDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dniColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndni
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonoAteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfonoAte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VOrdenDetOrdenRow
            Get
                Return CType(Me.Rows(index),VOrdenDetOrdenRow)
            End Get
        End Property
        
        Public Event VOrdenDetOrdenRowChanging As VOrdenDetOrdenRowChangeEventHandler
        
        Public Event VOrdenDetOrdenRowChanged As VOrdenDetOrdenRowChangeEventHandler
        
        Public Event VOrdenDetOrdenRowDeleting As VOrdenDetOrdenRowChangeEventHandler
        
        Public Event VOrdenDetOrdenRowDeleted As VOrdenDetOrdenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVOrdenDetOrdenRow(ByVal row As VOrdenDetOrdenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVOrdenDetOrdenRow( _
                    ByVal codDetO As Integer,  _
                    ByVal nro As String,  _
                    ByVal fecOrden As Date,  _
                    ByVal razon As String,  _
                    ByVal ruc As String,  _
                    ByVal atiendeCom As String,  _
                    ByVal celAti As String,  _
                    ByVal fonos As String,  _
                    ByVal email As String,  _
                    ByVal nomRem As String,  _
                    ByVal fono As String,  _
                    ByVal emaRem As String,  _
                    ByVal transfe As String,  _
                    ByVal plazoEnt As String,  _
                    ByVal forma As String,  _
                    ByVal lugarEnt As String,  _
                    ByVal igv As Decimal,  _
                    ByVal calIGV As Integer,  _
                    ByVal codigo As String,  _
                    ByVal lugar As String,  _
                    ByVal nombre As String,  _
                    ByVal nomAte As String,  _
                    ByVal obsFac As String,  _
                    ByVal cant As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal material As String,  _
                    ByVal precio As Decimal,  _
                    ByVal subTotal As Decimal,  _
                    ByVal codMon As Integer,  _
                    ByVal moneda As String,  _
                    ByVal simbolo As String,  _
                    ByVal nroProf As String,  _
                    ByVal trans As String,  _
                    ByVal rucT As String,  _
                    ByVal dirT As String,  _
                    ByVal fonoT As String,  _
                    ByVal contacto As String,  _
                    ByVal nota As String,  _
                    ByVal cuentaBan As String,  _
                    ByVal cuentaDet As String,  _
                    ByVal dni As String,  _
                    ByVal fonoAte As String) As VOrdenDetOrdenRow
            Dim rowVOrdenDetOrdenRow As VOrdenDetOrdenRow = CType(Me.NewRow,VOrdenDetOrdenRow)
            Dim columnValuesArray() As Object = New Object() {codDetO, nro, fecOrden, razon, ruc, atiendeCom, celAti, fonos, email, nomRem, fono, emaRem, transfe, plazoEnt, forma, lugarEnt, igv, calIGV, codigo, lugar, nombre, nomAte, obsFac, cant, unidad, material, precio, subTotal, codMon, moneda, simbolo, nroProf, trans, rucT, dirT, fonoT, contacto, nota, cuentaBan, cuentaDet, dni, fonoAte}
            rowVOrdenDetOrdenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVOrdenDetOrdenRow)
            Return rowVOrdenDetOrdenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VOrdenDetOrdenDataTable = CType(MyBase.Clone,VOrdenDetOrdenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VOrdenDetOrdenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodDetO = MyBase.Columns("codDetO")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnfecOrden = MyBase.Columns("fecOrden")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnatiendeCom = MyBase.Columns("atiendeCom")
            Me.columncelAti = MyBase.Columns("celAti")
            Me.columnfonos = MyBase.Columns("fonos")
            Me.columnemail = MyBase.Columns("email")
            Me.columnnomRem = MyBase.Columns("nomRem")
            Me.columnfono = MyBase.Columns("fono")
            Me.columnemaRem = MyBase.Columns("emaRem")
            Me.columntransfe = MyBase.Columns("transfe")
            Me.columnplazoEnt = MyBase.Columns("plazoEnt")
            Me.columnforma = MyBase.Columns("forma")
            Me.columnlugarEnt = MyBase.Columns("lugarEnt")
            Me.columnigv = MyBase.Columns("igv")
            Me.columncalIGV = MyBase.Columns("calIGV")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnlugar = MyBase.Columns("lugar")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnnomAte = MyBase.Columns("nomAte")
            Me.columnobsFac = MyBase.Columns("obsFac")
            Me.columncant = MyBase.Columns("cant")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnmaterial = MyBase.Columns("material")
            Me.columnprecio = MyBase.Columns("precio")
            Me.columnsubTotal = MyBase.Columns("subTotal")
            Me.columncodMon = MyBase.Columns("codMon")
            Me.columnmoneda = MyBase.Columns("moneda")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnnroProf = MyBase.Columns("nroProf")
            Me.columntrans = MyBase.Columns("trans")
            Me.columnrucT = MyBase.Columns("rucT")
            Me.columndirT = MyBase.Columns("dirT")
            Me.columnfonoT = MyBase.Columns("fonoT")
            Me.columncontacto = MyBase.Columns("contacto")
            Me.columnnota = MyBase.Columns("nota")
            Me.columncuentaBan = MyBase.Columns("cuentaBan")
            Me.columncuentaDet = MyBase.Columns("cuentaDet")
            Me.columndni = MyBase.Columns("dni")
            Me.columnfonoAte = MyBase.Columns("fonoAte")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodDetO = New Global.System.Data.DataColumn("codDetO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDetO)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnfecOrden = New Global.System.Data.DataColumn("fecOrden", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecOrden)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnatiendeCom = New Global.System.Data.DataColumn("atiendeCom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnatiendeCom)
            Me.columncelAti = New Global.System.Data.DataColumn("celAti", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncelAti)
            Me.columnfonos = New Global.System.Data.DataColumn("fonos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfonos)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnnomRem = New Global.System.Data.DataColumn("nomRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomRem)
            Me.columnfono = New Global.System.Data.DataColumn("fono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfono)
            Me.columnemaRem = New Global.System.Data.DataColumn("emaRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemaRem)
            Me.columntransfe = New Global.System.Data.DataColumn("transfe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfe)
            Me.columnplazoEnt = New Global.System.Data.DataColumn("plazoEnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplazoEnt)
            Me.columnforma = New Global.System.Data.DataColumn("forma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnforma)
            Me.columnlugarEnt = New Global.System.Data.DataColumn("lugarEnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugarEnt)
            Me.columnigv = New Global.System.Data.DataColumn("igv", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnigv)
            Me.columncalIGV = New Global.System.Data.DataColumn("calIGV", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncalIGV)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnlugar = New Global.System.Data.DataColumn("lugar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugar)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnnomAte = New Global.System.Data.DataColumn("nomAte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomAte)
            Me.columnobsFac = New Global.System.Data.DataColumn("obsFac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobsFac)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnmaterial = New Global.System.Data.DataColumn("material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaterial)
            Me.columnprecio = New Global.System.Data.DataColumn("precio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio)
            Me.columnsubTotal = New Global.System.Data.DataColumn("subTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubTotal)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
            Me.columnmoneda = New Global.System.Data.DataColumn("moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmoneda)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnnroProf = New Global.System.Data.DataColumn("nroProf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroProf)
            Me.columntrans = New Global.System.Data.DataColumn("trans", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrans)
            Me.columnrucT = New Global.System.Data.DataColumn("rucT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrucT)
            Me.columndirT = New Global.System.Data.DataColumn("dirT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirT)
            Me.columnfonoT = New Global.System.Data.DataColumn("fonoT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfonoT)
            Me.columncontacto = New Global.System.Data.DataColumn("contacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontacto)
            Me.columnnota = New Global.System.Data.DataColumn("nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnota)
            Me.columncuentaBan = New Global.System.Data.DataColumn("cuentaBan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncuentaBan)
            Me.columncuentaDet = New Global.System.Data.DataColumn("cuentaDet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncuentaDet)
            Me.columndni = New Global.System.Data.DataColumn("dni", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndni)
            Me.columnfonoAte = New Global.System.Data.DataColumn("fonoAte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfonoAte)
            Me.columncodDetO.AllowDBNull = false
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 13
            Me.columnrazon.MaxLength = 60
            Me.columnruc.MaxLength = 11
            Me.columnatiendeCom.MaxLength = 50
            Me.columncelAti.MaxLength = 50
            Me.columnfonos.ReadOnly = true
            Me.columnfonos.MaxLength = 61
            Me.columnemail.MaxLength = 30
            Me.columnnomRem.ReadOnly = true
            Me.columnnomRem.MaxLength = 51
            Me.columnfono.MaxLength = 60
            Me.columnemaRem.MaxLength = 100
            Me.columntransfe.MaxLength = 100
            Me.columnplazoEnt.MaxLength = 40
            Me.columnforma.MaxLength = 60
            Me.columnlugarEnt.MaxLength = 100
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columnlugar.MaxLength = 100
            Me.columnnombre.MaxLength = 100
            Me.columnnomAte.ReadOnly = true
            Me.columnnomAte.MaxLength = 51
            Me.columnobsFac.MaxLength = 200
            Me.columnunidad.MaxLength = 20
            Me.columnmaterial.MaxLength = 100
            Me.columncodMon.AllowDBNull = false
            Me.columnmoneda.MaxLength = 20
            Me.columnsimbolo.MaxLength = 10
            Me.columnnroProf.MaxLength = 40
            Me.columntrans.MaxLength = 60
            Me.columnrucT.MaxLength = 11
            Me.columndirT.MaxLength = 120
            Me.columnfonoT.MaxLength = 60
            Me.columncontacto.MaxLength = 60
            Me.columnnota.MaxLength = 200
            Me.columncuentaBan.MaxLength = 60
            Me.columncuentaDet.MaxLength = 60
            Me.columndni.MaxLength = 8
            Me.columnfonoAte.MaxLength = 60
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVOrdenDetOrdenRow() As VOrdenDetOrdenRow
            Return CType(Me.NewRow,VOrdenDetOrdenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VOrdenDetOrdenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VOrdenDetOrdenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VOrdenDetOrdenRowChangedEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowChanged(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VOrdenDetOrdenRowChangingEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowChanging(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VOrdenDetOrdenRowDeletedEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowDeleted(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VOrdenDetOrdenRowDeletingEvent) Is Nothing) Then
                RaiseEvent VOrdenDetOrdenRowDeleting(Me, New VOrdenDetOrdenRowChangeEvent(CType(e.Row,VOrdenDetOrdenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVOrdenDetOrdenRow(ByVal row As VOrdenDetOrdenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VOrdenDetOrdenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VGuiaDetGuiaEDataTable
        Inherits Global.System.Data.TypedTableBase(Of VGuiaDetGuiaERow)
        
        Private columncodGuiaE As Global.System.Data.DataColumn
        
        Private columnnroGuia As Global.System.Data.DataColumn
        
        Private columnfecIni As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnalmOri As Global.System.Data.DataColumn
        
        Private columnpartida As Global.System.Data.DataColumn
        
        Private columnalmDes As Global.System.Data.DataColumn
        
        Private columnllegada As Global.System.Data.DataColumn
        
        Private columnempresa As Global.System.Data.DataColumn
        
        Private columnrucEmp As Global.System.Data.DataColumn
        
        Private columnmarcaNro As Global.System.Data.DataColumn
        
        Private columnnroConst As Global.System.Data.DataColumn
        
        Private columnnroLic As Global.System.Data.DataColumn
        
        Private columnmotivo As Global.System.Data.DataColumn
        
        Private columnnroFact As Global.System.Data.DataColumn
        
        Private columnobs As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columndescrip As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnpeso As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VGuiaDetGuiaE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codGuiaEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodGuiaE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecIniColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecIni
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property almOriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalmOri
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property partidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property almDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalmDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property llegadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnllegada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property empresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnempresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucEmpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrucEmp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property marcaNroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmarcaNro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroConstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroConst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroLicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroLic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroFactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VGuiaDetGuiaERow
            Get
                Return CType(Me.Rows(index),VGuiaDetGuiaERow)
            End Get
        End Property
        
        Public Event VGuiaDetGuiaERowChanging As VGuiaDetGuiaERowChangeEventHandler
        
        Public Event VGuiaDetGuiaERowChanged As VGuiaDetGuiaERowChangeEventHandler
        
        Public Event VGuiaDetGuiaERowDeleting As VGuiaDetGuiaERowChangeEventHandler
        
        Public Event VGuiaDetGuiaERowDeleted As VGuiaDetGuiaERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVGuiaDetGuiaERow(ByVal row As VGuiaDetGuiaERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVGuiaDetGuiaERow( _
                    ByVal codGuiaE As Integer,  _
                    ByVal nroGuia As String,  _
                    ByVal fecIni As Date,  _
                    ByVal razon As String,  _
                    ByVal ruc As String,  _
                    ByVal almOri As String,  _
                    ByVal partida As String,  _
                    ByVal almDes As String,  _
                    ByVal llegada As String,  _
                    ByVal empresa As String,  _
                    ByVal rucEmp As String,  _
                    ByVal marcaNro As String,  _
                    ByVal nroConst As String,  _
                    ByVal nroLic As String,  _
                    ByVal motivo As String,  _
                    ByVal nroFact As String,  _
                    ByVal obs As String,  _
                    ByVal codigo As String,  _
                    ByVal cant As Decimal,  _
                    ByVal descrip As String,  _
                    ByVal unidad As String,  _
                    ByVal peso As Decimal) As VGuiaDetGuiaERow
            Dim rowVGuiaDetGuiaERow As VGuiaDetGuiaERow = CType(Me.NewRow,VGuiaDetGuiaERow)
            Dim columnValuesArray() As Object = New Object() {codGuiaE, nroGuia, fecIni, razon, ruc, almOri, partida, almDes, llegada, empresa, rucEmp, marcaNro, nroConst, nroLic, motivo, nroFact, obs, codigo, cant, descrip, unidad, peso}
            rowVGuiaDetGuiaERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVGuiaDetGuiaERow)
            Return rowVGuiaDetGuiaERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VGuiaDetGuiaEDataTable = CType(MyBase.Clone,VGuiaDetGuiaEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VGuiaDetGuiaEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodGuiaE = MyBase.Columns("codGuiaE")
            Me.columnnroGuia = MyBase.Columns("nroGuia")
            Me.columnfecIni = MyBase.Columns("fecIni")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnalmOri = MyBase.Columns("almOri")
            Me.columnpartida = MyBase.Columns("partida")
            Me.columnalmDes = MyBase.Columns("almDes")
            Me.columnllegada = MyBase.Columns("llegada")
            Me.columnempresa = MyBase.Columns("empresa")
            Me.columnrucEmp = MyBase.Columns("rucEmp")
            Me.columnmarcaNro = MyBase.Columns("marcaNro")
            Me.columnnroConst = MyBase.Columns("nroConst")
            Me.columnnroLic = MyBase.Columns("nroLic")
            Me.columnmotivo = MyBase.Columns("motivo")
            Me.columnnroFact = MyBase.Columns("nroFact")
            Me.columnobs = MyBase.Columns("obs")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columncant = MyBase.Columns("cant")
            Me.columndescrip = MyBase.Columns("descrip")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnpeso = MyBase.Columns("peso")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodGuiaE = New Global.System.Data.DataColumn("codGuiaE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodGuiaE)
            Me.columnnroGuia = New Global.System.Data.DataColumn("nroGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroGuia)
            Me.columnfecIni = New Global.System.Data.DataColumn("fecIni", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecIni)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnalmOri = New Global.System.Data.DataColumn("almOri", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalmOri)
            Me.columnpartida = New Global.System.Data.DataColumn("partida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartida)
            Me.columnalmDes = New Global.System.Data.DataColumn("almDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalmDes)
            Me.columnllegada = New Global.System.Data.DataColumn("llegada", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnllegada)
            Me.columnempresa = New Global.System.Data.DataColumn("empresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempresa)
            Me.columnrucEmp = New Global.System.Data.DataColumn("rucEmp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrucEmp)
            Me.columnmarcaNro = New Global.System.Data.DataColumn("marcaNro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmarcaNro)
            Me.columnnroConst = New Global.System.Data.DataColumn("nroConst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroConst)
            Me.columnnroLic = New Global.System.Data.DataColumn("nroLic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroLic)
            Me.columnmotivo = New Global.System.Data.DataColumn("motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmotivo)
            Me.columnnroFact = New Global.System.Data.DataColumn("nroFact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroFact)
            Me.columnobs = New Global.System.Data.DataColumn("obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columndescrip = New Global.System.Data.DataColumn("descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescrip)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnpeso = New Global.System.Data.DataColumn("peso", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeso)
            Me.columncodGuiaE.AllowDBNull = false
            Me.columnnroGuia.ReadOnly = true
            Me.columnnroGuia.MaxLength = 18
            Me.columnrazon.MaxLength = 60
            Me.columnruc.MaxLength = 11
            Me.columnalmOri.MaxLength = 50
            Me.columnpartida.MaxLength = 100
            Me.columnalmDes.MaxLength = 50
            Me.columnllegada.MaxLength = 100
            Me.columnempresa.MaxLength = 60
            Me.columnrucEmp.MaxLength = 11
            Me.columnmarcaNro.MaxLength = 40
            Me.columnnroConst.MaxLength = 40
            Me.columnnroLic.MaxLength = 30
            Me.columnmotivo.MaxLength = 40
            Me.columnnroFact.MaxLength = 30
            Me.columnobs.MaxLength = 200
            Me.columncodigo.MaxLength = 20
            Me.columndescrip.ReadOnly = true
            Me.columndescrip.MaxLength = 402
            Me.columnunidad.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVGuiaDetGuiaERow() As VGuiaDetGuiaERow
            Return CType(Me.NewRow,VGuiaDetGuiaERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VGuiaDetGuiaERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VGuiaDetGuiaERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VGuiaDetGuiaERowChangedEvent) Is Nothing) Then
                RaiseEvent VGuiaDetGuiaERowChanged(Me, New VGuiaDetGuiaERowChangeEvent(CType(e.Row,VGuiaDetGuiaERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VGuiaDetGuiaERowChangingEvent) Is Nothing) Then
                RaiseEvent VGuiaDetGuiaERowChanging(Me, New VGuiaDetGuiaERowChangeEvent(CType(e.Row,VGuiaDetGuiaERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VGuiaDetGuiaERowDeletedEvent) Is Nothing) Then
                RaiseEvent VGuiaDetGuiaERowDeleted(Me, New VGuiaDetGuiaERowChangeEvent(CType(e.Row,VGuiaDetGuiaERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VGuiaDetGuiaERowDeletingEvent) Is Nothing) Then
                RaiseEvent VGuiaDetGuiaERowDeleting(Me, New VGuiaDetGuiaERowChangeEvent(CType(e.Row,VGuiaDetGuiaERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVGuiaDetGuiaERow(ByVal row As VGuiaDetGuiaERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VGuiaDetGuiaEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VCotDetCotDataTable
        Inherits Global.System.Data.TypedTableBase(Of VCotDetCotRow)
        
        Private columncodDetC As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnfecCot As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnatencion As Global.System.Data.DataColumn
        
        Private columncelRpm As Global.System.Data.DataColumn
        
        Private columnfonos As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnnomRem As Global.System.Data.DataColumn
        
        Private columnfono As Global.System.Data.DataColumn
        
        Private columnemaRem As Global.System.Data.DataColumn
        
        Private columntiempoVig As Global.System.Data.DataColumn
        
        Private columnplazo As Global.System.Data.DataColumn
        
        Private columnforma As Global.System.Data.DataColumn
        
        Private columnlugarEnt As Global.System.Data.DataColumn
        
        Private columnincluir As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnlugar As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnnomSol As Global.System.Data.DataColumn
        
        Private columnobs As Global.System.Data.DataColumn
        
        Private columncodGruC As Global.System.Data.DataColumn
        
        Private columndescrip As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnmaterial As Global.System.Data.DataColumn
        
        Private columnprecio As Global.System.Data.DataColumn
        
        Private columnsubTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VCotDetCot"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDetCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDetC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecCotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecCot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property atencionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnatencion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property celRpmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncelRpm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfonos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emaRemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemaRem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tiempoVigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntiempoVig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property plazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnplazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugarEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property incluirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnincluir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codGruCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodGruC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VCotDetCotRow
            Get
                Return CType(Me.Rows(index),VCotDetCotRow)
            End Get
        End Property
        
        Public Event VCotDetCotRowChanging As VCotDetCotRowChangeEventHandler
        
        Public Event VCotDetCotRowChanged As VCotDetCotRowChangeEventHandler
        
        Public Event VCotDetCotRowDeleting As VCotDetCotRowChangeEventHandler
        
        Public Event VCotDetCotRowDeleted As VCotDetCotRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVCotDetCotRow(ByVal row As VCotDetCotRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVCotDetCotRow( _
                    ByVal codDetC As Integer,  _
                    ByVal nro As String,  _
                    ByVal fecCot As Date,  _
                    ByVal razon As String,  _
                    ByVal ruc As String,  _
                    ByVal atencion As String,  _
                    ByVal celRpm As String,  _
                    ByVal fonos As String,  _
                    ByVal email As String,  _
                    ByVal nomRem As String,  _
                    ByVal fono As String,  _
                    ByVal emaRem As String,  _
                    ByVal tiempoVig As String,  _
                    ByVal plazo As String,  _
                    ByVal forma As String,  _
                    ByVal lugarEnt As String,  _
                    ByVal incluir As String,  _
                    ByVal codigo As String,  _
                    ByVal lugar As String,  _
                    ByVal nombre As String,  _
                    ByVal nomSol As String,  _
                    ByVal obs As String,  _
                    ByVal codGruC As Integer,  _
                    ByVal descrip As String,  _
                    ByVal cant As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal material As String,  _
                    ByVal precio As Decimal,  _
                    ByVal subTotal As Decimal) As VCotDetCotRow
            Dim rowVCotDetCotRow As VCotDetCotRow = CType(Me.NewRow,VCotDetCotRow)
            Dim columnValuesArray() As Object = New Object() {codDetC, nro, fecCot, razon, ruc, atencion, celRpm, fonos, email, nomRem, fono, emaRem, tiempoVig, plazo, forma, lugarEnt, incluir, codigo, lugar, nombre, nomSol, obs, codGruC, descrip, cant, unidad, material, precio, subTotal}
            rowVCotDetCotRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVCotDetCotRow)
            Return rowVCotDetCotRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VCotDetCotDataTable = CType(MyBase.Clone,VCotDetCotDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VCotDetCotDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodDetC = MyBase.Columns("codDetC")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnfecCot = MyBase.Columns("fecCot")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnatencion = MyBase.Columns("atencion")
            Me.columncelRpm = MyBase.Columns("celRpm")
            Me.columnfonos = MyBase.Columns("fonos")
            Me.columnemail = MyBase.Columns("email")
            Me.columnnomRem = MyBase.Columns("nomRem")
            Me.columnfono = MyBase.Columns("fono")
            Me.columnemaRem = MyBase.Columns("emaRem")
            Me.columntiempoVig = MyBase.Columns("tiempoVig")
            Me.columnplazo = MyBase.Columns("plazo")
            Me.columnforma = MyBase.Columns("forma")
            Me.columnlugarEnt = MyBase.Columns("lugarEnt")
            Me.columnincluir = MyBase.Columns("incluir")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnlugar = MyBase.Columns("lugar")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnnomSol = MyBase.Columns("nomSol")
            Me.columnobs = MyBase.Columns("obs")
            Me.columncodGruC = MyBase.Columns("codGruC")
            Me.columndescrip = MyBase.Columns("descrip")
            Me.columncant = MyBase.Columns("cant")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnmaterial = MyBase.Columns("material")
            Me.columnprecio = MyBase.Columns("precio")
            Me.columnsubTotal = MyBase.Columns("subTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodDetC = New Global.System.Data.DataColumn("codDetC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDetC)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnfecCot = New Global.System.Data.DataColumn("fecCot", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecCot)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnatencion = New Global.System.Data.DataColumn("atencion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnatencion)
            Me.columncelRpm = New Global.System.Data.DataColumn("celRpm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncelRpm)
            Me.columnfonos = New Global.System.Data.DataColumn("fonos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfonos)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnnomRem = New Global.System.Data.DataColumn("nomRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomRem)
            Me.columnfono = New Global.System.Data.DataColumn("fono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfono)
            Me.columnemaRem = New Global.System.Data.DataColumn("emaRem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemaRem)
            Me.columntiempoVig = New Global.System.Data.DataColumn("tiempoVig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntiempoVig)
            Me.columnplazo = New Global.System.Data.DataColumn("plazo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplazo)
            Me.columnforma = New Global.System.Data.DataColumn("forma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnforma)
            Me.columnlugarEnt = New Global.System.Data.DataColumn("lugarEnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugarEnt)
            Me.columnincluir = New Global.System.Data.DataColumn("incluir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnincluir)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnlugar = New Global.System.Data.DataColumn("lugar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugar)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnnomSol = New Global.System.Data.DataColumn("nomSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomSol)
            Me.columnobs = New Global.System.Data.DataColumn("obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs)
            Me.columncodGruC = New Global.System.Data.DataColumn("codGruC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodGruC)
            Me.columndescrip = New Global.System.Data.DataColumn("descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescrip)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnmaterial = New Global.System.Data.DataColumn("material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaterial)
            Me.columnprecio = New Global.System.Data.DataColumn("precio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio)
            Me.columnsubTotal = New Global.System.Data.DataColumn("subTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubTotal)
            Me.columncodDetC.AllowDBNull = false
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 13
            Me.columnrazon.MaxLength = 60
            Me.columnruc.MaxLength = 11
            Me.columnatencion.MaxLength = 40
            Me.columncelRpm.MaxLength = 50
            Me.columnfonos.ReadOnly = true
            Me.columnfonos.MaxLength = 61
            Me.columnemail.MaxLength = 30
            Me.columnnomRem.ReadOnly = true
            Me.columnnomRem.MaxLength = 51
            Me.columnfono.MaxLength = 60
            Me.columnemaRem.MaxLength = 100
            Me.columntiempoVig.MaxLength = 20
            Me.columnplazo.MaxLength = 40
            Me.columnforma.MaxLength = 60
            Me.columnlugarEnt.MaxLength = 100
            Me.columnincluir.MaxLength = 100
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columnlugar.MaxLength = 100
            Me.columnnombre.MaxLength = 100
            Me.columnnomSol.ReadOnly = true
            Me.columnnomSol.MaxLength = 51
            Me.columnobs.MaxLength = 200
            Me.columncodGruC.AllowDBNull = false
            Me.columndescrip.MaxLength = 40
            Me.columnunidad.MaxLength = 20
            Me.columnmaterial.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVCotDetCotRow() As VCotDetCotRow
            Return CType(Me.NewRow,VCotDetCotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VCotDetCotRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VCotDetCotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VCotDetCotRowChangedEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowChanged(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VCotDetCotRowChangingEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowChanging(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VCotDetCotRowDeletedEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowDeleted(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VCotDetCotRowDeletingEvent) Is Nothing) Then
                RaiseEvent VCotDetCotRowDeleting(Me, New VCotDetCotRowChangeEvent(CType(e.Row,VCotDetCotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVCotDetCotRow(ByVal row As VCotDetCotRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VCotDetCotDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VDetSolCajaImprimirDataTable
        Inherits Global.System.Data.TypedTableBase(Of VDetSolCajaImprimirRow)
        
        Private columncodDetSol As Global.System.Data.DataColumn
        
        Private columncodSC As Global.System.Data.DataColumn
        
        Private columnnomSede As Global.System.Data.DataColumn
        
        Private columnnomObra As Global.System.Data.DataColumn
        
        Private columnnomSol As Global.System.Data.DataColumn
        
        Private columnfechaSol As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnmontoSol As Global.System.Data.DataColumn
        
        Private columnimprevisto As Global.System.Data.DataColumn
        
        Private columnsalAnt As Global.System.Data.DataColumn
        
        Private columncant1 As Global.System.Data.DataColumn
        
        Private columnuniMed As Global.System.Data.DataColumn
        
        Private columninsumo As Global.System.Data.DataColumn
        
        Private columnprec1 As Global.System.Data.DataColumn
        
        Private columntotPar As Global.System.Data.DataColumn
        
        Private columncomp As Global.System.Data.DataColumn
        
        Private columnobsSol As Global.System.Data.DataColumn
        
        Private columnestApro As Global.System.Data.DataColumn
        
        Private columnobsApro As Global.System.Data.DataColumn
        
        Private columnareaM As Global.System.Data.DataColumn
        
        Private columntipoM As Global.System.Data.DataColumn
        
        Private columningre As Global.System.Data.DataColumn
        
        Private columncodAreaM As Global.System.Data.DataColumn
        
        Private columncodTipM As Global.System.Data.DataColumn
        
        Private columncodMat As Global.System.Data.DataColumn
        
        Private columncompCheck As Global.System.Data.DataColumn
        
        Private columnestSol As Global.System.Data.DataColumn
        
        Private columningreso As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VDetSolCajaImprimir"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDetSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDetSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codSCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodSC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomSedeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomSede
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomObraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomObra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imprevistoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimprevisto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property salAntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalAnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cant1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncant1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uniMedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuniMed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property insumoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninsumo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prec1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprec1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totParColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotPar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobsSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estAproColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestApro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsAproColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobsApro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property areaMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnareaM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ingreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columningre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codAreaMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodAreaM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codTipMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodTipM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ingresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columningreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDetSolCajaImprimirRow
            Get
                Return CType(Me.Rows(index),VDetSolCajaImprimirRow)
            End Get
        End Property
        
        Public Event VDetSolCajaImprimirRowChanging As VDetSolCajaImprimirRowChangeEventHandler
        
        Public Event VDetSolCajaImprimirRowChanged As VDetSolCajaImprimirRowChangeEventHandler
        
        Public Event VDetSolCajaImprimirRowDeleting As VDetSolCajaImprimirRowChangeEventHandler
        
        Public Event VDetSolCajaImprimirRowDeleted As VDetSolCajaImprimirRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVDetSolCajaImprimirRow(ByVal row As VDetSolCajaImprimirRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVDetSolCajaImprimirRow( _
                    ByVal codDetSol As Integer,  _
                    ByVal codSC As Integer,  _
                    ByVal nomSede As String,  _
                    ByVal nomObra As String,  _
                    ByVal nomSol As String,  _
                    ByVal fechaSol As Date,  _
                    ByVal nro As String,  _
                    ByVal montoSol As Decimal,  _
                    ByVal imprevisto As Decimal,  _
                    ByVal salAnt As Decimal,  _
                    ByVal cant1 As Decimal,  _
                    ByVal uniMed As String,  _
                    ByVal insumo As String,  _
                    ByVal prec1 As Decimal,  _
                    ByVal totPar As Decimal,  _
                    ByVal comp As String,  _
                    ByVal obsSol As String,  _
                    ByVal estApro As String,  _
                    ByVal obsApro As String,  _
                    ByVal areaM As String,  _
                    ByVal tipoM As String,  _
                    ByVal ingre As String,  _
                    ByVal codAreaM As Integer,  _
                    ByVal codTipM As Integer,  _
                    ByVal codMat As Integer,  _
                    ByVal compCheck As Integer,  _
                    ByVal estSol As Integer,  _
                    ByVal ingreso As Integer) As VDetSolCajaImprimirRow
            Dim rowVDetSolCajaImprimirRow As VDetSolCajaImprimirRow = CType(Me.NewRow,VDetSolCajaImprimirRow)
            Dim columnValuesArray() As Object = New Object() {codDetSol, codSC, nomSede, nomObra, nomSol, fechaSol, nro, montoSol, imprevisto, salAnt, cant1, uniMed, insumo, prec1, totPar, comp, obsSol, estApro, obsApro, areaM, tipoM, ingre, codAreaM, codTipM, codMat, compCheck, estSol, ingreso}
            rowVDetSolCajaImprimirRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVDetSolCajaImprimirRow)
            Return rowVDetSolCajaImprimirRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VDetSolCajaImprimirDataTable = CType(MyBase.Clone,VDetSolCajaImprimirDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VDetSolCajaImprimirDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodDetSol = MyBase.Columns("codDetSol")
            Me.columncodSC = MyBase.Columns("codSC")
            Me.columnnomSede = MyBase.Columns("nomSede")
            Me.columnnomObra = MyBase.Columns("nomObra")
            Me.columnnomSol = MyBase.Columns("nomSol")
            Me.columnfechaSol = MyBase.Columns("fechaSol")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnmontoSol = MyBase.Columns("montoSol")
            Me.columnimprevisto = MyBase.Columns("imprevisto")
            Me.columnsalAnt = MyBase.Columns("salAnt")
            Me.columncant1 = MyBase.Columns("cant1")
            Me.columnuniMed = MyBase.Columns("uniMed")
            Me.columninsumo = MyBase.Columns("insumo")
            Me.columnprec1 = MyBase.Columns("prec1")
            Me.columntotPar = MyBase.Columns("totPar")
            Me.columncomp = MyBase.Columns("comp")
            Me.columnobsSol = MyBase.Columns("obsSol")
            Me.columnestApro = MyBase.Columns("estApro")
            Me.columnobsApro = MyBase.Columns("obsApro")
            Me.columnareaM = MyBase.Columns("areaM")
            Me.columntipoM = MyBase.Columns("tipoM")
            Me.columningre = MyBase.Columns("ingre")
            Me.columncodAreaM = MyBase.Columns("codAreaM")
            Me.columncodTipM = MyBase.Columns("codTipM")
            Me.columncodMat = MyBase.Columns("codMat")
            Me.columncompCheck = MyBase.Columns("compCheck")
            Me.columnestSol = MyBase.Columns("estSol")
            Me.columningreso = MyBase.Columns("ingreso")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodDetSol = New Global.System.Data.DataColumn("codDetSol", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDetSol)
            Me.columncodSC = New Global.System.Data.DataColumn("codSC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodSC)
            Me.columnnomSede = New Global.System.Data.DataColumn("nomSede", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomSede)
            Me.columnnomObra = New Global.System.Data.DataColumn("nomObra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomObra)
            Me.columnnomSol = New Global.System.Data.DataColumn("nomSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomSol)
            Me.columnfechaSol = New Global.System.Data.DataColumn("fechaSol", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaSol)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnmontoSol = New Global.System.Data.DataColumn("montoSol", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoSol)
            Me.columnimprevisto = New Global.System.Data.DataColumn("imprevisto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimprevisto)
            Me.columnsalAnt = New Global.System.Data.DataColumn("salAnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalAnt)
            Me.columncant1 = New Global.System.Data.DataColumn("cant1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant1)
            Me.columnuniMed = New Global.System.Data.DataColumn("uniMed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuniMed)
            Me.columninsumo = New Global.System.Data.DataColumn("insumo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninsumo)
            Me.columnprec1 = New Global.System.Data.DataColumn("prec1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprec1)
            Me.columntotPar = New Global.System.Data.DataColumn("totPar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotPar)
            Me.columncomp = New Global.System.Data.DataColumn("comp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomp)
            Me.columnobsSol = New Global.System.Data.DataColumn("obsSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobsSol)
            Me.columnestApro = New Global.System.Data.DataColumn("estApro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestApro)
            Me.columnobsApro = New Global.System.Data.DataColumn("obsApro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobsApro)
            Me.columnareaM = New Global.System.Data.DataColumn("areaM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnareaM)
            Me.columntipoM = New Global.System.Data.DataColumn("tipoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoM)
            Me.columningre = New Global.System.Data.DataColumn("ingre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columningre)
            Me.columncodAreaM = New Global.System.Data.DataColumn("codAreaM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodAreaM)
            Me.columncodTipM = New Global.System.Data.DataColumn("codTipM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodTipM)
            Me.columncodMat = New Global.System.Data.DataColumn("codMat", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMat)
            Me.columncompCheck = New Global.System.Data.DataColumn("compCheck", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompCheck)
            Me.columnestSol = New Global.System.Data.DataColumn("estSol", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestSol)
            Me.columningreso = New Global.System.Data.DataColumn("ingreso", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columningreso)
            Me.columncodDetSol.AllowDBNull = false
            Me.columncodSC.AllowDBNull = false
            Me.columnnomSede.MaxLength = 100
            Me.columnnomObra.MaxLength = 100
            Me.columnnomSol.ReadOnly = true
            Me.columnnomSol.MaxLength = 51
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 12
            Me.columnuniMed.MaxLength = 20
            Me.columninsumo.MaxLength = 200
            Me.columntotPar.ReadOnly = true
            Me.columncomp.ReadOnly = true
            Me.columncomp.MaxLength = 10
            Me.columnobsSol.MaxLength = 200
            Me.columnestApro.ReadOnly = true
            Me.columnestApro.MaxLength = 9
            Me.columnobsApro.MaxLength = 200
            Me.columnareaM.MaxLength = 40
            Me.columntipoM.MaxLength = 40
            Me.columningre.ReadOnly = true
            Me.columningre.MaxLength = 10
            Me.columncodAreaM.AllowDBNull = false
            Me.columncodTipM.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVDetSolCajaImprimirRow() As VDetSolCajaImprimirRow
            Return CType(Me.NewRow,VDetSolCajaImprimirRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VDetSolCajaImprimirRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VDetSolCajaImprimirRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDetSolCajaImprimirRowChangedEvent) Is Nothing) Then
                RaiseEvent VDetSolCajaImprimirRowChanged(Me, New VDetSolCajaImprimirRowChangeEvent(CType(e.Row,VDetSolCajaImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDetSolCajaImprimirRowChangingEvent) Is Nothing) Then
                RaiseEvent VDetSolCajaImprimirRowChanging(Me, New VDetSolCajaImprimirRowChangeEvent(CType(e.Row,VDetSolCajaImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDetSolCajaImprimirRowDeletedEvent) Is Nothing) Then
                RaiseEvent VDetSolCajaImprimirRowDeleted(Me, New VDetSolCajaImprimirRowChangeEvent(CType(e.Row,VDetSolCajaImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDetSolCajaImprimirRowDeletingEvent) Is Nothing) Then
                RaiseEvent VDetSolCajaImprimirRowDeleting(Me, New VDetSolCajaImprimirRowChangeEvent(CType(e.Row,VDetSolCajaImprimirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVDetSolCajaImprimirRow(ByVal row As VDetSolCajaImprimirRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VDetSolCajaImprimirDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vStockAlmacen1DataTable
        Inherits Global.System.Data.TypedTableBase(Of vStockAlmacen1Row)
        
        Private columnmaterial As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columntipoM As Global.System.Data.DataColumn
        
        Private columnstock As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vStockAlmacen1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vStockAlmacen1Row
            Get
                Return CType(Me.Rows(index),vStockAlmacen1Row)
            End Get
        End Property
        
        Public Event vStockAlmacen1RowChanging As vStockAlmacen1RowChangeEventHandler
        
        Public Event vStockAlmacen1RowChanged As vStockAlmacen1RowChangeEventHandler
        
        Public Event vStockAlmacen1RowDeleting As vStockAlmacen1RowChangeEventHandler
        
        Public Event vStockAlmacen1RowDeleted As vStockAlmacen1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvStockAlmacen1Row(ByVal row As vStockAlmacen1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvStockAlmacen1Row(ByVal material As String, ByVal unidad As String, ByVal tipoM As String, ByVal stock As Decimal) As vStockAlmacen1Row
            Dim rowvStockAlmacen1Row As vStockAlmacen1Row = CType(Me.NewRow,vStockAlmacen1Row)
            Dim columnValuesArray() As Object = New Object() {material, unidad, tipoM, stock}
            rowvStockAlmacen1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowvStockAlmacen1Row)
            Return rowvStockAlmacen1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As vStockAlmacen1DataTable = CType(MyBase.Clone,vStockAlmacen1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New vStockAlmacen1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmaterial = MyBase.Columns("material")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columntipoM = MyBase.Columns("tipoM")
            Me.columnstock = MyBase.Columns("stock")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmaterial = New Global.System.Data.DataColumn("material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaterial)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columntipoM = New Global.System.Data.DataColumn("tipoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoM)
            Me.columnstock = New Global.System.Data.DataColumn("stock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstock)
            Me.columnmaterial.MaxLength = 100
            Me.columnunidad.MaxLength = 20
            Me.columntipoM.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvStockAlmacen1Row() As vStockAlmacen1Row
            Return CType(Me.NewRow,vStockAlmacen1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New vStockAlmacen1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(vStockAlmacen1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vStockAlmacen1RowChangedEvent) Is Nothing) Then
                RaiseEvent vStockAlmacen1RowChanged(Me, New vStockAlmacen1RowChangeEvent(CType(e.Row,vStockAlmacen1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vStockAlmacen1RowChangingEvent) Is Nothing) Then
                RaiseEvent vStockAlmacen1RowChanging(Me, New vStockAlmacen1RowChangeEvent(CType(e.Row,vStockAlmacen1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vStockAlmacen1RowDeletedEvent) Is Nothing) Then
                RaiseEvent vStockAlmacen1RowDeleted(Me, New vStockAlmacen1RowChangeEvent(CType(e.Row,vStockAlmacen1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vStockAlmacen1RowDeletingEvent) Is Nothing) Then
                RaiseEvent vStockAlmacen1RowDeleting(Me, New vStockAlmacen1RowChangeEvent(CType(e.Row,vStockAlmacen1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevStockAlmacen1Row(ByVal row As vStockAlmacen1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vStockAlmacen1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VGastosPorDiaDataTable
        Inherits Global.System.Data.TypedTableBase(Of VGastosPorDiaRow)
        
        Private columnfecPago As Global.System.Data.DataColumn
        
        Private columnnroOperacion As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnmontoPago As Global.System.Data.DataColumn
        
        Private columnmontoD As Global.System.Data.DataColumn
        
        Private columnbanco As Global.System.Data.DataColumn
        
        Private columnnroCue As Global.System.Data.DataColumn
        
        Private columnnroDes As Global.System.Data.DataColumn
        
        Private columncodBan As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        Private columnidCue As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnconcepto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VGastosPorDia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroCueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroCue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codBanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodBan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idCueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidCue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VGastosPorDiaRow
            Get
                Return CType(Me.Rows(index),VGastosPorDiaRow)
            End Get
        End Property
        
        Public Event VGastosPorDiaRowChanging As VGastosPorDiaRowChangeEventHandler
        
        Public Event VGastosPorDiaRowChanged As VGastosPorDiaRowChangeEventHandler
        
        Public Event VGastosPorDiaRowDeleting As VGastosPorDiaRowChangeEventHandler
        
        Public Event VGastosPorDiaRowDeleted As VGastosPorDiaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVGastosPorDiaRow(ByVal row As VGastosPorDiaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVGastosPorDiaRow( _
                    ByVal fecPago As Date,  _
                    ByVal nroOperacion As String,  _
                    ByVal ruc As String,  _
                    ByVal razon As String,  _
                    ByVal simbolo As String,  _
                    ByVal montoPago As Decimal,  _
                    ByVal montoD As Decimal,  _
                    ByVal banco As String,  _
                    ByVal nroCue As String,  _
                    ByVal nroDes As String,  _
                    ByVal codBan As Integer,  _
                    ByVal codMon As Integer,  _
                    ByVal idCue As Integer,  _
                    ByVal codigo As String,  _
                    ByVal nombre As String,  _
                    ByVal concepto As String) As VGastosPorDiaRow
            Dim rowVGastosPorDiaRow As VGastosPorDiaRow = CType(Me.NewRow,VGastosPorDiaRow)
            Dim columnValuesArray() As Object = New Object() {fecPago, nroOperacion, ruc, razon, simbolo, montoPago, montoD, banco, nroCue, nroDes, codBan, codMon, idCue, codigo, nombre, concepto}
            rowVGastosPorDiaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVGastosPorDiaRow)
            Return rowVGastosPorDiaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VGastosPorDiaDataTable = CType(MyBase.Clone,VGastosPorDiaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VGastosPorDiaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfecPago = MyBase.Columns("fecPago")
            Me.columnnroOperacion = MyBase.Columns("nroOperacion")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnmontoPago = MyBase.Columns("montoPago")
            Me.columnmontoD = MyBase.Columns("montoD")
            Me.columnbanco = MyBase.Columns("banco")
            Me.columnnroCue = MyBase.Columns("nroCue")
            Me.columnnroDes = MyBase.Columns("nroDes")
            Me.columncodBan = MyBase.Columns("codBan")
            Me.columncodMon = MyBase.Columns("codMon")
            Me.columnidCue = MyBase.Columns("idCue")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnconcepto = MyBase.Columns("concepto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfecPago = New Global.System.Data.DataColumn("fecPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecPago)
            Me.columnnroOperacion = New Global.System.Data.DataColumn("nroOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroOperacion)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnmontoPago = New Global.System.Data.DataColumn("montoPago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoPago)
            Me.columnmontoD = New Global.System.Data.DataColumn("montoD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoD)
            Me.columnbanco = New Global.System.Data.DataColumn("banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbanco)
            Me.columnnroCue = New Global.System.Data.DataColumn("nroCue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroCue)
            Me.columnnroDes = New Global.System.Data.DataColumn("nroDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroDes)
            Me.columncodBan = New Global.System.Data.DataColumn("codBan", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodBan)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
            Me.columnidCue = New Global.System.Data.DataColumn("idCue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidCue)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnconcepto = New Global.System.Data.DataColumn("concepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconcepto)
            Me.columnnroOperacion.MaxLength = 20
            Me.columnruc.MaxLength = 11
            Me.columnrazon.MaxLength = 60
            Me.columnsimbolo.MaxLength = 10
            Me.columnbanco.MaxLength = 40
            Me.columnnroCue.MaxLength = 60
            Me.columnnroDes.ReadOnly = true
            Me.columnnroDes.MaxLength = 36
            Me.columncodBan.AllowDBNull = false
            Me.columncodMon.AllowDBNull = false
            Me.columnidCue.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columnnombre.MaxLength = 100
            Me.columnconcepto.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVGastosPorDiaRow() As VGastosPorDiaRow
            Return CType(Me.NewRow,VGastosPorDiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VGastosPorDiaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VGastosPorDiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VGastosPorDiaRowChangedEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowChanged(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VGastosPorDiaRowChangingEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowChanging(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VGastosPorDiaRowDeletedEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowDeleted(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VGastosPorDiaRowDeletingEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowDeleting(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVGastosPorDiaRow(ByVal row As VGastosPorDiaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAlmacen = New DataSetAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VGastosPorDiaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VSolDetSolRow
        Inherits Global.System.Data.DataRow
        
        Private tableVSolDetSol As VSolDetSolDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVSolDetSol = CType(Me.Table,VSolDetSolDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idSol() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.idSolColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.idSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecSol() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.fecSolColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecSol' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.fecSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property est() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.estColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'est' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.estColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombres() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.nombresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombres' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.nombresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombres1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.nombres1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombres1' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.nombres1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obs' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.estadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPers() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codPersColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codPersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPersA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.codPersAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codPersA' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.codPersAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDetS() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codDetSColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codDetSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prioridad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.prioridadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'prioridad' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.prioridadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descrip() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.descripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descrip' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.descripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.cantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property areaM() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.areaMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'areaM' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.areaMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoM() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.tipoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoM' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.tipoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jefe() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.jefeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'jefe' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.jefeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codAreaM() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codAreaMColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codAreaMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codTipM() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codTipMColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codTipMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMat() As Integer
            Get
                Return CType(Me(Me.tableVSolDetSol.codMatColumn),Integer)
            End Get
            Set
                Me(Me.tableVSolDetSol.codMatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obsSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.obsSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obsSol' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.obsSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVSolDetSol.estSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estSol' de la tabla 'VSolDetSol' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSolDetSol.estSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVSolDetSol.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecSolNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.fecSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecSolNull()
            Me(Me.tableVSolDetSol.fecSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.estColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestNull()
            Me(Me.tableVSolDetSol.estColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombresNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.nombresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombresNull()
            Me(Me.tableVSolDetSol.nombresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnombres1Null() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.nombres1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnombres1Null()
            Me(Me.tableVSolDetSol.nombres1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsNull()
            Me(Me.tableVSolDetSol.obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableVSolDetSol.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodPersANull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.codPersAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodPersANull()
            Me(Me.tableVSolDetSol.codPersAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprioridadNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.prioridadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprioridadNull()
            Me(Me.tableVSolDetSol.prioridadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.descripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripNull()
            Me(Me.tableVSolDetSol.descripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tableVSolDetSol.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVSolDetSol.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsareaMNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.areaMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetareaMNull()
            Me(Me.tableVSolDetSol.areaMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoMNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.tipoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoMNull()
            Me(Me.tableVSolDetSol.tipoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjefeNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.jefeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjefeNull()
            Me(Me.tableVSolDetSol.jefeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsSolNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.obsSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsSolNull()
            Me(Me.tableVSolDetSol.obsSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestSolNull() As Boolean
            Return Me.IsNull(Me.tableVSolDetSol.estSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestSolNull()
            Me(Me.tableVSolDetSol.estSolColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VOrdenDesembolsoImprimirRow
        Inherits Global.System.Data.DataRow
        
        Private tableVOrdenDesembolsoImprimir As VOrdenDesembolsoImprimirDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVOrdenDesembolsoImprimir = CType(Me.Table,VOrdenDesembolsoImprimirDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idOP() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDesembolsoImprimir.idOPColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.idOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecDes() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.fecDesColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecDes' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.fecDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDesembolsoImprimir.codMonColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.monedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'moneda' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.monedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.montoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'monto' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoDet() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.montoDetColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoDet' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.montoDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoDif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.montoDifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoDif' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.montoDifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.estadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableVOrdenDesembolsoImprimir.codigoColumn),String)
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obra() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.obraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obra' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.obraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codIde() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDesembolsoImprimir.codIdeColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.codIdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fono() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.fonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fono' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.fonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'email' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.bancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'banco' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.bancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroCta() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.nroCtaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroCta' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.nroCtaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroDet() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.nroDetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroDet' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.nroDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datoReq() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.datoReqColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'datoReq' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.datoReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property factCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.factCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'factCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.factCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property faCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.faCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'faCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.faCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bolCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.bolCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'bolCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.bolCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property boCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.boCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'boCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.boCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guiaCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.guiaCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'guiaCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.guiaCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.guCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'guCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.guCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vouCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.vouCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'vouCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.vouCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property voCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.voCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'voCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.voCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vouDCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.vouDCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'vouDCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.vouDCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property voDCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.voDCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'voDCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.voDCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reciCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.reciCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'reciCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.reciCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.reCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'reCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.reCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property otroCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.otroCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'otroCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.otroCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descOtro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.descOtroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descOtro' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.descOtroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property otCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.otCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'otCheck' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.otCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroConfor() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.nroConforColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroConfor' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.nroConforColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecEnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.fecEntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecEnt' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.fecEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hist() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.histColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'hist' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.histColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soli() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.soliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'soli' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.soliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gere() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.gereColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'gere' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.gereColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teso() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.tesoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'teso' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.tesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conta() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.contaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'conta' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.contaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codTipP() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.codTipPColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codTipP' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.codTipPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoP() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.tipoPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoP' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.tipoPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPagD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.codPagDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codPagD' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.codPagDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.fecPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecPago' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.fecPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pagoDet() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.pagoDetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pagoDet' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.pagoDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.codMon1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codMon1' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.codMon1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property moneda1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.moneda1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'moneda1' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.moneda1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.simbolo1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo1' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.simbolo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoPago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.montoPagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoPago' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.montoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soliEst() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.soliEstColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'soliEst' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.soliEstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gereEst() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.gereEstColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'gereEst' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.gereEstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tesoEst() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.tesoEstColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tesoEst' de la tabla 'VOrdenDesembolsoImprimir' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.tesoEstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contaEst() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.contaEstColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'contaEst' de la tabla 'VOrdenDesembolsoImprimir' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.contaEstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroP() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.nroPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroP' de la tabla 'VOrdenDesembolsoImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.nroPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clasif() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.clasifColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'clasif' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.clasifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.montoDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoD' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.montoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codBan() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.codBanColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codBan' de la tabla 'VOrdenDesembolsoImprimir' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.codBanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bancoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesembolsoImprimir.bancoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'bancoPago' de la tabla 'VOrdenDesembolsoImprimir' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesembolsoImprimir.bancoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVOrdenDesembolsoImprimir.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecDesNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.fecDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecDesNull()
            Me(Me.tableVOrdenDesembolsoImprimir.fecDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmonedaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.monedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmonedaNull()
            Me(Me.tableVOrdenDesembolsoImprimir.monedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableVOrdenDesembolsoImprimir.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.montoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.montoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoDetNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.montoDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoDetNull()
            Me(Me.tableVOrdenDesembolsoImprimir.montoDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoDifNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.montoDifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoDifNull()
            Me(Me.tableVOrdenDesembolsoImprimir.montoDifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobraNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.obraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobraNull()
            Me(Me.tableVOrdenDesembolsoImprimir.obraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVOrdenDesembolsoImprimir.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVOrdenDesembolsoImprimir.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.fonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.fonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableVOrdenDesembolsoImprimir.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbancoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.bancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbancoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.bancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroCtaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.nroCtaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroCtaNull()
            Me(Me.tableVOrdenDesembolsoImprimir.nroCtaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroDetNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.nroDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroDetNull()
            Me(Me.tableVOrdenDesembolsoImprimir.nroDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdatoReqNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.datoReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdatoReqNull()
            Me(Me.tableVOrdenDesembolsoImprimir.datoReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfactCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.factCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfactCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.factCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfaCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.faCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfaCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.faCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbolCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.bolCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbolCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.bolCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsboCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.boCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetboCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.boCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsguiaCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.guiaCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetguiaCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.guiaCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsguCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.guCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetguCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.guCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvouCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.vouCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvouCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.vouCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvoCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.voCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvoCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.voCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvouDCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.vouDCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvouDCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.vouDCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvoDCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.voDCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvoDCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.voDCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreciCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.reciCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreciCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.reciCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.reCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.reCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsotroCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.otroCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetotroCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.otroCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescOtroNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.descOtroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescOtroNull()
            Me(Me.tableVOrdenDesembolsoImprimir.descOtroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsotCheckNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.otCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetotCheckNull()
            Me(Me.tableVOrdenDesembolsoImprimir.otCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroConforNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.nroConforColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroConforNull()
            Me(Me.tableVOrdenDesembolsoImprimir.nroConforColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecEntNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.fecEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecEntNull()
            Me(Me.tableVOrdenDesembolsoImprimir.fecEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshistNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.histColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethistNull()
            Me(Me.tableVOrdenDesembolsoImprimir.histColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssoliNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.soliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsoliNull()
            Me(Me.tableVOrdenDesembolsoImprimir.soliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgereNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.gereColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgereNull()
            Me(Me.tableVOrdenDesembolsoImprimir.gereColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstesoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.tesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettesoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.tesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscontaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.contaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcontaNull()
            Me(Me.tableVOrdenDesembolsoImprimir.contaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodTipPNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.codTipPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodTipPNull()
            Me(Me.tableVOrdenDesembolsoImprimir.codTipPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoPNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.tipoPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoPNull()
            Me(Me.tableVOrdenDesembolsoImprimir.tipoPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodPagDNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.codPagDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodPagDNull()
            Me(Me.tableVOrdenDesembolsoImprimir.codPagDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecPagoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.fecPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecPagoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.fecPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspagoDetNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.pagoDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpagoDetNull()
            Me(Me.tableVOrdenDesembolsoImprimir.pagoDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodMon1Null() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.codMon1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodMon1Null()
            Me(Me.tableVOrdenDesembolsoImprimir.codMon1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismoneda1Null() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.moneda1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmoneda1Null()
            Me(Me.tableVOrdenDesembolsoImprimir.moneda1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issimbolo1Null() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.simbolo1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsimbolo1Null()
            Me(Me.tableVOrdenDesembolsoImprimir.simbolo1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoPagoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.montoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoPagoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.montoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssoliEstNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.soliEstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsoliEstNull()
            Me(Me.tableVOrdenDesembolsoImprimir.soliEstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgereEstNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.gereEstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgereEstNull()
            Me(Me.tableVOrdenDesembolsoImprimir.gereEstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstesoEstNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.tesoEstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettesoEstNull()
            Me(Me.tableVOrdenDesembolsoImprimir.tesoEstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscontaEstNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.contaEstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcontaEstNull()
            Me(Me.tableVOrdenDesembolsoImprimir.contaEstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroPNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.nroPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroPNull()
            Me(Me.tableVOrdenDesembolsoImprimir.nroPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclasifNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.clasifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclasifNull()
            Me(Me.tableVOrdenDesembolsoImprimir.clasifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoDNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.montoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoDNull()
            Me(Me.tableVOrdenDesembolsoImprimir.montoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodBanNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.codBanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodBanNull()
            Me(Me.tableVOrdenDesembolsoImprimir.codBanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbancoPagoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesembolsoImprimir.bancoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbancoPagoNull()
            Me(Me.tableVOrdenDesembolsoImprimir.bancoPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VKardexRow
        Inherits Global.System.Data.DataRow
        
        Private tableVKardex As VKardexDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVKardex = CType(Me.Table,VKardexDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroNota() As Integer
            Get
                Return CType(Me(Me.tableVKardex.nroNotaColumn),Integer)
            End Get
            Set
                Me(Me.tableVKardex.nroNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.tipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipo' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.tipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.fechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.fechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property material() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'material' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantEnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.cantEntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cantEnt' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.cantEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property preUniEnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.preUniEntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'preUniEnt' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.preUniEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantSal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.cantSalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cantSal' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.cantSalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property preUniSal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.preUniSalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'preUniSal' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.preUniSalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.saldoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'saldo' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.saldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroGuia() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.nroGuiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroGuia' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.nroGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.nroDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroDoc' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.nroDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property otroDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.otroDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'otroDoc' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.otroDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.ubicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ubicacion' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.ubicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.nomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nom' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.nomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs() As String
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obs' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMat() As Integer
            Get
                Return CType(Me(Me.tableVKardex.codMatColumn),Integer)
            End Get
            Set
                Me(Me.tableVKardex.codMatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idMU() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.idMUColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idMU' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.idMUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codUbi() As Integer
            Get
                Return CType(Me(Me.tableVKardex.codUbiColumn),Integer)
            End Get
            Set
                Me(Me.tableVKardex.codUbiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableVKardex.codigoColumn),String)
            End Get
            Set
                Me(Me.tableVKardex.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codGuia() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.codGuiaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codGuia' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.codGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDoc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVKardex.codDocColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codDoc' de la tabla 'VKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVKardex.codDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codTrans() As Integer
            Get
                Return CType(Me(Me.tableVKardex.codTransColumn),Integer)
            End Get
            Set
                Me(Me.tableVKardex.codTransColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPers() As Integer
            Get
                Return CType(Me(Me.tableVKardex.codPersColumn),Integer)
            End Get
            Set
                Me(Me.tableVKardex.codPersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codSal() As Integer
            Get
                Return CType(Me(Me.tableVKardex.codSalColumn),Integer)
            End Get
            Set
                Me(Me.tableVKardex.codSalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.tipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoNull()
            Me(Me.tableVKardex.tipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.fechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaNull()
            Me(Me.tableVKardex.fechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaterialNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaterialNull()
            Me(Me.tableVKardex.materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantEntNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.cantEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantEntNull()
            Me(Me.tableVKardex.cantEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspreUniEntNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.preUniEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpreUniEntNull()
            Me(Me.tableVKardex.preUniEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantSalNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.cantSalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantSalNull()
            Me(Me.tableVKardex.cantSalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspreUniSalNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.preUniSalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpreUniSalNull()
            Me(Me.tableVKardex.preUniSalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.saldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoNull()
            Me(Me.tableVKardex.saldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVKardex.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroGuiaNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.nroGuiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroGuiaNull()
            Me(Me.tableVKardex.nroGuiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroDocNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.nroDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroDocNull()
            Me(Me.tableVKardex.nroDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsotroDocNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.otroDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetotroDocNull()
            Me(Me.tableVKardex.otroDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsubicacionNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.ubicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetubicacionNull()
            Me(Me.tableVKardex.ubicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVKardex.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.nomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomNull()
            Me(Me.tableVKardex.nomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsNull()
            Me(Me.tableVKardex.obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidMUNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.idMUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidMUNull()
            Me(Me.tableVKardex.idMUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodGuiaNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.codGuiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodGuiaNull()
            Me(Me.tableVKardex.codGuiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodDocNull() As Boolean
            Return Me.IsNull(Me.tableVKardex.codDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodDocNull()
            Me(Me.tableVKardex.codDocColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VOrdenDetOrdenRow
        Inherits Global.System.Data.DataRow
        
        Private tableVOrdenDetOrden As VOrdenDetOrdenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVOrdenDetOrden = CType(Me.Table,VOrdenDetOrdenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDetO() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDetOrden.codDetOColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.codDetOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecOrden() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fecOrdenColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecOrden' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fecOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property atiendeCom() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.atiendeComColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'atiendeCom' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.atiendeComColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property celAti() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.celAtiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'celAti' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.celAtiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fonos() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fonosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fonos' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fonosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'email' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nomRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomRem' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nomRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fono() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fono' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emaRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.emaRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'emaRem' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.emaRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfe() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.transfeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'transfe' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.transfeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property plazoEnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.plazoEntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'plazoEnt' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.plazoEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property forma() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.formaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'forma' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.formaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugarEnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.lugarEntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugarEnt' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.lugarEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property igv() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.igvColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'igv' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.igvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property calIGV() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.calIGVColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'calIGV' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.calIGVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableVOrdenDetOrden.codigoColumn),String)
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugar() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.lugarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugar' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.lugarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomAte() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nomAteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomAte' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nomAteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obsFac() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.obsFacColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obsFac' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.obsFacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.cantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property material() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'material' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.precioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'precio' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.precioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.subTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subTotal' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.subTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDetOrden.codMonColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.monedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'moneda' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.monedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroProf() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.nroProfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroProf' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.nroProfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trans() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.transColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'trans' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.transColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rucT() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.rucTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rucT' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.rucTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dirT() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.dirTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'dirT' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.dirTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fonoT() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fonoTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fonoT' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fonoTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contacto() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.contactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'contacto' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.contactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nota() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.notaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nota' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.notaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cuentaBan() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.cuentaBanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cuentaBan' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.cuentaBanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cuentaDet() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.cuentaDetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cuentaDet' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.cuentaDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dni() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.dniColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'dni' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.dniColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fonoAte() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDetOrden.fonoAteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fonoAte' de la tabla 'VOrdenDetOrden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDetOrden.fonoAteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVOrdenDetOrden.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecOrdenNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fecOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecOrdenNull()
            Me(Me.tableVOrdenDetOrden.fecOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVOrdenDetOrden.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVOrdenDetOrden.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsatiendeComNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.atiendeComColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetatiendeComNull()
            Me(Me.tableVOrdenDetOrden.atiendeComColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscelAtiNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.celAtiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcelAtiNull()
            Me(Me.tableVOrdenDetOrden.celAtiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonosNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fonosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonosNull()
            Me(Me.tableVOrdenDetOrden.fonosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableVOrdenDetOrden.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomRemNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nomRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomRemNull()
            Me(Me.tableVOrdenDetOrden.nomRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonoNull()
            Me(Me.tableVOrdenDetOrden.fonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemaRemNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.emaRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemaRemNull()
            Me(Me.tableVOrdenDetOrden.emaRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstransfeNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.transfeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettransfeNull()
            Me(Me.tableVOrdenDetOrden.transfeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsplazoEntNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.plazoEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetplazoEntNull()
            Me(Me.tableVOrdenDetOrden.plazoEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.formaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaNull()
            Me(Me.tableVOrdenDetOrden.formaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarEntNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.lugarEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarEntNull()
            Me(Me.tableVOrdenDetOrden.lugarEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsigvNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.igvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetigvNull()
            Me(Me.tableVOrdenDetOrden.igvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscalIGVNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.calIGVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcalIGVNull()
            Me(Me.tableVOrdenDetOrden.calIGVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.lugarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarNull()
            Me(Me.tableVOrdenDetOrden.lugarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVOrdenDetOrden.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomAteNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nomAteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomAteNull()
            Me(Me.tableVOrdenDetOrden.nomAteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsFacNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.obsFacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsFacNull()
            Me(Me.tableVOrdenDetOrden.obsFacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tableVOrdenDetOrden.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVOrdenDetOrden.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaterialNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaterialNull()
            Me(Me.tableVOrdenDetOrden.materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprecioNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.precioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprecioNull()
            Me(Me.tableVOrdenDetOrden.precioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubTotalNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.subTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubTotalNull()
            Me(Me.tableVOrdenDetOrden.subTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmonedaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.monedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmonedaNull()
            Me(Me.tableVOrdenDetOrden.monedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableVOrdenDetOrden.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroProfNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.nroProfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroProfNull()
            Me(Me.tableVOrdenDetOrden.nroProfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstransNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.transColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettransNull()
            Me(Me.tableVOrdenDetOrden.transColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucTNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.rucTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucTNull()
            Me(Me.tableVOrdenDetOrden.rucTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdirTNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.dirTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdirTNull()
            Me(Me.tableVOrdenDetOrden.dirTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonoTNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fonoTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonoTNull()
            Me(Me.tableVOrdenDetOrden.fonoTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscontactoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.contactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcontactoNull()
            Me(Me.tableVOrdenDetOrden.contactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnotaNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.notaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnotaNull()
            Me(Me.tableVOrdenDetOrden.notaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscuentaBanNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.cuentaBanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcuentaBanNull()
            Me(Me.tableVOrdenDetOrden.cuentaBanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscuentaDetNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.cuentaDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcuentaDetNull()
            Me(Me.tableVOrdenDetOrden.cuentaDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdniNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.dniColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdniNull()
            Me(Me.tableVOrdenDetOrden.dniColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonoAteNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDetOrden.fonoAteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonoAteNull()
            Me(Me.tableVOrdenDetOrden.fonoAteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VGuiaDetGuiaERow
        Inherits Global.System.Data.DataRow
        
        Private tableVGuiaDetGuiaE As VGuiaDetGuiaEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVGuiaDetGuiaE = CType(Me.Table,VGuiaDetGuiaEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codGuiaE() As Integer
            Get
                Return CType(Me(Me.tableVGuiaDetGuiaE.codGuiaEColumn),Integer)
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.codGuiaEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroGuia() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.nroGuiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroGuia' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.nroGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecIni() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.fecIniColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecIni' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.fecIniColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property almOri() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.almOriColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'almOri' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.almOriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property partida() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.partidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'partida' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.partidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property almDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.almDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'almDes' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.almDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property llegada() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.llegadaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'llegada' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.llegadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property empresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.empresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'empresa' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.empresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rucEmp() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.rucEmpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rucEmp' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.rucEmpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property marcaNro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.marcaNroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'marcaNro' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.marcaNroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroConst() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.nroConstColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroConst' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.nroConstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroLic() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.nroLicColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroLic' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.nroLicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.motivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'motivo' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.motivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroFact() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.nroFactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroFact' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.nroFactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obs' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.codigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigo' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.cantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descrip() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.descripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descrip' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.descripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property peso() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaDetGuiaE.pesoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'peso' de la tabla 'VGuiaDetGuiaE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaDetGuiaE.pesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroGuiaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.nroGuiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroGuiaNull()
            Me(Me.tableVGuiaDetGuiaE.nroGuiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecIniNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.fecIniColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecIniNull()
            Me(Me.tableVGuiaDetGuiaE.fecIniColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVGuiaDetGuiaE.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVGuiaDetGuiaE.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalmOriNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.almOriColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalmOriNull()
            Me(Me.tableVGuiaDetGuiaE.almOriColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspartidaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.partidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpartidaNull()
            Me(Me.tableVGuiaDetGuiaE.partidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalmDesNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.almDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalmDesNull()
            Me(Me.tableVGuiaDetGuiaE.almDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsllegadaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.llegadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetllegadaNull()
            Me(Me.tableVGuiaDetGuiaE.llegadaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsempresaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.empresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetempresaNull()
            Me(Me.tableVGuiaDetGuiaE.empresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucEmpNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.rucEmpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucEmpNull()
            Me(Me.tableVGuiaDetGuiaE.rucEmpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmarcaNroNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.marcaNroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmarcaNroNull()
            Me(Me.tableVGuiaDetGuiaE.marcaNroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroConstNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.nroConstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroConstNull()
            Me(Me.tableVGuiaDetGuiaE.nroConstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroLicNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.nroLicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroLicNull()
            Me(Me.tableVGuiaDetGuiaE.nroLicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmotivoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.motivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmotivoNull()
            Me(Me.tableVGuiaDetGuiaE.motivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroFactNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.nroFactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroFactNull()
            Me(Me.tableVGuiaDetGuiaE.nroFactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsNull()
            Me(Me.tableVGuiaDetGuiaE.obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.codigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoNull()
            Me(Me.tableVGuiaDetGuiaE.codigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tableVGuiaDetGuiaE.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.descripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripNull()
            Me(Me.tableVGuiaDetGuiaE.descripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVGuiaDetGuiaE.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspesoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaDetGuiaE.pesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpesoNull()
            Me(Me.tableVGuiaDetGuiaE.pesoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VCotDetCotRow
        Inherits Global.System.Data.DataRow
        
        Private tableVCotDetCot As VCotDetCotDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVCotDetCot = CType(Me.Table,VCotDetCotDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDetC() As Integer
            Get
                Return CType(Me(Me.tableVCotDetCot.codDetCColumn),Integer)
            End Get
            Set
                Me(Me.tableVCotDetCot.codDetCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecCot() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.fecCotColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecCot' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.fecCotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property atencion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.atencionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'atencion' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.atencionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property celRpm() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.celRpmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'celRpm' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.celRpmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fonos() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.fonosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fonos' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.fonosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'email' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nomRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomRem' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nomRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fono() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.fonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fono' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.fonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emaRem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.emaRemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'emaRem' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.emaRemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tiempoVig() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.tiempoVigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tiempoVig' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.tiempoVigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property plazo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.plazoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'plazo' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.plazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property forma() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.formaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'forma' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.formaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugarEnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.lugarEntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugarEnt' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.lugarEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property incluir() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.incluirColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'incluir' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.incluirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableVCotDetCot.codigoColumn),String)
            End Get
            Set
                Me(Me.tableVCotDetCot.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugar() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.lugarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lugar' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.lugarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.nomSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomSol' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.nomSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obs' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codGruC() As Integer
            Get
                Return CType(Me(Me.tableVCotDetCot.codGruCColumn),Integer)
            End Get
            Set
                Me(Me.tableVCotDetCot.codGruCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descrip() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.descripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descrip' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.descripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.cantColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property material() As String
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'material' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.precioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'precio' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.precioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVCotDetCot.subTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subTotal' de la tabla 'VCotDetCot' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCotDetCot.subTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVCotDetCot.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecCotNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.fecCotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecCotNull()
            Me(Me.tableVCotDetCot.fecCotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVCotDetCot.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVCotDetCot.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsatencionNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.atencionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetatencionNull()
            Me(Me.tableVCotDetCot.atencionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscelRpmNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.celRpmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcelRpmNull()
            Me(Me.tableVCotDetCot.celRpmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonosNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.fonosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonosNull()
            Me(Me.tableVCotDetCot.fonosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableVCotDetCot.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomRemNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nomRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomRemNull()
            Me(Me.tableVCotDetCot.nomRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfonoNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.fonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfonoNull()
            Me(Me.tableVCotDetCot.fonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemaRemNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.emaRemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemaRemNull()
            Me(Me.tableVCotDetCot.emaRemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstiempoVigNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.tiempoVigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettiempoVigNull()
            Me(Me.tableVCotDetCot.tiempoVigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsplazoNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.plazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetplazoNull()
            Me(Me.tableVCotDetCot.plazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.formaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaNull()
            Me(Me.tableVCotDetCot.formaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarEntNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.lugarEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarEntNull()
            Me(Me.tableVCotDetCot.lugarEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsincluirNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.incluirColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetincluirNull()
            Me(Me.tableVCotDetCot.incluirColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.lugarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarNull()
            Me(Me.tableVCotDetCot.lugarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVCotDetCot.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomSolNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.nomSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomSolNull()
            Me(Me.tableVCotDetCot.nomSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsNull()
            Me(Me.tableVCotDetCot.obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.descripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripNull()
            Me(Me.tableVCotDetCot.descripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tableVCotDetCot.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableVCotDetCot.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaterialNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaterialNull()
            Me(Me.tableVCotDetCot.materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprecioNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.precioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprecioNull()
            Me(Me.tableVCotDetCot.precioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubTotalNull() As Boolean
            Return Me.IsNull(Me.tableVCotDetCot.subTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubTotalNull()
            Me(Me.tableVCotDetCot.subTotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VDetSolCajaImprimirRow
        Inherits Global.System.Data.DataRow
        
        Private tableVDetSolCajaImprimir As VDetSolCajaImprimirDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDetSolCajaImprimir = CType(Me.Table,VDetSolCajaImprimirDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDetSol() As Integer
            Get
                Return CType(Me(Me.tableVDetSolCajaImprimir.codDetSolColumn),Integer)
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.codDetSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codSC() As Integer
            Get
                Return CType(Me(Me.tableVDetSolCajaImprimir.codSCColumn),Integer)
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.codSCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomSede() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.nomSedeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomSede' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.nomSedeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomObra() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.nomObraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomObra' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.nomObraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.nomSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomSol' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.nomSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaSol() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.fechaSolColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaSol' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.fechaSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoSol() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.montoSolColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoSol' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.montoSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imprevisto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.imprevistoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'imprevisto' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.imprevistoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property salAnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.salAntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'salAnt' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.salAntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.cant1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cant1' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.cant1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uniMed() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.uniMedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'uniMed' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.uniMedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property insumo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.insumoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'insumo' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.insumoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prec1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.prec1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'prec1' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.prec1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totPar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.totParColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'totPar' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.totParColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property comp() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.compColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'comp' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.compColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obsSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.obsSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obsSol' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.obsSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estApro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.estAproColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estApro' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.estAproColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obsApro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.obsAproColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obsApro' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.obsAproColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property areaM() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.areaMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'areaM' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.areaMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoM() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.tipoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoM' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.tipoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ingre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.ingreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ingre' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.ingreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codAreaM() As Integer
            Get
                Return CType(Me(Me.tableVDetSolCajaImprimir.codAreaMColumn),Integer)
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.codAreaMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codTipM() As Integer
            Get
                Return CType(Me(Me.tableVDetSolCajaImprimir.codTipMColumn),Integer)
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.codTipMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMat() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.codMatColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codMat' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.codMatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property compCheck() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.compCheckColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'compCheck' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.compCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estSol() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.estSolColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estSol' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.estSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ingreso() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVDetSolCajaImprimir.ingresoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ingreso' de la tabla 'VDetSolCajaImprimir' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDetSolCajaImprimir.ingresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomSedeNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.nomSedeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomSedeNull()
            Me(Me.tableVDetSolCajaImprimir.nomSedeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomObraNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.nomObraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomObraNull()
            Me(Me.tableVDetSolCajaImprimir.nomObraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomSolNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.nomSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomSolNull()
            Me(Me.tableVDetSolCajaImprimir.nomSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaSolNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.fechaSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaSolNull()
            Me(Me.tableVDetSolCajaImprimir.fechaSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVDetSolCajaImprimir.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoSolNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.montoSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoSolNull()
            Me(Me.tableVDetSolCajaImprimir.montoSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimprevistoNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.imprevistoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimprevistoNull()
            Me(Me.tableVDetSolCajaImprimir.imprevistoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssalAntNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.salAntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsalAntNull()
            Me(Me.tableVDetSolCajaImprimir.salAntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscant1Null() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.cant1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcant1Null()
            Me(Me.tableVDetSolCajaImprimir.cant1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuniMedNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.uniMedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuniMedNull()
            Me(Me.tableVDetSolCajaImprimir.uniMedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinsumoNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.insumoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinsumoNull()
            Me(Me.tableVDetSolCajaImprimir.insumoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprec1Null() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.prec1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprec1Null()
            Me(Me.tableVDetSolCajaImprimir.prec1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotParNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.totParColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotParNull()
            Me(Me.tableVDetSolCajaImprimir.totParColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.compColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompNull()
            Me(Me.tableVDetSolCajaImprimir.compColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsSolNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.obsSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsSolNull()
            Me(Me.tableVDetSolCajaImprimir.obsSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestAproNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.estAproColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestAproNull()
            Me(Me.tableVDetSolCajaImprimir.estAproColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsAproNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.obsAproColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsAproNull()
            Me(Me.tableVDetSolCajaImprimir.obsAproColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsareaMNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.areaMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetareaMNull()
            Me(Me.tableVDetSolCajaImprimir.areaMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoMNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.tipoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoMNull()
            Me(Me.tableVDetSolCajaImprimir.tipoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsingreNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.ingreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetingreNull()
            Me(Me.tableVDetSolCajaImprimir.ingreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodMatNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.codMatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodMatNull()
            Me(Me.tableVDetSolCajaImprimir.codMatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompCheckNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.compCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompCheckNull()
            Me(Me.tableVDetSolCajaImprimir.compCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestSolNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.estSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestSolNull()
            Me(Me.tableVDetSolCajaImprimir.estSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsingresoNull() As Boolean
            Return Me.IsNull(Me.tableVDetSolCajaImprimir.ingresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetingresoNull()
            Me(Me.tableVDetSolCajaImprimir.ingresoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vStockAlmacen1Row
        Inherits Global.System.Data.DataRow
        
        Private tablevStockAlmacen1 As vStockAlmacen1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevStockAlmacen1 = CType(Me.Table,vStockAlmacen1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property material() As String
            Get
                Try 
                    Return CType(Me(Me.tablevStockAlmacen1.materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'material' de la tabla 'vStockAlmacen1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevStockAlmacen1.materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablevStockAlmacen1.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'vStockAlmacen1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevStockAlmacen1.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoM() As String
            Get
                Try 
                    Return CType(Me(Me.tablevStockAlmacen1.tipoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoM' de la tabla 'vStockAlmacen1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevStockAlmacen1.tipoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stock() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevStockAlmacen1.stockColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stock' de la tabla 'vStockAlmacen1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevStockAlmacen1.stockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaterialNull() As Boolean
            Return Me.IsNull(Me.tablevStockAlmacen1.materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaterialNull()
            Me(Me.tablevStockAlmacen1.materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tablevStockAlmacen1.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tablevStockAlmacen1.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoMNull() As Boolean
            Return Me.IsNull(Me.tablevStockAlmacen1.tipoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoMNull()
            Me(Me.tablevStockAlmacen1.tipoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockNull() As Boolean
            Return Me.IsNull(Me.tablevStockAlmacen1.stockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockNull()
            Me(Me.tablevStockAlmacen1.stockColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VGastosPorDiaRow
        Inherits Global.System.Data.DataRow
        
        Private tableVGastosPorDia As VGastosPorDiaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVGastosPorDia = CType(Me.Table,VGastosPorDiaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.fecPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecPago' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.fecPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroOperacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nroOperacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroOperacion' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nroOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoPago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.montoPagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoPago' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.montoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.montoDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoD' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.montoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.bancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'banco' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.bancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroCue() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nroCueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroCue' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nroCueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nroDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroDes' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nroDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codBan() As Integer
            Get
                Return CType(Me(Me.tableVGastosPorDia.codBanColumn),Integer)
            End Get
            Set
                Me(Me.tableVGastosPorDia.codBanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As Integer
            Get
                Return CType(Me(Me.tableVGastosPorDia.codMonColumn),Integer)
            End Get
            Set
                Me(Me.tableVGastosPorDia.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idCue() As Integer
            Get
                Return CType(Me(Me.tableVGastosPorDia.idCueColumn),Integer)
            End Get
            Set
                Me(Me.tableVGastosPorDia.idCueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.codigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigo' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property concepto() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.conceptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'concepto' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.conceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecPagoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.fecPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecPagoNull()
            Me(Me.tableVGastosPorDia.fecPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroOperacionNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nroOperacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroOperacionNull()
            Me(Me.tableVGastosPorDia.nroOperacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVGastosPorDia.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVGastosPorDia.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableVGastosPorDia.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoPagoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.montoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoPagoNull()
            Me(Me.tableVGastosPorDia.montoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoDNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.montoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoDNull()
            Me(Me.tableVGastosPorDia.montoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbancoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.bancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbancoNull()
            Me(Me.tableVGastosPorDia.bancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroCueNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nroCueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroCueNull()
            Me(Me.tableVGastosPorDia.nroCueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroDesNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nroDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroDesNull()
            Me(Me.tableVGastosPorDia.nroDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.codigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoNull()
            Me(Me.tableVGastosPorDia.codigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVGastosPorDia.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconceptoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.conceptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconceptoNull()
            Me(Me.tableVGastosPorDia.conceptoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VSolDetSolRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VSolDetSolRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VSolDetSolRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VSolDetSolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VOrdenDesembolsoImprimirRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VOrdenDesembolsoImprimirRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VOrdenDesembolsoImprimirRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VOrdenDesembolsoImprimirRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VKardexRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VKardexRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VKardexRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VKardexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VOrdenDetOrdenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VOrdenDetOrdenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VOrdenDetOrdenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VOrdenDetOrdenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VGuiaDetGuiaERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VGuiaDetGuiaERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VGuiaDetGuiaERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VGuiaDetGuiaERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VCotDetCotRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VCotDetCotRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VCotDetCotRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VCotDetCotRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VDetSolCajaImprimirRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VDetSolCajaImprimirRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VDetSolCajaImprimirRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VDetSolCajaImprimirRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vStockAlmacen1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As vStockAlmacen1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vStockAlmacen1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vStockAlmacen1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VGastosPorDiaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VGastosPorDiaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VGastosPorDiaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VGastosPorDiaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetAlmacenTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VSolDetSolTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VSolDetSol"
            tableMapping.ColumnMappings.Add("idSol", "idSol")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("fecSol", "fecSol")
            tableMapping.ColumnMappings.Add("est", "est")
            tableMapping.ColumnMappings.Add("nombres", "nombres")
            tableMapping.ColumnMappings.Add("nombres1", "nombres1")
            tableMapping.ColumnMappings.Add("obs", "obs")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("codPers", "codPers")
            tableMapping.ColumnMappings.Add("codPersA", "codPersA")
            tableMapping.ColumnMappings.Add("codDetS", "codDetS")
            tableMapping.ColumnMappings.Add("prioridad", "prioridad")
            tableMapping.ColumnMappings.Add("descrip", "descrip")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("areaM", "areaM")
            tableMapping.ColumnMappings.Add("tipoM", "tipoM")
            tableMapping.ColumnMappings.Add("jefe", "jefe")
            tableMapping.ColumnMappings.Add("codAreaM", "codAreaM")
            tableMapping.ColumnMappings.Add("codTipM", "codTipM")
            tableMapping.ColumnMappings.Add("codMat", "codMat")
            tableMapping.ColumnMappings.Add("obsSol", "obsSol")
            tableMapping.ColumnMappings.Add("estSol", "estSol")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=PROGRAMADORUNO;Initial Catalog=BD_ConstrucMech;User ID=mech;Password="& _ 
                "mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select idSol,nro,fecSol,est,nombres,nombres1,obs,estado,codPers,codPersA,codDetS,"& _ 
                "prioridad,descrip,cant,unidad,areaM,tipoM,jefe,obsSol,codAreaM,codTipM,codMat,es"& _ 
                "tSol from VSolDetSol where idSol=@idSol"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idSol", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "idSol", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VSolDetSolDataTable, ByVal idSol As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(idSol,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal idSol As Integer) As DataSetAlmacen.VSolDetSolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(idSol,Integer)
            Dim dataTable As DataSetAlmacen.VSolDetSolDataTable = New DataSetAlmacen.VSolDetSolDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VOrdenDesembolsoImprimirTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VOrdenDesembolsoImprimir"
            tableMapping.ColumnMappings.Add("idOP", "idOP")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("fecDes", "fecDes")
            tableMapping.ColumnMappings.Add("codMon", "codMon")
            tableMapping.ColumnMappings.Add("moneda", "moneda")
            tableMapping.ColumnMappings.Add("simbolo", "simbolo")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("montoDet", "montoDet")
            tableMapping.ColumnMappings.Add("montoDif", "montoDif")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("obra", "obra")
            tableMapping.ColumnMappings.Add("codIde", "codIde")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("fono", "fono")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("banco", "banco")
            tableMapping.ColumnMappings.Add("nroCta", "nroCta")
            tableMapping.ColumnMappings.Add("nroDet", "nroDet")
            tableMapping.ColumnMappings.Add("datoReq", "datoReq")
            tableMapping.ColumnMappings.Add("factCheck", "factCheck")
            tableMapping.ColumnMappings.Add("faCheck", "faCheck")
            tableMapping.ColumnMappings.Add("bolCheck", "bolCheck")
            tableMapping.ColumnMappings.Add("boCheck", "boCheck")
            tableMapping.ColumnMappings.Add("guiaCheck", "guiaCheck")
            tableMapping.ColumnMappings.Add("guCheck", "guCheck")
            tableMapping.ColumnMappings.Add("vouCheck", "vouCheck")
            tableMapping.ColumnMappings.Add("voCheck", "voCheck")
            tableMapping.ColumnMappings.Add("vouDCheck", "vouDCheck")
            tableMapping.ColumnMappings.Add("voDCheck", "voDCheck")
            tableMapping.ColumnMappings.Add("reciCheck", "reciCheck")
            tableMapping.ColumnMappings.Add("reCheck", "reCheck")
            tableMapping.ColumnMappings.Add("otroCheck", "otroCheck")
            tableMapping.ColumnMappings.Add("descOtro", "descOtro")
            tableMapping.ColumnMappings.Add("otCheck", "otCheck")
            tableMapping.ColumnMappings.Add("nroConfor", "nroConfor")
            tableMapping.ColumnMappings.Add("fecEnt", "fecEnt")
            tableMapping.ColumnMappings.Add("hist", "hist")
            tableMapping.ColumnMappings.Add("soli", "soli")
            tableMapping.ColumnMappings.Add("gere", "gere")
            tableMapping.ColumnMappings.Add("teso", "teso")
            tableMapping.ColumnMappings.Add("conta", "conta")
            tableMapping.ColumnMappings.Add("codTipP", "codTipP")
            tableMapping.ColumnMappings.Add("tipoP", "tipoP")
            tableMapping.ColumnMappings.Add("codPagD", "codPagD")
            tableMapping.ColumnMappings.Add("fecPago", "fecPago")
            tableMapping.ColumnMappings.Add("pagoDet", "pagoDet")
            tableMapping.ColumnMappings.Add("codMon1", "codMon1")
            tableMapping.ColumnMappings.Add("moneda1", "moneda1")
            tableMapping.ColumnMappings.Add("simbolo1", "simbolo1")
            tableMapping.ColumnMappings.Add("montoPago", "montoPago")
            tableMapping.ColumnMappings.Add("soliEst", "soliEst")
            tableMapping.ColumnMappings.Add("gereEst", "gereEst")
            tableMapping.ColumnMappings.Add("tesoEst", "tesoEst")
            tableMapping.ColumnMappings.Add("contaEst", "contaEst")
            tableMapping.ColumnMappings.Add("nroP", "nroP")
            tableMapping.ColumnMappings.Add("clasif", "clasif")
            tableMapping.ColumnMappings.Add("montoD", "montoD")
            tableMapping.ColumnMappings.Add("codBan", "codBan")
            tableMapping.ColumnMappings.Add("bancoPago", "bancoPago")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=PROGRAMADORUNO;Initial Catalog=BD_ConstrucMech;User ID=mech;Password="& _ 
                "mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select idOP,nro,fecDes,codMon,moneda,simbolo,monto,montoDet,montoDif,estado,codig"& _ 
                "o,obra,codIde,razon,ruc,fono,email,banco,nroCta,nroDet,datoReq,factCheck,faCheck"& _ 
                ",bolCheck,boCheck,guiaCheck,guCheck,vouCheck,voCheck,vouDCheck,voDCheck,reciChec"& _ 
                "k,reCheck,otroCheck,descOtro,otCheck,nroConfor,fecEnt,hist,soli,gere,teso,conta,"& _ 
                "codTipP,tipoP,codPagD,fecPago,pagoDet,codMon1,moneda1,simbolo1,montoPago,soliEst"& _ 
                ",gereEst,tesoEst,contaEst,nroP,clasif,montoD,codBan,bancoPago from VOrdenDesembo"& _ 
                "lsoImprimir where idOP=@id"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "idOP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VOrdenDesembolsoImprimirDataTable, ByVal id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id As Integer) As DataSetAlmacen.VOrdenDesembolsoImprimirDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            Dim dataTable As DataSetAlmacen.VOrdenDesembolsoImprimirDataTable = New DataSetAlmacen.VOrdenDesembolsoImprimirDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VKardexTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VKardex"
            tableMapping.ColumnMappings.Add("nroNota", "nroNota")
            tableMapping.ColumnMappings.Add("tipo", "tipo")
            tableMapping.ColumnMappings.Add("fecha", "fecha")
            tableMapping.ColumnMappings.Add("material", "material")
            tableMapping.ColumnMappings.Add("cantEnt", "cantEnt")
            tableMapping.ColumnMappings.Add("preUniEnt", "preUniEnt")
            tableMapping.ColumnMappings.Add("cantSal", "cantSal")
            tableMapping.ColumnMappings.Add("preUniSal", "preUniSal")
            tableMapping.ColumnMappings.Add("saldo", "saldo")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("nroGuia", "nroGuia")
            tableMapping.ColumnMappings.Add("nroDoc", "nroDoc")
            tableMapping.ColumnMappings.Add("otroDoc", "otroDoc")
            tableMapping.ColumnMappings.Add("ubicacion", "ubicacion")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("nom", "nom")
            tableMapping.ColumnMappings.Add("obs", "obs")
            tableMapping.ColumnMappings.Add("codMat", "codMat")
            tableMapping.ColumnMappings.Add("idMU", "idMU")
            tableMapping.ColumnMappings.Add("codUbi", "codUbi")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("codGuia", "codGuia")
            tableMapping.ColumnMappings.Add("codDoc", "codDoc")
            tableMapping.ColumnMappings.Add("codTrans", "codTrans")
            tableMapping.ColumnMappings.Add("codPers", "codPers")
            tableMapping.ColumnMappings.Add("codSal", "codSal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=PROGRAMADORUNO;Initial Catalog=BD_ConstrucMech;User ID=mech;Password="& _ 
                "mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select nroNota,tipo,fecha,material,cantEnt,preUniEnt,cantSal,preUniSal,saldo,unid"& _ 
                "ad,nroGuia,nroDoc,otroDoc,ubicacion,nombre,nom,obs,codMat,idMU,codUbi,codigo,cod"& _ 
                "Guia,codDoc,codTrans,codPers,codSal from VKardex where codMat=@codMat and codUbi"& _ 
                "=@codUbi"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codMat", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "codMat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codUbi", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "codUbi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VKardexDataTable, ByVal codMat As Integer, ByVal codUbi As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codMat,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(codUbi,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codMat As Integer, ByVal codUbi As Integer) As DataSetAlmacen.VKardexDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codMat,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(codUbi,Integer)
            Dim dataTable As DataSetAlmacen.VKardexDataTable = New DataSetAlmacen.VKardexDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VOrdenDetOrdenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VOrdenDetOrden"
            tableMapping.ColumnMappings.Add("codDetO", "codDetO")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("fecOrden", "fecOrden")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("atiendeCom", "atiendeCom")
            tableMapping.ColumnMappings.Add("celAti", "celAti")
            tableMapping.ColumnMappings.Add("fonos", "fonos")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("nomRem", "nomRem")
            tableMapping.ColumnMappings.Add("fono", "fono")
            tableMapping.ColumnMappings.Add("emaRem", "emaRem")
            tableMapping.ColumnMappings.Add("transfe", "transfe")
            tableMapping.ColumnMappings.Add("plazoEnt", "plazoEnt")
            tableMapping.ColumnMappings.Add("forma", "forma")
            tableMapping.ColumnMappings.Add("lugarEnt", "lugarEnt")
            tableMapping.ColumnMappings.Add("igv", "igv")
            tableMapping.ColumnMappings.Add("calIGV", "calIGV")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("lugar", "lugar")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("nomAte", "nomAte")
            tableMapping.ColumnMappings.Add("obsFac", "obsFac")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("material", "material")
            tableMapping.ColumnMappings.Add("precio", "precio")
            tableMapping.ColumnMappings.Add("subTotal", "subTotal")
            tableMapping.ColumnMappings.Add("codMon", "codMon")
            tableMapping.ColumnMappings.Add("moneda", "moneda")
            tableMapping.ColumnMappings.Add("simbolo", "simbolo")
            tableMapping.ColumnMappings.Add("nroProf", "nroProf")
            tableMapping.ColumnMappings.Add("trans", "trans")
            tableMapping.ColumnMappings.Add("rucT", "rucT")
            tableMapping.ColumnMappings.Add("dirT", "dirT")
            tableMapping.ColumnMappings.Add("fonoT", "fonoT")
            tableMapping.ColumnMappings.Add("contacto", "contacto")
            tableMapping.ColumnMappings.Add("nota", "nota")
            tableMapping.ColumnMappings.Add("cuentaBan", "cuentaBan")
            tableMapping.ColumnMappings.Add("cuentaDet", "cuentaDet")
            tableMapping.ColumnMappings.Add("dni", "dni")
            tableMapping.ColumnMappings.Add("fonoAte", "fonoAte")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=sv32.dbsqlserver.com,8888;Initial Catalog=BD_ConstrucMech;User ID=mec"& _ 
                "h;Password=mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select codDetO,nro,fecOrden,razon,ruc,atiendeCom,celAti,fonos,email,nomRem,fono,e"& _ 
                "maRem,transfe,plazoEnt,forma,lugarEnt,igv,calIGV,codigo,lugar,nombre,nomAte,obsF"& _ 
                "ac,cant,unidad,material,precio,subTotal,codMon,moneda,simbolo,nroProf,trans,rucT"& _ 
                ",dirT,fonoT,contacto,nota,cuentaBan,cuentaDet,dni,fonoAte from VOrdenDetOrden wh"& _ 
                "ere nroOrden=@nro"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nroOrden", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VOrdenDetOrdenDataTable, ByVal nro As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nro,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal nro As Integer) As DataSetAlmacen.VOrdenDetOrdenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(nro,Integer)
            Dim dataTable As DataSetAlmacen.VOrdenDetOrdenDataTable = New DataSetAlmacen.VOrdenDetOrdenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VGuiaDetGuiaETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VGuiaDetGuiaE"
            tableMapping.ColumnMappings.Add("codGuiaE", "codGuiaE")
            tableMapping.ColumnMappings.Add("nroGuia", "nroGuia")
            tableMapping.ColumnMappings.Add("fecIni", "fecIni")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("almOri", "almOri")
            tableMapping.ColumnMappings.Add("partida", "partida")
            tableMapping.ColumnMappings.Add("almDes", "almDes")
            tableMapping.ColumnMappings.Add("llegada", "llegada")
            tableMapping.ColumnMappings.Add("empresa", "empresa")
            tableMapping.ColumnMappings.Add("rucEmp", "rucEmp")
            tableMapping.ColumnMappings.Add("marcaNro", "marcaNro")
            tableMapping.ColumnMappings.Add("nroConst", "nroConst")
            tableMapping.ColumnMappings.Add("nroLic", "nroLic")
            tableMapping.ColumnMappings.Add("motivo", "motivo")
            tableMapping.ColumnMappings.Add("nroFact", "nroFact")
            tableMapping.ColumnMappings.Add("obs", "obs")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("descrip", "descrip")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("peso", "peso")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.softwareMech.My.MySettings.Default.BD_ConstrucMechConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select codGuiaE,nroGuia,fecIni,razon,ruc,almOri,partida,almDes,llegada,empresa,ru"& _ 
                "cEmp,marcaNro,nroConst,nroLic,motivo,nroFact,obs,codigo,cant,descrip,unidad,peso"& _ 
                " from VGuiaDetGuiaE where codGuiaE=@codGuia"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codGuia", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "codGuiaE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VGuiaDetGuiaEDataTable, ByVal codGuia As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codGuia,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codGuia As Integer) As DataSetAlmacen.VGuiaDetGuiaEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codGuia,Integer)
            Dim dataTable As DataSetAlmacen.VGuiaDetGuiaEDataTable = New DataSetAlmacen.VGuiaDetGuiaEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VCotDetCotTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VCotDetCot"
            tableMapping.ColumnMappings.Add("codDetC", "codDetC")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("fecCot", "fecCot")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("atencion", "atencion")
            tableMapping.ColumnMappings.Add("celRpm", "celRpm")
            tableMapping.ColumnMappings.Add("fonos", "fonos")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("nomRem", "nomRem")
            tableMapping.ColumnMappings.Add("fono", "fono")
            tableMapping.ColumnMappings.Add("emaRem", "emaRem")
            tableMapping.ColumnMappings.Add("tiempoVig", "tiempoVig")
            tableMapping.ColumnMappings.Add("plazo", "plazo")
            tableMapping.ColumnMappings.Add("forma", "forma")
            tableMapping.ColumnMappings.Add("lugarEnt", "lugarEnt")
            tableMapping.ColumnMappings.Add("incluir", "incluir")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("lugar", "lugar")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("nomSol", "nomSol")
            tableMapping.ColumnMappings.Add("obs", "obs")
            tableMapping.ColumnMappings.Add("codGruC", "codGruC")
            tableMapping.ColumnMappings.Add("descrip", "descrip")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("material", "material")
            tableMapping.ColumnMappings.Add("precio", "precio")
            tableMapping.ColumnMappings.Add("subTotal", "subTotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=sv32.dbsqlserver.com,8888;Initial Catalog=BD_ConstrucMech;User ID=mec"& _ 
                "h;Password=mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select codDetC,nro,fecCot,razon,ruc,atencion,celRpm,fonos,email,nomRem,fono,emaRe"& _ 
                "m,tiempoVig,plazo,forma,lugarEnt,incluir,codigo,lugar,nombre,nomSol,obs,codGruC,"& _ 
                "descrip,cant,unidad,material,precio,subTotal from VCotDetCot where codCot=@codC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codC", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "codCot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VCotDetCotDataTable, ByVal codC As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codC,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codC As Integer) As DataSetAlmacen.VCotDetCotDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(codC,Integer)
            Dim dataTable As DataSetAlmacen.VCotDetCotDataTable = New DataSetAlmacen.VCotDetCotDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VDetSolCajaImprimirTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VDetSolCajaImprimir"
            tableMapping.ColumnMappings.Add("codDetSol", "codDetSol")
            tableMapping.ColumnMappings.Add("codSC", "codSC")
            tableMapping.ColumnMappings.Add("nomSede", "nomSede")
            tableMapping.ColumnMappings.Add("nomObra", "nomObra")
            tableMapping.ColumnMappings.Add("nomSol", "nomSol")
            tableMapping.ColumnMappings.Add("fechaSol", "fechaSol")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("montoSol", "montoSol")
            tableMapping.ColumnMappings.Add("imprevisto", "imprevisto")
            tableMapping.ColumnMappings.Add("salAnt", "salAnt")
            tableMapping.ColumnMappings.Add("cant1", "cant1")
            tableMapping.ColumnMappings.Add("uniMed", "uniMed")
            tableMapping.ColumnMappings.Add("insumo", "insumo")
            tableMapping.ColumnMappings.Add("prec1", "prec1")
            tableMapping.ColumnMappings.Add("totPar", "totPar")
            tableMapping.ColumnMappings.Add("comp", "comp")
            tableMapping.ColumnMappings.Add("obsSol", "obsSol")
            tableMapping.ColumnMappings.Add("estApro", "estApro")
            tableMapping.ColumnMappings.Add("obsApro", "obsApro")
            tableMapping.ColumnMappings.Add("areaM", "areaM")
            tableMapping.ColumnMappings.Add("tipoM", "tipoM")
            tableMapping.ColumnMappings.Add("ingre", "ingre")
            tableMapping.ColumnMappings.Add("codAreaM", "codAreaM")
            tableMapping.ColumnMappings.Add("codTipM", "codTipM")
            tableMapping.ColumnMappings.Add("codMat", "codMat")
            tableMapping.ColumnMappings.Add("compCheck", "compCheck")
            tableMapping.ColumnMappings.Add("estSol", "estSol")
            tableMapping.ColumnMappings.Add("ingreso", "ingreso")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=LAPTOPRAS;Initial Catalog=BD_ConstrucMech;User ID=mech;Password=mechc"& _ 
                "usco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select codDetSol,codSC,nomSede,nomObra,nomSol,fechaSol,nro,montoSol,imprevisto,sa"& _ 
                "lAnt,cant1,uniMed,insumo,prec1,totPar,comp,obsSol,estApro,obsApro,areaM,tipoM,in"& _ 
                "gre,codAreaM,codTipM,codMat,compCheck,estSol,ingreso from VDetSolCajaImprimir wh"& _ 
                "ere codSC=@cod and ingreso=@ing"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "codSC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ing", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ingreso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VDetSolCajaImprimirDataTable, ByVal cod As Integer, ByVal ing As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(cod,Integer)
            If (ing.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ing.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Integer, ByVal ing As Global.System.Nullable(Of Integer)) As DataSetAlmacen.VDetSolCajaImprimirDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(cod,Integer)
            If (ing.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ing.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAlmacen.VDetSolCajaImprimirDataTable = New DataSetAlmacen.VDetSolCajaImprimirDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vStockAlmacen1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vStockAlmacen1"
            tableMapping.ColumnMappings.Add("material", "material")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("tipoM", "tipoM")
            tableMapping.ColumnMappings.Add("stock", "stock")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=sv32.dbsqlserver.com,8888;Initial Catalog=BD_ConstrucMech;User ID=mec"& _ 
                "h;Password=mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select material,unidad,tipoM,stock from vStockAlmacen where codUbi = @codUbi"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codUbi", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "codUbi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.vStockAlmacen1DataTable, ByVal codUbi As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codUbi.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(codUbi.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codUbi As Global.System.Nullable(Of Integer)) As DataSetAlmacen.vStockAlmacen1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codUbi.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(codUbi.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetAlmacen.vStockAlmacen1DataTable = New DataSetAlmacen.vStockAlmacen1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VGastosPorDiaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VGastosPorDia"
            tableMapping.ColumnMappings.Add("fecPago", "fecPago")
            tableMapping.ColumnMappings.Add("nroOperacion", "nroOperacion")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("simbolo", "simbolo")
            tableMapping.ColumnMappings.Add("montoPago", "montoPago")
            tableMapping.ColumnMappings.Add("montoD", "montoD")
            tableMapping.ColumnMappings.Add("banco", "banco")
            tableMapping.ColumnMappings.Add("nroCue", "nroCue")
            tableMapping.ColumnMappings.Add("nroDes", "nroDes")
            tableMapping.ColumnMappings.Add("codBan", "codBan")
            tableMapping.ColumnMappings.Add("codMon", "codMon")
            tableMapping.ColumnMappings.Add("idCue", "idCue")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("concepto", "concepto")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=sv32.dbsqlserver.com,8888;Initial Catalog=BD_ConstrucMech;User ID=mec"& _ 
                "h;Password=mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select fecPago,nroOperacion,ruc,razon,simbolo,montoPago,montoD,banco,nroCue,(seri"& _ 
                "e +'-'+cast(nroDes as varchar)) nroDes,codBan,codMon,idCue,codigo,nombre,concept"& _ 
                "o from VGastosPorDia where fecPago between @fecIni and @fecFin"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecIni", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "fecPago", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecFin", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "fecPago", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAlmacen.VGastosPorDiaDataTable, ByVal fecIni As String, ByVal fecFin As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (fecIni Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(fecIni,String)
            End If
            If (fecFin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fecFin,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal fecIni As String, ByVal fecFin As String) As DataSetAlmacen.VGastosPorDiaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (fecIni Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(fecIni,String)
            End If
            If (fecFin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fecFin,String)
            End If
            Dim dataTable As DataSetAlmacen.VGastosPorDiaDataTable = New DataSetAlmacen.VGastosPorDiaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetAlmacen, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetAlmacen, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetAlmacen, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetAlmacen) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
