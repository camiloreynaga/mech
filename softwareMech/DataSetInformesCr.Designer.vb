'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4927
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetInformesCr"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetInformesCr
    Inherits Global.System.Data.DataSet
    
    Private tableVOrdenDesemGerencia1 As VOrdenDesemGerencia1DataTable
    
    Private tableVGastosPorDia As VGastosPorDiaDataTable
    
    Private tableDatosAprobacionDesem As DatosAprobacionDesemDataTable
    
    Private tableDatosKardex As DatosKardexDataTable
    
    Private tableDatosGastosDia As DatosGastosDiaDataTable
    
    Private tableDatosSeguimientoDesem As DatosSeguimientoDesemDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VOrdenDesemGerencia1")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDesemGerencia1DataTable(ds.Tables("VOrdenDesemGerencia1")))
            End If
            If (Not (ds.Tables("VGastosPorDia")) Is Nothing) Then
                MyBase.Tables.Add(New VGastosPorDiaDataTable(ds.Tables("VGastosPorDia")))
            End If
            If (Not (ds.Tables("DatosAprobacionDesem")) Is Nothing) Then
                MyBase.Tables.Add(New DatosAprobacionDesemDataTable(ds.Tables("DatosAprobacionDesem")))
            End If
            If (Not (ds.Tables("DatosKardex")) Is Nothing) Then
                MyBase.Tables.Add(New DatosKardexDataTable(ds.Tables("DatosKardex")))
            End If
            If (Not (ds.Tables("DatosGastosDia")) Is Nothing) Then
                MyBase.Tables.Add(New DatosGastosDiaDataTable(ds.Tables("DatosGastosDia")))
            End If
            If (Not (ds.Tables("DatosSeguimientoDesem")) Is Nothing) Then
                MyBase.Tables.Add(New DatosSeguimientoDesemDataTable(ds.Tables("DatosSeguimientoDesem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VOrdenDesemGerencia1() As VOrdenDesemGerencia1DataTable
        Get
            Return Me.tableVOrdenDesemGerencia1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VGastosPorDia() As VGastosPorDiaDataTable
        Get
            Return Me.tableVGastosPorDia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosAprobacionDesem() As DatosAprobacionDesemDataTable
        Get
            Return Me.tableDatosAprobacionDesem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosKardex() As DatosKardexDataTable
        Get
            Return Me.tableDatosKardex
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosGastosDia() As DatosGastosDiaDataTable
        Get
            Return Me.tableDatosGastosDia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosSeguimientoDesem() As DatosSeguimientoDesemDataTable
        Get
            Return Me.tableDatosSeguimientoDesem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetInformesCr = CType(MyBase.Clone,DataSetInformesCr)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VOrdenDesemGerencia1")) Is Nothing) Then
                MyBase.Tables.Add(New VOrdenDesemGerencia1DataTable(ds.Tables("VOrdenDesemGerencia1")))
            End If
            If (Not (ds.Tables("VGastosPorDia")) Is Nothing) Then
                MyBase.Tables.Add(New VGastosPorDiaDataTable(ds.Tables("VGastosPorDia")))
            End If
            If (Not (ds.Tables("DatosAprobacionDesem")) Is Nothing) Then
                MyBase.Tables.Add(New DatosAprobacionDesemDataTable(ds.Tables("DatosAprobacionDesem")))
            End If
            If (Not (ds.Tables("DatosKardex")) Is Nothing) Then
                MyBase.Tables.Add(New DatosKardexDataTable(ds.Tables("DatosKardex")))
            End If
            If (Not (ds.Tables("DatosGastosDia")) Is Nothing) Then
                MyBase.Tables.Add(New DatosGastosDiaDataTable(ds.Tables("DatosGastosDia")))
            End If
            If (Not (ds.Tables("DatosSeguimientoDesem")) Is Nothing) Then
                MyBase.Tables.Add(New DatosSeguimientoDesemDataTable(ds.Tables("DatosSeguimientoDesem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVOrdenDesemGerencia1 = CType(MyBase.Tables("VOrdenDesemGerencia1"),VOrdenDesemGerencia1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableVOrdenDesemGerencia1) Is Nothing) Then
                Me.tableVOrdenDesemGerencia1.InitVars
            End If
        End If
        Me.tableVGastosPorDia = CType(MyBase.Tables("VGastosPorDia"),VGastosPorDiaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVGastosPorDia) Is Nothing) Then
                Me.tableVGastosPorDia.InitVars
            End If
        End If
        Me.tableDatosAprobacionDesem = CType(MyBase.Tables("DatosAprobacionDesem"),DatosAprobacionDesemDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatosAprobacionDesem) Is Nothing) Then
                Me.tableDatosAprobacionDesem.InitVars
            End If
        End If
        Me.tableDatosKardex = CType(MyBase.Tables("DatosKardex"),DatosKardexDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatosKardex) Is Nothing) Then
                Me.tableDatosKardex.InitVars
            End If
        End If
        Me.tableDatosGastosDia = CType(MyBase.Tables("DatosGastosDia"),DatosGastosDiaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatosGastosDia) Is Nothing) Then
                Me.tableDatosGastosDia.InitVars
            End If
        End If
        Me.tableDatosSeguimientoDesem = CType(MyBase.Tables("DatosSeguimientoDesem"),DatosSeguimientoDesemDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatosSeguimientoDesem) Is Nothing) Then
                Me.tableDatosSeguimientoDesem.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetInformesCr"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetInformesCr.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVOrdenDesemGerencia1 = New VOrdenDesemGerencia1DataTable
        MyBase.Tables.Add(Me.tableVOrdenDesemGerencia1)
        Me.tableVGastosPorDia = New VGastosPorDiaDataTable
        MyBase.Tables.Add(Me.tableVGastosPorDia)
        Me.tableDatosAprobacionDesem = New DatosAprobacionDesemDataTable
        MyBase.Tables.Add(Me.tableDatosAprobacionDesem)
        Me.tableDatosKardex = New DatosKardexDataTable
        MyBase.Tables.Add(Me.tableDatosKardex)
        Me.tableDatosGastosDia = New DatosGastosDiaDataTable
        MyBase.Tables.Add(Me.tableDatosGastosDia)
        Me.tableDatosSeguimientoDesem = New DatosSeguimientoDesemDataTable
        MyBase.Tables.Add(Me.tableDatosSeguimientoDesem)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVOrdenDesemGerencia1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVGastosPorDia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatosAprobacionDesem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatosKardex() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatosGastosDia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatosSeguimientoDesem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetInformesCr = New DataSetInformesCr
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VOrdenDesemGerencia1RowChangeEventHandler(ByVal sender As Object, ByVal e As VOrdenDesemGerencia1RowChangeEvent)
    
    Public Delegate Sub VGastosPorDiaRowChangeEventHandler(ByVal sender As Object, ByVal e As VGastosPorDiaRowChangeEvent)
    
    Public Delegate Sub DatosAprobacionDesemRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosAprobacionDesemRowChangeEvent)
    
    Public Delegate Sub DatosKardexRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosKardexRowChangeEvent)
    
    Public Delegate Sub DatosGastosDiaRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosGastosDiaRowChangeEvent)
    
    Public Delegate Sub DatosSeguimientoDesemRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosSeguimientoDesemRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VOrdenDesemGerencia1DataTable
        Inherits Global.System.Data.TypedTableBase(Of VOrdenDesemGerencia1Row)
        
        Private columnidOP As Global.System.Data.DataColumn
        
        Private columnestApro As Global.System.Data.DataColumn
        
        Private columnfecDes As Global.System.Data.DataColumn
        
        Private columnserie As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnnom As Global.System.Data.DataColumn
        
        Private columnobserDesem As Global.System.Data.DataColumn
        
        Private columnest As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnhist As Global.System.Data.DataColumn
        
        Private columnestDesem As Global.System.Data.DataColumn
        
        Private columncodPersDes As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        Private columndatoReq As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VOrdenDesemGerencia1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estAproColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestApro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obserDesemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobserDesem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property histColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhist
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estDesemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestDesem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPersDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPersDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datoReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatoReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VOrdenDesemGerencia1Row
            Get
                Return CType(Me.Rows(index),VOrdenDesemGerencia1Row)
            End Get
        End Property
        
        Public Event VOrdenDesemGerencia1RowChanging As VOrdenDesemGerencia1RowChangeEventHandler
        
        Public Event VOrdenDesemGerencia1RowChanged As VOrdenDesemGerencia1RowChangeEventHandler
        
        Public Event VOrdenDesemGerencia1RowDeleting As VOrdenDesemGerencia1RowChangeEventHandler
        
        Public Event VOrdenDesemGerencia1RowDeleted As VOrdenDesemGerencia1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVOrdenDesemGerencia1Row(ByVal row As VOrdenDesemGerencia1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVOrdenDesemGerencia1Row( _
                    ByVal idOP As Integer,  _
                    ByVal estApro As String,  _
                    ByVal fecDes As Date,  _
                    ByVal serie As String,  _
                    ByVal nro As String,  _
                    ByVal simbolo As String,  _
                    ByVal monto As Decimal,  _
                    ByVal razon As String,  _
                    ByVal nom As String,  _
                    ByVal obserDesem As String,  _
                    ByVal est As String,  _
                    ByVal nombre As String,  _
                    ByVal hist As String,  _
                    ByVal estDesem As Integer,  _
                    ByVal codPersDes As Integer,  _
                    ByVal estado As Integer,  _
                    ByVal codMon As Integer,  _
                    ByVal datoReq As String) As VOrdenDesemGerencia1Row
            Dim rowVOrdenDesemGerencia1Row As VOrdenDesemGerencia1Row = CType(Me.NewRow,VOrdenDesemGerencia1Row)
            Dim columnValuesArray() As Object = New Object() {idOP, estApro, fecDes, serie, nro, simbolo, monto, razon, nom, obserDesem, est, nombre, hist, estDesem, codPersDes, estado, codMon, datoReq}
            rowVOrdenDesemGerencia1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowVOrdenDesemGerencia1Row)
            Return rowVOrdenDesemGerencia1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VOrdenDesemGerencia1DataTable = CType(MyBase.Clone,VOrdenDesemGerencia1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VOrdenDesemGerencia1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidOP = MyBase.Columns("idOP")
            Me.columnestApro = MyBase.Columns("estApro")
            Me.columnfecDes = MyBase.Columns("fecDes")
            Me.columnserie = MyBase.Columns("serie")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnnom = MyBase.Columns("nom")
            Me.columnobserDesem = MyBase.Columns("obserDesem")
            Me.columnest = MyBase.Columns("est")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnhist = MyBase.Columns("hist")
            Me.columnestDesem = MyBase.Columns("estDesem")
            Me.columncodPersDes = MyBase.Columns("codPersDes")
            Me.columnestado = MyBase.Columns("estado")
            Me.columncodMon = MyBase.Columns("codMon")
            Me.columndatoReq = MyBase.Columns("datoReq")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidOP = New Global.System.Data.DataColumn("idOP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidOP)
            Me.columnestApro = New Global.System.Data.DataColumn("estApro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestApro)
            Me.columnfecDes = New Global.System.Data.DataColumn("fecDes", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecDes)
            Me.columnserie = New Global.System.Data.DataColumn("serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserie)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnnom = New Global.System.Data.DataColumn("nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnom)
            Me.columnobserDesem = New Global.System.Data.DataColumn("obserDesem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobserDesem)
            Me.columnest = New Global.System.Data.DataColumn("est", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnest)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnhist = New Global.System.Data.DataColumn("hist", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhist)
            Me.columnestDesem = New Global.System.Data.DataColumn("estDesem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestDesem)
            Me.columncodPersDes = New Global.System.Data.DataColumn("codPersDes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPersDes)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
            Me.columndatoReq = New Global.System.Data.DataColumn("datoReq", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatoReq)
            Me.columnidOP.AllowDBNull = false
            Me.columnestApro.ReadOnly = true
            Me.columnestApro.MaxLength = 9
            Me.columnserie.MaxLength = 5
            Me.columnnro.ReadOnly = true
            Me.columnnro.MaxLength = 13
            Me.columnsimbolo.MaxLength = 10
            Me.columnrazon.MaxLength = 60
            Me.columnnom.ReadOnly = true
            Me.columnnom.MaxLength = 51
            Me.columnobserDesem.MaxLength = 100
            Me.columnest.ReadOnly = true
            Me.columnest.MaxLength = 9
            Me.columnnombre.MaxLength = 100
            Me.columnhist.MaxLength = 200
            Me.columnestDesem.ReadOnly = true
            Me.columncodPersDes.ReadOnly = true
            Me.columncodMon.AllowDBNull = false
            Me.columndatoReq.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVOrdenDesemGerencia1Row() As VOrdenDesemGerencia1Row
            Return CType(Me.NewRow,VOrdenDesemGerencia1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VOrdenDesemGerencia1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VOrdenDesemGerencia1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VOrdenDesemGerencia1RowChangedEvent) Is Nothing) Then
                RaiseEvent VOrdenDesemGerencia1RowChanged(Me, New VOrdenDesemGerencia1RowChangeEvent(CType(e.Row,VOrdenDesemGerencia1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VOrdenDesemGerencia1RowChangingEvent) Is Nothing) Then
                RaiseEvent VOrdenDesemGerencia1RowChanging(Me, New VOrdenDesemGerencia1RowChangeEvent(CType(e.Row,VOrdenDesemGerencia1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VOrdenDesemGerencia1RowDeletedEvent) Is Nothing) Then
                RaiseEvent VOrdenDesemGerencia1RowDeleted(Me, New VOrdenDesemGerencia1RowChangeEvent(CType(e.Row,VOrdenDesemGerencia1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VOrdenDesemGerencia1RowDeletingEvent) Is Nothing) Then
                RaiseEvent VOrdenDesemGerencia1RowDeleting(Me, New VOrdenDesemGerencia1RowChangeEvent(CType(e.Row,VOrdenDesemGerencia1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVOrdenDesemGerencia1Row(ByVal row As VOrdenDesemGerencia1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetInformesCr = New DataSetInformesCr
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VOrdenDesemGerencia1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VGastosPorDiaDataTable
        Inherits Global.System.Data.TypedTableBase(Of VGastosPorDiaRow)
        
        Private columnfecPago As Global.System.Data.DataColumn
        
        Private columnnroOperacion As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnmontoPago As Global.System.Data.DataColumn
        
        Private columnmontoD As Global.System.Data.DataColumn
        
        Private columnbanco As Global.System.Data.DataColumn
        
        Private columnnroCue As Global.System.Data.DataColumn
        
        Private columnnroDes As Global.System.Data.DataColumn
        
        Private columncodBan As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        Private columnidCue As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnconcepto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VGastosPorDia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroCueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroCue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codBanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodBan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idCueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidCue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VGastosPorDiaRow
            Get
                Return CType(Me.Rows(index),VGastosPorDiaRow)
            End Get
        End Property
        
        Public Event VGastosPorDiaRowChanging As VGastosPorDiaRowChangeEventHandler
        
        Public Event VGastosPorDiaRowChanged As VGastosPorDiaRowChangeEventHandler
        
        Public Event VGastosPorDiaRowDeleting As VGastosPorDiaRowChangeEventHandler
        
        Public Event VGastosPorDiaRowDeleted As VGastosPorDiaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVGastosPorDiaRow(ByVal row As VGastosPorDiaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVGastosPorDiaRow( _
                    ByVal fecPago As Date,  _
                    ByVal nroOperacion As String,  _
                    ByVal ruc As String,  _
                    ByVal razon As String,  _
                    ByVal simbolo As String,  _
                    ByVal montoPago As Decimal,  _
                    ByVal montoD As Decimal,  _
                    ByVal banco As String,  _
                    ByVal nroCue As String,  _
                    ByVal nroDes As String,  _
                    ByVal codBan As Integer,  _
                    ByVal codMon As Integer,  _
                    ByVal idCue As Integer,  _
                    ByVal codigo As String,  _
                    ByVal nombre As String,  _
                    ByVal concepto As String) As VGastosPorDiaRow
            Dim rowVGastosPorDiaRow As VGastosPorDiaRow = CType(Me.NewRow,VGastosPorDiaRow)
            Dim columnValuesArray() As Object = New Object() {fecPago, nroOperacion, ruc, razon, simbolo, montoPago, montoD, banco, nroCue, nroDes, codBan, codMon, idCue, codigo, nombre, concepto}
            rowVGastosPorDiaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVGastosPorDiaRow)
            Return rowVGastosPorDiaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VGastosPorDiaDataTable = CType(MyBase.Clone,VGastosPorDiaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VGastosPorDiaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfecPago = MyBase.Columns("fecPago")
            Me.columnnroOperacion = MyBase.Columns("nroOperacion")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnmontoPago = MyBase.Columns("montoPago")
            Me.columnmontoD = MyBase.Columns("montoD")
            Me.columnbanco = MyBase.Columns("banco")
            Me.columnnroCue = MyBase.Columns("nroCue")
            Me.columnnroDes = MyBase.Columns("nroDes")
            Me.columncodBan = MyBase.Columns("codBan")
            Me.columncodMon = MyBase.Columns("codMon")
            Me.columnidCue = MyBase.Columns("idCue")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnconcepto = MyBase.Columns("concepto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfecPago = New Global.System.Data.DataColumn("fecPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecPago)
            Me.columnnroOperacion = New Global.System.Data.DataColumn("nroOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroOperacion)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnmontoPago = New Global.System.Data.DataColumn("montoPago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoPago)
            Me.columnmontoD = New Global.System.Data.DataColumn("montoD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoD)
            Me.columnbanco = New Global.System.Data.DataColumn("banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbanco)
            Me.columnnroCue = New Global.System.Data.DataColumn("nroCue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroCue)
            Me.columnnroDes = New Global.System.Data.DataColumn("nroDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroDes)
            Me.columncodBan = New Global.System.Data.DataColumn("codBan", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodBan)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
            Me.columnidCue = New Global.System.Data.DataColumn("idCue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidCue)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnconcepto = New Global.System.Data.DataColumn("concepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconcepto)
            Me.columnnroOperacion.MaxLength = 20
            Me.columnruc.MaxLength = 11
            Me.columnrazon.MaxLength = 60
            Me.columnsimbolo.MaxLength = 10
            Me.columnbanco.MaxLength = 40
            Me.columnnroCue.MaxLength = 60
            Me.columnnroDes.ReadOnly = true
            Me.columnnroDes.MaxLength = 36
            Me.columncodBan.AllowDBNull = false
            Me.columncodMon.AllowDBNull = false
            Me.columnidCue.AllowDBNull = false
            Me.columncodigo.MaxLength = 10
            Me.columnnombre.MaxLength = 100
            Me.columnconcepto.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVGastosPorDiaRow() As VGastosPorDiaRow
            Return CType(Me.NewRow,VGastosPorDiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VGastosPorDiaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VGastosPorDiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VGastosPorDiaRowChangedEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowChanged(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VGastosPorDiaRowChangingEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowChanging(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VGastosPorDiaRowDeletedEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowDeleted(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VGastosPorDiaRowDeletingEvent) Is Nothing) Then
                RaiseEvent VGastosPorDiaRowDeleting(Me, New VGastosPorDiaRowChangeEvent(CType(e.Row,VGastosPorDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVGastosPorDiaRow(ByVal row As VGastosPorDiaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetInformesCr = New DataSetInformesCr
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VGastosPorDiaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosAprobacionDesemDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatosAprobacionDesemRow)
        
        Private columnestApro As Global.System.Data.DataColumn
        
        Private columnfecDes As Global.System.Data.DataColumn
        
        Private columnserie As Global.System.Data.DataColumn
        
        Private columnnro As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnnom As Global.System.Data.DataColumn
        
        Private columnobserDesem As Global.System.Data.DataColumn
        
        Private columnest As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnestDesem As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatosAprobacionDesem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estAproColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestApro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obserDesemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobserDesem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estDesemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestDesem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosAprobacionDesemRow
            Get
                Return CType(Me.Rows(index),DatosAprobacionDesemRow)
            End Get
        End Property
        
        Public Event DatosAprobacionDesemRowChanging As DatosAprobacionDesemRowChangeEventHandler
        
        Public Event DatosAprobacionDesemRowChanged As DatosAprobacionDesemRowChangeEventHandler
        
        Public Event DatosAprobacionDesemRowDeleting As DatosAprobacionDesemRowChangeEventHandler
        
        Public Event DatosAprobacionDesemRowDeleted As DatosAprobacionDesemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosAprobacionDesemRow(ByVal row As DatosAprobacionDesemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosAprobacionDesemRow(ByVal estApro As String, ByVal fecDes As String, ByVal serie As String, ByVal nro As String, ByVal simbolo As String, ByVal monto As Decimal, ByVal razon As String, ByVal nom As String, ByVal obserDesem As String, ByVal est As String, ByVal nombre As String, ByVal estDesem As String, ByVal estado As String, ByVal codMon As String) As DatosAprobacionDesemRow
            Dim rowDatosAprobacionDesemRow As DatosAprobacionDesemRow = CType(Me.NewRow,DatosAprobacionDesemRow)
            Dim columnValuesArray() As Object = New Object() {estApro, fecDes, serie, nro, simbolo, monto, razon, nom, obserDesem, est, nombre, estDesem, estado, codMon}
            rowDatosAprobacionDesemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosAprobacionDesemRow)
            Return rowDatosAprobacionDesemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosAprobacionDesemDataTable = CType(MyBase.Clone,DatosAprobacionDesemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosAprobacionDesemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnestApro = MyBase.Columns("estApro")
            Me.columnfecDes = MyBase.Columns("fecDes")
            Me.columnserie = MyBase.Columns("serie")
            Me.columnnro = MyBase.Columns("nro")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnnom = MyBase.Columns("nom")
            Me.columnobserDesem = MyBase.Columns("obserDesem")
            Me.columnest = MyBase.Columns("est")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnestDesem = MyBase.Columns("estDesem")
            Me.columnestado = MyBase.Columns("estado")
            Me.columncodMon = MyBase.Columns("codMon")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnestApro = New Global.System.Data.DataColumn("estApro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestApro)
            Me.columnfecDes = New Global.System.Data.DataColumn("fecDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecDes)
            Me.columnserie = New Global.System.Data.DataColumn("serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserie)
            Me.columnnro = New Global.System.Data.DataColumn("nro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnnom = New Global.System.Data.DataColumn("nom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnom)
            Me.columnobserDesem = New Global.System.Data.DataColumn("obserDesem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobserDesem)
            Me.columnest = New Global.System.Data.DataColumn("est", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnest)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnestDesem = New Global.System.Data.DataColumn("estDesem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestDesem)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosAprobacionDesemRow() As DatosAprobacionDesemRow
            Return CType(Me.NewRow,DatosAprobacionDesemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosAprobacionDesemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosAprobacionDesemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosAprobacionDesemRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosAprobacionDesemRowChanged(Me, New DatosAprobacionDesemRowChangeEvent(CType(e.Row,DatosAprobacionDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosAprobacionDesemRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosAprobacionDesemRowChanging(Me, New DatosAprobacionDesemRowChangeEvent(CType(e.Row,DatosAprobacionDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosAprobacionDesemRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosAprobacionDesemRowDeleted(Me, New DatosAprobacionDesemRowChangeEvent(CType(e.Row,DatosAprobacionDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosAprobacionDesemRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosAprobacionDesemRowDeleting(Me, New DatosAprobacionDesemRowChangeEvent(CType(e.Row,DatosAprobacionDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosAprobacionDesemRow(ByVal row As DatosAprobacionDesemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetInformesCr = New DataSetInformesCr
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosAprobacionDesemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosKardexDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatosKardexRow)
        
        Private columnnroNota As Global.System.Data.DataColumn
        
        Private columntipo As Global.System.Data.DataColumn
        
        Private columnfecha As Global.System.Data.DataColumn
        
        Private columnmaterial As Global.System.Data.DataColumn
        
        Private columncantEnt As Global.System.Data.DataColumn
        
        Private columnpreUniEnt As Global.System.Data.DataColumn
        
        Private columncantSal As Global.System.Data.DataColumn
        
        Private columnpreUniSal As Global.System.Data.DataColumn
        
        Private columnsaldo As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnnroGuia As Global.System.Data.DataColumn
        
        Private columnnroDoc As Global.System.Data.DataColumn
        
        Private columnveri As Global.System.Data.DataColumn
        
        Private columnalmObra As Global.System.Data.DataColumn
        
        Private columnnomObraDes As Global.System.Data.DataColumn
        
        Private columnobs As Global.System.Data.DataColumn
        
        Private columnnomRecibe As Global.System.Data.DataColumn
        
        Private columnprovee As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnusuario As Global.System.Data.DataColumn
        
        Private columncodMat As Global.System.Data.DataColumn
        
        Private columnidMU As Global.System.Data.DataColumn
        
        Private columncodUbi As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columncodGuia As Global.System.Data.DataColumn
        
        Private columncodDoc As Global.System.Data.DataColumn
        
        Private columncodTrans As Global.System.Data.DataColumn
        
        Private columncodPers As Global.System.Data.DataColumn
        
        Private columncodSal As Global.System.Data.DataColumn
        
        Private columnvanET As Global.System.Data.DataColumn
        
        Private columncodUbiDes As Global.System.Data.DataColumn
        
        Private columnubicacion As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columncodUsu As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatosKardex"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncantEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property preUniEntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpreUniEnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantSalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncantSal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property preUniSalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpreUniSal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property veriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnveri
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property almObraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalmObra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomObraDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomObraDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomRecibeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomRecibe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property proveeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprovee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idMUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidMU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codUbiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodUbi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codTransColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodTrans
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codPersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodPers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codSalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodSal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vanETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvanET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codUbiDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodUbiDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ubicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnubicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codUsuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodUsu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosKardexRow
            Get
                Return CType(Me.Rows(index),DatosKardexRow)
            End Get
        End Property
        
        Public Event DatosKardexRowChanging As DatosKardexRowChangeEventHandler
        
        Public Event DatosKardexRowChanged As DatosKardexRowChangeEventHandler
        
        Public Event DatosKardexRowDeleting As DatosKardexRowChangeEventHandler
        
        Public Event DatosKardexRowDeleted As DatosKardexRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosKardexRow(ByVal row As DatosKardexRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosKardexRow( _
                    ByVal nroNota As Integer,  _
                    ByVal tipo As String,  _
                    ByVal fecha As Date,  _
                    ByVal material As String,  _
                    ByVal cantEnt As Decimal,  _
                    ByVal preUniEnt As Decimal,  _
                    ByVal cantSal As Decimal,  _
                    ByVal preUniSal As Decimal,  _
                    ByVal saldo As Decimal,  _
                    ByVal unidad As String,  _
                    ByVal nroGuia As String,  _
                    ByVal nroDoc As String,  _
                    ByVal veri As String,  _
                    ByVal almObra As String,  _
                    ByVal nomObraDes As String,  _
                    ByVal obs As String,  _
                    ByVal nomRecibe As String,  _
                    ByVal provee As String,  _
                    ByVal ruc As String,  _
                    ByVal usuario As String,  _
                    ByVal codMat As Integer,  _
                    ByVal idMU As Integer,  _
                    ByVal codUbi As Integer,  _
                    ByVal codigo As String,  _
                    ByVal codGuia As Integer,  _
                    ByVal codDoc As Integer,  _
                    ByVal codTrans As Integer,  _
                    ByVal codPers As Integer,  _
                    ByVal codSal As Integer,  _
                    ByVal vanET As Integer,  _
                    ByVal codUbiDes As Integer,  _
                    ByVal ubicacion As String,  _
                    ByVal nombre As String,  _
                    ByVal codUsu As Integer) As DatosKardexRow
            Dim rowDatosKardexRow As DatosKardexRow = CType(Me.NewRow,DatosKardexRow)
            Dim columnValuesArray() As Object = New Object() {nroNota, tipo, fecha, material, cantEnt, preUniEnt, cantSal, preUniSal, saldo, unidad, nroGuia, nroDoc, veri, almObra, nomObraDes, obs, nomRecibe, provee, ruc, usuario, codMat, idMU, codUbi, codigo, codGuia, codDoc, codTrans, codPers, codSal, vanET, codUbiDes, ubicacion, nombre, codUsu}
            rowDatosKardexRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosKardexRow)
            Return rowDatosKardexRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosKardexDataTable = CType(MyBase.Clone,DatosKardexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosKardexDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnroNota = MyBase.Columns("nroNota")
            Me.columntipo = MyBase.Columns("tipo")
            Me.columnfecha = MyBase.Columns("fecha")
            Me.columnmaterial = MyBase.Columns("material")
            Me.columncantEnt = MyBase.Columns("cantEnt")
            Me.columnpreUniEnt = MyBase.Columns("preUniEnt")
            Me.columncantSal = MyBase.Columns("cantSal")
            Me.columnpreUniSal = MyBase.Columns("preUniSal")
            Me.columnsaldo = MyBase.Columns("saldo")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnnroGuia = MyBase.Columns("nroGuia")
            Me.columnnroDoc = MyBase.Columns("nroDoc")
            Me.columnveri = MyBase.Columns("veri")
            Me.columnalmObra = MyBase.Columns("almObra")
            Me.columnnomObraDes = MyBase.Columns("nomObraDes")
            Me.columnobs = MyBase.Columns("obs")
            Me.columnnomRecibe = MyBase.Columns("nomRecibe")
            Me.columnprovee = MyBase.Columns("provee")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnusuario = MyBase.Columns("usuario")
            Me.columncodMat = MyBase.Columns("codMat")
            Me.columnidMU = MyBase.Columns("idMU")
            Me.columncodUbi = MyBase.Columns("codUbi")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columncodGuia = MyBase.Columns("codGuia")
            Me.columncodDoc = MyBase.Columns("codDoc")
            Me.columncodTrans = MyBase.Columns("codTrans")
            Me.columncodPers = MyBase.Columns("codPers")
            Me.columncodSal = MyBase.Columns("codSal")
            Me.columnvanET = MyBase.Columns("vanET")
            Me.columncodUbiDes = MyBase.Columns("codUbiDes")
            Me.columnubicacion = MyBase.Columns("ubicacion")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columncodUsu = MyBase.Columns("codUsu")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnroNota = New Global.System.Data.DataColumn("nroNota", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroNota)
            Me.columntipo = New Global.System.Data.DataColumn("tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipo)
            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha)
            Me.columnmaterial = New Global.System.Data.DataColumn("material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaterial)
            Me.columncantEnt = New Global.System.Data.DataColumn("cantEnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantEnt)
            Me.columnpreUniEnt = New Global.System.Data.DataColumn("preUniEnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpreUniEnt)
            Me.columncantSal = New Global.System.Data.DataColumn("cantSal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantSal)
            Me.columnpreUniSal = New Global.System.Data.DataColumn("preUniSal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpreUniSal)
            Me.columnsaldo = New Global.System.Data.DataColumn("saldo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldo)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnnroGuia = New Global.System.Data.DataColumn("nroGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroGuia)
            Me.columnnroDoc = New Global.System.Data.DataColumn("nroDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroDoc)
            Me.columnveri = New Global.System.Data.DataColumn("veri", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnveri)
            Me.columnalmObra = New Global.System.Data.DataColumn("almObra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalmObra)
            Me.columnnomObraDes = New Global.System.Data.DataColumn("nomObraDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomObraDes)
            Me.columnobs = New Global.System.Data.DataColumn("obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs)
            Me.columnnomRecibe = New Global.System.Data.DataColumn("nomRecibe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomRecibe)
            Me.columnprovee = New Global.System.Data.DataColumn("provee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprovee)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnusuario = New Global.System.Data.DataColumn("usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusuario)
            Me.columncodMat = New Global.System.Data.DataColumn("codMat", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMat)
            Me.columnidMU = New Global.System.Data.DataColumn("idMU", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidMU)
            Me.columncodUbi = New Global.System.Data.DataColumn("codUbi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodUbi)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columncodGuia = New Global.System.Data.DataColumn("codGuia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodGuia)
            Me.columncodDoc = New Global.System.Data.DataColumn("codDoc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodDoc)
            Me.columncodTrans = New Global.System.Data.DataColumn("codTrans", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodTrans)
            Me.columncodPers = New Global.System.Data.DataColumn("codPers", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodPers)
            Me.columncodSal = New Global.System.Data.DataColumn("codSal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodSal)
            Me.columnvanET = New Global.System.Data.DataColumn("vanET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvanET)
            Me.columncodUbiDes = New Global.System.Data.DataColumn("codUbiDes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodUbiDes)
            Me.columnubicacion = New Global.System.Data.DataColumn("ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnubicacion)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columncodUsu = New Global.System.Data.DataColumn("codUsu", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodUsu)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosKardexRow() As DatosKardexRow
            Return CType(Me.NewRow,DatosKardexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosKardexRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosKardexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosKardexRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosKardexRowChanged(Me, New DatosKardexRowChangeEvent(CType(e.Row,DatosKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosKardexRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosKardexRowChanging(Me, New DatosKardexRowChangeEvent(CType(e.Row,DatosKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosKardexRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosKardexRowDeleted(Me, New DatosKardexRowChangeEvent(CType(e.Row,DatosKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosKardexRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosKardexRowDeleting(Me, New DatosKardexRowChangeEvent(CType(e.Row,DatosKardexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosKardexRow(ByVal row As DatosKardexRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetInformesCr = New DataSetInformesCr
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosKardexDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosGastosDiaDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatosGastosDiaRow)
        
        Private columnfecPago As Global.System.Data.DataColumn
        
        Private columnnroOperacion As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnrazon As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnmontoPago As Global.System.Data.DataColumn
        
        Private columnmontoD As Global.System.Data.DataColumn
        
        Private columnbanco As Global.System.Data.DataColumn
        
        Private columnnroCue As Global.System.Data.DataColumn
        
        Private columnnroDes As Global.System.Data.DataColumn
        
        Private columncodBan As Global.System.Data.DataColumn
        
        Private columncodMon As Global.System.Data.DataColumn
        
        Private columnidCue As Global.System.Data.DataColumn
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnconcepto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatosGastosDia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroCueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroCue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codBanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodBan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codMonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idCueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidCue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosGastosDiaRow
            Get
                Return CType(Me.Rows(index),DatosGastosDiaRow)
            End Get
        End Property
        
        Public Event DatosGastosDiaRowChanging As DatosGastosDiaRowChangeEventHandler
        
        Public Event DatosGastosDiaRowChanged As DatosGastosDiaRowChangeEventHandler
        
        Public Event DatosGastosDiaRowDeleting As DatosGastosDiaRowChangeEventHandler
        
        Public Event DatosGastosDiaRowDeleted As DatosGastosDiaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosGastosDiaRow(ByVal row As DatosGastosDiaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosGastosDiaRow( _
                    ByVal fecPago As Date,  _
                    ByVal nroOperacion As String,  _
                    ByVal ruc As String,  _
                    ByVal razon As String,  _
                    ByVal simbolo As String,  _
                    ByVal montoPago As Decimal,  _
                    ByVal montoD As Decimal,  _
                    ByVal banco As String,  _
                    ByVal nroCue As String,  _
                    ByVal nroDes As String,  _
                    ByVal codBan As Integer,  _
                    ByVal codMon As Integer,  _
                    ByVal idCue As Integer,  _
                    ByVal codigo As String,  _
                    ByVal nombre As String,  _
                    ByVal concepto As String) As DatosGastosDiaRow
            Dim rowDatosGastosDiaRow As DatosGastosDiaRow = CType(Me.NewRow,DatosGastosDiaRow)
            Dim columnValuesArray() As Object = New Object() {fecPago, nroOperacion, ruc, razon, simbolo, montoPago, montoD, banco, nroCue, nroDes, codBan, codMon, idCue, codigo, nombre, concepto}
            rowDatosGastosDiaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosGastosDiaRow)
            Return rowDatosGastosDiaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosGastosDiaDataTable = CType(MyBase.Clone,DatosGastosDiaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosGastosDiaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfecPago = MyBase.Columns("fecPago")
            Me.columnnroOperacion = MyBase.Columns("nroOperacion")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnrazon = MyBase.Columns("razon")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnmontoPago = MyBase.Columns("montoPago")
            Me.columnmontoD = MyBase.Columns("montoD")
            Me.columnbanco = MyBase.Columns("banco")
            Me.columnnroCue = MyBase.Columns("nroCue")
            Me.columnnroDes = MyBase.Columns("nroDes")
            Me.columncodBan = MyBase.Columns("codBan")
            Me.columncodMon = MyBase.Columns("codMon")
            Me.columnidCue = MyBase.Columns("idCue")
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnconcepto = MyBase.Columns("concepto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfecPago = New Global.System.Data.DataColumn("fecPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecPago)
            Me.columnnroOperacion = New Global.System.Data.DataColumn("nroOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroOperacion)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnrazon = New Global.System.Data.DataColumn("razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazon)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnmontoPago = New Global.System.Data.DataColumn("montoPago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoPago)
            Me.columnmontoD = New Global.System.Data.DataColumn("montoD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoD)
            Me.columnbanco = New Global.System.Data.DataColumn("banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbanco)
            Me.columnnroCue = New Global.System.Data.DataColumn("nroCue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroCue)
            Me.columnnroDes = New Global.System.Data.DataColumn("nroDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroDes)
            Me.columncodBan = New Global.System.Data.DataColumn("codBan", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodBan)
            Me.columncodMon = New Global.System.Data.DataColumn("codMon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodMon)
            Me.columnidCue = New Global.System.Data.DataColumn("idCue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidCue)
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnconcepto = New Global.System.Data.DataColumn("concepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconcepto)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosGastosDiaRow() As DatosGastosDiaRow
            Return CType(Me.NewRow,DatosGastosDiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosGastosDiaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosGastosDiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosGastosDiaRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosGastosDiaRowChanged(Me, New DatosGastosDiaRowChangeEvent(CType(e.Row,DatosGastosDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosGastosDiaRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosGastosDiaRowChanging(Me, New DatosGastosDiaRowChangeEvent(CType(e.Row,DatosGastosDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosGastosDiaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosGastosDiaRowDeleted(Me, New DatosGastosDiaRowChangeEvent(CType(e.Row,DatosGastosDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosGastosDiaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosGastosDiaRowDeleting(Me, New DatosGastosDiaRowChangeEvent(CType(e.Row,DatosGastosDiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosGastosDiaRow(ByVal row As DatosGastosDiaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetInformesCr = New DataSetInformesCr
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosGastosDiaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosSeguimientoDesemDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatosSeguimientoDesemRow)
        
        Private columnestApro As Global.System.Data.DataColumn
        
        Private columnfecDes As Global.System.Data.DataColumn
        
        Private columnserie As Global.System.Data.DataColumn
        
        Private columnnroDes As Global.System.Data.DataColumn
        
        Private columnsimbolo As Global.System.Data.DataColumn
        
        Private columnestado_desembolso As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columndetraccion As Global.System.Data.DataColumn
        
        Private columnobra As Global.System.Data.DataColumn
        
        Private columnproveedor As Global.System.Data.DataColumn
        
        Private columnbanco As Global.System.Data.DataColumn
        
        Private columnnroCta As Global.System.Data.DataColumn
        
        Private columnsolicitante As Global.System.Data.DataColumn
        
        Private columnruc As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columnestadoGerencia As Global.System.Data.DataColumn
        
        Private columnestadoTesoreria As Global.System.Data.DataColumn
        
        Private columnestadoContabilidad As Global.System.Data.DataColumn
        
        Private columnmotivo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatosSeguimientoDesem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estAproColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestApro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property simboloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsimbolo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estado_desembolsoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado_desembolso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property detraccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndetraccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property proveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroCtaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroCta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property solicitanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsolicitante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoGerenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestadoGerencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoTesoreriaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestadoTesoreria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoContabilidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestadoContabilidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosSeguimientoDesemRow
            Get
                Return CType(Me.Rows(index),DatosSeguimientoDesemRow)
            End Get
        End Property
        
        Public Event DatosSeguimientoDesemRowChanging As DatosSeguimientoDesemRowChangeEventHandler
        
        Public Event DatosSeguimientoDesemRowChanged As DatosSeguimientoDesemRowChangeEventHandler
        
        Public Event DatosSeguimientoDesemRowDeleting As DatosSeguimientoDesemRowChangeEventHandler
        
        Public Event DatosSeguimientoDesemRowDeleted As DatosSeguimientoDesemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosSeguimientoDesemRow(ByVal row As DatosSeguimientoDesemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosSeguimientoDesemRow( _
                    ByVal estApro As String,  _
                    ByVal fecDes As Date,  _
                    ByVal serie As String,  _
                    ByVal nroDes As String,  _
                    ByVal simbolo As String,  _
                    ByVal estado_desembolso As String,  _
                    ByVal monto As Decimal,  _
                    ByVal detraccion As Decimal,  _
                    ByVal obra As String,  _
                    ByVal proveedor As String,  _
                    ByVal banco As String,  _
                    ByVal nroCta As String,  _
                    ByVal solicitante As String,  _
                    ByVal ruc As String,  _
                    ByVal estado As String,  _
                    ByVal estadoGerencia As String,  _
                    ByVal estadoTesoreria As String,  _
                    ByVal estadoContabilidad As String,  _
                    ByVal motivo As String) As DatosSeguimientoDesemRow
            Dim rowDatosSeguimientoDesemRow As DatosSeguimientoDesemRow = CType(Me.NewRow,DatosSeguimientoDesemRow)
            Dim columnValuesArray() As Object = New Object() {estApro, fecDes, serie, nroDes, simbolo, estado_desembolso, monto, detraccion, obra, proveedor, banco, nroCta, solicitante, ruc, estado, estadoGerencia, estadoTesoreria, estadoContabilidad, motivo}
            rowDatosSeguimientoDesemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosSeguimientoDesemRow)
            Return rowDatosSeguimientoDesemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosSeguimientoDesemDataTable = CType(MyBase.Clone,DatosSeguimientoDesemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosSeguimientoDesemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnestApro = MyBase.Columns("estApro")
            Me.columnfecDes = MyBase.Columns("fecDes")
            Me.columnserie = MyBase.Columns("serie")
            Me.columnnroDes = MyBase.Columns("nroDes")
            Me.columnsimbolo = MyBase.Columns("simbolo")
            Me.columnestado_desembolso = MyBase.Columns("estado_desembolso")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columndetraccion = MyBase.Columns("detraccion")
            Me.columnobra = MyBase.Columns("obra")
            Me.columnproveedor = MyBase.Columns("proveedor")
            Me.columnbanco = MyBase.Columns("banco")
            Me.columnnroCta = MyBase.Columns("nroCta")
            Me.columnsolicitante = MyBase.Columns("solicitante")
            Me.columnruc = MyBase.Columns("ruc")
            Me.columnestado = MyBase.Columns("estado")
            Me.columnestadoGerencia = MyBase.Columns("estadoGerencia")
            Me.columnestadoTesoreria = MyBase.Columns("estadoTesoreria")
            Me.columnestadoContabilidad = MyBase.Columns("estadoContabilidad")
            Me.columnmotivo = MyBase.Columns("motivo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnestApro = New Global.System.Data.DataColumn("estApro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestApro)
            Me.columnfecDes = New Global.System.Data.DataColumn("fecDes", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecDes)
            Me.columnserie = New Global.System.Data.DataColumn("serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserie)
            Me.columnnroDes = New Global.System.Data.DataColumn("nroDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroDes)
            Me.columnsimbolo = New Global.System.Data.DataColumn("simbolo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsimbolo)
            Me.columnestado_desembolso = New Global.System.Data.DataColumn("estado_desembolso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado_desembolso)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columndetraccion = New Global.System.Data.DataColumn("detraccion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndetraccion)
            Me.columnobra = New Global.System.Data.DataColumn("obra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobra)
            Me.columnproveedor = New Global.System.Data.DataColumn("proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproveedor)
            Me.columnbanco = New Global.System.Data.DataColumn("banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbanco)
            Me.columnnroCta = New Global.System.Data.DataColumn("nroCta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroCta)
            Me.columnsolicitante = New Global.System.Data.DataColumn("solicitante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsolicitante)
            Me.columnruc = New Global.System.Data.DataColumn("ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruc)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columnestadoGerencia = New Global.System.Data.DataColumn("estadoGerencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestadoGerencia)
            Me.columnestadoTesoreria = New Global.System.Data.DataColumn("estadoTesoreria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestadoTesoreria)
            Me.columnestadoContabilidad = New Global.System.Data.DataColumn("estadoContabilidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestadoContabilidad)
            Me.columnmotivo = New Global.System.Data.DataColumn("motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmotivo)
            Me.columnobra.Caption = "razon"
            Me.columnproveedor.Caption = "nom"
            Me.columnbanco.Caption = "obserDesem"
            Me.columnnroCta.Caption = "est"
            Me.columnsolicitante.Caption = "nombre"
            Me.columnruc.Caption = "estDesem"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosSeguimientoDesemRow() As DatosSeguimientoDesemRow
            Return CType(Me.NewRow,DatosSeguimientoDesemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosSeguimientoDesemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosSeguimientoDesemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosSeguimientoDesemRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosSeguimientoDesemRowChanged(Me, New DatosSeguimientoDesemRowChangeEvent(CType(e.Row,DatosSeguimientoDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosSeguimientoDesemRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosSeguimientoDesemRowChanging(Me, New DatosSeguimientoDesemRowChangeEvent(CType(e.Row,DatosSeguimientoDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosSeguimientoDesemRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosSeguimientoDesemRowDeleted(Me, New DatosSeguimientoDesemRowChangeEvent(CType(e.Row,DatosSeguimientoDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosSeguimientoDesemRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosSeguimientoDesemRowDeleting(Me, New DatosSeguimientoDesemRowChangeEvent(CType(e.Row,DatosSeguimientoDesemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosSeguimientoDesemRow(ByVal row As DatosSeguimientoDesemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetInformesCr = New DataSetInformesCr
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosSeguimientoDesemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VOrdenDesemGerencia1Row
        Inherits Global.System.Data.DataRow
        
        Private tableVOrdenDesemGerencia1 As VOrdenDesemGerencia1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVOrdenDesemGerencia1 = CType(Me.Table,VOrdenDesemGerencia1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idOP() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDesemGerencia1.idOPColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.idOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estApro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.estAproColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estApro' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.estAproColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecDes() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.fecDesColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecDes' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.fecDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serie() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.serieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'serie' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.serieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.montoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'monto' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.nomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nom' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.nomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obserDesem() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.obserDesemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obserDesem' de la tabla 'VOrdenDesemGerencia1' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.obserDesemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property est() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.estColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'est' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.estColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hist() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.histColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'hist' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.histColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estDesem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.estDesemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estDesem' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.estDesemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPersDes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.codPersDesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codPersDes' de la tabla 'VOrdenDesemGerencia1' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.codPersDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.estadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As Integer
            Get
                Return CType(Me(Me.tableVOrdenDesemGerencia1.codMonColumn),Integer)
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datoReq() As String
            Get
                Try 
                    Return CType(Me(Me.tableVOrdenDesemGerencia1.datoReqColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'datoReq' de la tabla 'VOrdenDesemGerencia1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVOrdenDesemGerencia1.datoReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestAproNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.estAproColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestAproNull()
            Me(Me.tableVOrdenDesemGerencia1.estAproColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecDesNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.fecDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecDesNull()
            Me(Me.tableVOrdenDesemGerencia1.fecDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.serieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieNull()
            Me(Me.tableVOrdenDesemGerencia1.serieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableVOrdenDesemGerencia1.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableVOrdenDesemGerencia1.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.montoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoNull()
            Me(Me.tableVOrdenDesemGerencia1.montoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVOrdenDesemGerencia1.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.nomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomNull()
            Me(Me.tableVOrdenDesemGerencia1.nomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobserDesemNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.obserDesemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobserDesemNull()
            Me(Me.tableVOrdenDesemGerencia1.obserDesemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.estColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestNull()
            Me(Me.tableVOrdenDesemGerencia1.estColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVOrdenDesemGerencia1.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshistNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.histColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethistNull()
            Me(Me.tableVOrdenDesemGerencia1.histColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestDesemNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.estDesemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestDesemNull()
            Me(Me.tableVOrdenDesemGerencia1.estDesemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodPersDesNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.codPersDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodPersDesNull()
            Me(Me.tableVOrdenDesemGerencia1.codPersDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableVOrdenDesemGerencia1.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdatoReqNull() As Boolean
            Return Me.IsNull(Me.tableVOrdenDesemGerencia1.datoReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdatoReqNull()
            Me(Me.tableVOrdenDesemGerencia1.datoReqColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VGastosPorDiaRow
        Inherits Global.System.Data.DataRow
        
        Private tableVGastosPorDia As VGastosPorDiaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVGastosPorDia = CType(Me.Table,VGastosPorDiaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.fecPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecPago' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.fecPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroOperacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nroOperacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroOperacion' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nroOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoPago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.montoPagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoPago' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.montoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.montoDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoD' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.montoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.bancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'banco' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.bancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroCue() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nroCueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroCue' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nroCueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nroDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroDes' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nroDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codBan() As Integer
            Get
                Return CType(Me(Me.tableVGastosPorDia.codBanColumn),Integer)
            End Get
            Set
                Me(Me.tableVGastosPorDia.codBanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As Integer
            Get
                Return CType(Me(Me.tableVGastosPorDia.codMonColumn),Integer)
            End Get
            Set
                Me(Me.tableVGastosPorDia.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idCue() As Integer
            Get
                Return CType(Me(Me.tableVGastosPorDia.idCueColumn),Integer)
            End Get
            Set
                Me(Me.tableVGastosPorDia.idCueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.codigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigo' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property concepto() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGastosPorDia.conceptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'concepto' de la tabla 'VGastosPorDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGastosPorDia.conceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecPagoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.fecPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecPagoNull()
            Me(Me.tableVGastosPorDia.fecPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroOperacionNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nroOperacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroOperacionNull()
            Me(Me.tableVGastosPorDia.nroOperacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableVGastosPorDia.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableVGastosPorDia.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableVGastosPorDia.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoPagoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.montoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoPagoNull()
            Me(Me.tableVGastosPorDia.montoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoDNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.montoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoDNull()
            Me(Me.tableVGastosPorDia.montoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbancoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.bancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbancoNull()
            Me(Me.tableVGastosPorDia.bancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroCueNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nroCueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroCueNull()
            Me(Me.tableVGastosPorDia.nroCueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroDesNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nroDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroDesNull()
            Me(Me.tableVGastosPorDia.nroDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.codigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoNull()
            Me(Me.tableVGastosPorDia.codigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableVGastosPorDia.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconceptoNull() As Boolean
            Return Me.IsNull(Me.tableVGastosPorDia.conceptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconceptoNull()
            Me(Me.tableVGastosPorDia.conceptoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosAprobacionDesemRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatosAprobacionDesem As DatosAprobacionDesemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosAprobacionDesem = CType(Me.Table,DatosAprobacionDesemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estApro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.estAproColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estApro' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.estAproColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.fecDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecDes' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.fecDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serie() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.serieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'serie' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.serieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.nroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nro' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.nroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.montoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'monto' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.nomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nom' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.nomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obserDesem() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.obserDesemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obserDesem' de la tabla 'DatosAprobacionDesem' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.obserDesemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property est() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.estColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'est' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.estColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estDesem() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.estDesemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estDesem' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.estDesemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.estadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAprobacionDesem.codMonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codMon' de la tabla 'DatosAprobacionDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAprobacionDesem.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestAproNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.estAproColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestAproNull()
            Me(Me.tableDatosAprobacionDesem.estAproColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecDesNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.fecDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecDesNull()
            Me(Me.tableDatosAprobacionDesem.fecDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.serieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieNull()
            Me(Me.tableDatosAprobacionDesem.serieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.nroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNull()
            Me(Me.tableDatosAprobacionDesem.nroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableDatosAprobacionDesem.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.montoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoNull()
            Me(Me.tableDatosAprobacionDesem.montoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableDatosAprobacionDesem.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.nomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomNull()
            Me(Me.tableDatosAprobacionDesem.nomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobserDesemNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.obserDesemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobserDesemNull()
            Me(Me.tableDatosAprobacionDesem.obserDesemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.estColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestNull()
            Me(Me.tableDatosAprobacionDesem.estColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableDatosAprobacionDesem.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestDesemNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.estDesemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestDesemNull()
            Me(Me.tableDatosAprobacionDesem.estDesemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableDatosAprobacionDesem.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodMonNull() As Boolean
            Return Me.IsNull(Me.tableDatosAprobacionDesem.codMonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodMonNull()
            Me(Me.tableDatosAprobacionDesem.codMonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosKardexRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatosKardex As DatosKardexDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosKardex = CType(Me.Table,DatosKardexDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroNota() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.nroNotaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroNota' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.nroNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.tipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipo' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.tipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.fechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.fechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property material() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'material' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantEnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.cantEntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cantEnt' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.cantEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property preUniEnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.preUniEntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'preUniEnt' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.preUniEntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantSal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.cantSalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cantSal' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.cantSalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property preUniSal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.preUniSalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'preUniSal' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.preUniSalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.saldoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'saldo' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.saldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroGuia() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.nroGuiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroGuia' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.nroGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.nroDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroDoc' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.nroDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property veri() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.veriColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'veri' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.veriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property almObra() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.almObraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'almObra' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.almObraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomObraDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.nomObraDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomObraDes' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.nomObraDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obs' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomRecibe() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.nomRecibeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nomRecibe' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.nomRecibeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property provee() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.proveeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'provee' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.proveeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.usuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'usuario' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.usuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMat() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codMatColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codMat' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codMatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idMU() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.idMUColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idMU' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.idMUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codUbi() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codUbiColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codUbi' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codUbiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigo' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codGuia() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codGuiaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codGuia' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codDoc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codDocColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codDoc' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codTrans() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codTransColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codTrans' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codTransColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codPers() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codPersColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codPers' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codPersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codSal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codSalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codSal' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codSalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vanET() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.vanETColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'vanET' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.vanETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codUbiDes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codUbiDesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codUbiDes' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codUbiDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.ubicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ubicacion' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.ubicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codUsu() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosKardex.codUsuColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codUsu' de la tabla 'DatosKardex' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosKardex.codUsuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroNotaNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.nroNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroNotaNull()
            Me(Me.tableDatosKardex.nroNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.tipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoNull()
            Me(Me.tableDatosKardex.tipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.fechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaNull()
            Me(Me.tableDatosKardex.fechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaterialNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaterialNull()
            Me(Me.tableDatosKardex.materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantEntNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.cantEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantEntNull()
            Me(Me.tableDatosKardex.cantEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspreUniEntNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.preUniEntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpreUniEntNull()
            Me(Me.tableDatosKardex.preUniEntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantSalNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.cantSalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantSalNull()
            Me(Me.tableDatosKardex.cantSalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspreUniSalNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.preUniSalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpreUniSalNull()
            Me(Me.tableDatosKardex.preUniSalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.saldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoNull()
            Me(Me.tableDatosKardex.saldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableDatosKardex.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroGuiaNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.nroGuiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroGuiaNull()
            Me(Me.tableDatosKardex.nroGuiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroDocNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.nroDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroDocNull()
            Me(Me.tableDatosKardex.nroDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsveriNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.veriColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetveriNull()
            Me(Me.tableDatosKardex.veriColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalmObraNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.almObraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalmObraNull()
            Me(Me.tableDatosKardex.almObraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomObraDesNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.nomObraDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomObraDesNull()
            Me(Me.tableDatosKardex.nomObraDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobsNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobsNull()
            Me(Me.tableDatosKardex.obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnomRecibeNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.nomRecibeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnomRecibeNull()
            Me(Me.tableDatosKardex.nomRecibeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsproveeNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.proveeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetproveeNull()
            Me(Me.tableDatosKardex.proveeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableDatosKardex.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusuarioNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.usuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusuarioNull()
            Me(Me.tableDatosKardex.usuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodMatNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codMatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodMatNull()
            Me(Me.tableDatosKardex.codMatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidMUNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.idMUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidMUNull()
            Me(Me.tableDatosKardex.idMUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodUbiNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codUbiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodUbiNull()
            Me(Me.tableDatosKardex.codUbiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoNull()
            Me(Me.tableDatosKardex.codigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodGuiaNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codGuiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodGuiaNull()
            Me(Me.tableDatosKardex.codGuiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodDocNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodDocNull()
            Me(Me.tableDatosKardex.codDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodTransNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codTransColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodTransNull()
            Me(Me.tableDatosKardex.codTransColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodPersNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codPersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodPersNull()
            Me(Me.tableDatosKardex.codPersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodSalNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codSalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodSalNull()
            Me(Me.tableDatosKardex.codSalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvanETNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.vanETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvanETNull()
            Me(Me.tableDatosKardex.vanETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodUbiDesNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codUbiDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodUbiDesNull()
            Me(Me.tableDatosKardex.codUbiDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsubicacionNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.ubicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetubicacionNull()
            Me(Me.tableDatosKardex.ubicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableDatosKardex.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodUsuNull() As Boolean
            Return Me.IsNull(Me.tableDatosKardex.codUsuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodUsuNull()
            Me(Me.tableDatosKardex.codUsuColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosGastosDiaRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatosGastosDia As DatosGastosDiaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosGastosDia = CType(Me.Table,DatosGastosDiaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.fecPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecPago' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.fecPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroOperacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.nroOperacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroOperacion' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.nroOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.razonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'razon' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.razonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoPago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.montoPagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoPago' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.montoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.montoDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoD' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.montoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.bancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'banco' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.bancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroCue() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.nroCueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroCue' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.nroCueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.nroDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroDes' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.nroDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codBan() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.codBanColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codBan' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.codBanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codMon() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.codMonColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codMon' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.codMonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idCue() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.idCueColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idCue' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.idCueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.codigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigo' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property concepto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosGastosDia.conceptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'concepto' de la tabla 'DatosGastosDia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosGastosDia.conceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecPagoNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.fecPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecPagoNull()
            Me(Me.tableDatosGastosDia.fecPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroOperacionNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.nroOperacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroOperacionNull()
            Me(Me.tableDatosGastosDia.nroOperacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableDatosGastosDia.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.razonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonNull()
            Me(Me.tableDatosGastosDia.razonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableDatosGastosDia.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoPagoNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.montoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoPagoNull()
            Me(Me.tableDatosGastosDia.montoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoDNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.montoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoDNull()
            Me(Me.tableDatosGastosDia.montoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbancoNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.bancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbancoNull()
            Me(Me.tableDatosGastosDia.bancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroCueNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.nroCueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroCueNull()
            Me(Me.tableDatosGastosDia.nroCueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroDesNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.nroDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroDesNull()
            Me(Me.tableDatosGastosDia.nroDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodBanNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.codBanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodBanNull()
            Me(Me.tableDatosGastosDia.codBanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodMonNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.codMonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodMonNull()
            Me(Me.tableDatosGastosDia.codMonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidCueNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.idCueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidCueNull()
            Me(Me.tableDatosGastosDia.idCueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.codigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoNull()
            Me(Me.tableDatosGastosDia.codigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableDatosGastosDia.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconceptoNull() As Boolean
            Return Me.IsNull(Me.tableDatosGastosDia.conceptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconceptoNull()
            Me(Me.tableDatosGastosDia.conceptoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosSeguimientoDesemRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatosSeguimientoDesem As DatosSeguimientoDesemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosSeguimientoDesem = CType(Me.Table,DatosSeguimientoDesemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estApro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.estAproColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estApro' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.estAproColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecDes() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.fecDesColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecDes' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.fecDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serie() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.serieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'serie' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.serieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.nroDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroDes' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.nroDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property simbolo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.simboloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'simbolo' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.simboloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado_desembolso() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.estado_desembolsoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado_desembolso' de la tabla 'DatosSeguimientoDesem' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.estado_desembolsoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.montoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'monto' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property detraccion() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.detraccionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'detraccion' de la tabla 'DatosSeguimientoDesem' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.detraccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obra() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.obraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'obra' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.obraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.proveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'proveedor' de la tabla 'DatosSeguimientoDesem' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.proveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.bancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'banco' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.bancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroCta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.nroCtaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroCta' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.nroCtaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property solicitante() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.solicitanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'solicitante' de la tabla 'DatosSeguimientoDesem' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.solicitanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.rucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ruc' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.rucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.estadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estadoGerencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.estadoGerenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estadoGerencia' de la tabla 'DatosSeguimientoDesem' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.estadoGerenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estadoTesoreria() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.estadoTesoreriaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estadoTesoreria' de la tabla 'DatosSeguimientoDesem' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.estadoTesoreriaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estadoContabilidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.estadoContabilidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estadoContabilidad' de la tabla 'DatosSeguimientoDesem' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.estadoContabilidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosSeguimientoDesem.motivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'motivo' de la tabla 'DatosSeguimientoDesem' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosSeguimientoDesem.motivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestAproNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.estAproColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestAproNull()
            Me(Me.tableDatosSeguimientoDesem.estAproColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecDesNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.fecDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecDesNull()
            Me(Me.tableDatosSeguimientoDesem.fecDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.serieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieNull()
            Me(Me.tableDatosSeguimientoDesem.serieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroDesNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.nroDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroDesNull()
            Me(Me.tableDatosSeguimientoDesem.nroDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssimboloNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.simboloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsimboloNull()
            Me(Me.tableDatosSeguimientoDesem.simboloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isestado_desembolsoNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.estado_desembolsoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setestado_desembolsoNull()
            Me(Me.tableDatosSeguimientoDesem.estado_desembolsoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.montoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoNull()
            Me(Me.tableDatosSeguimientoDesem.montoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdetraccionNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.detraccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdetraccionNull()
            Me(Me.tableDatosSeguimientoDesem.detraccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobraNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.obraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobraNull()
            Me(Me.tableDatosSeguimientoDesem.obraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsproveedorNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.proveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetproveedorNull()
            Me(Me.tableDatosSeguimientoDesem.proveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbancoNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.bancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbancoNull()
            Me(Me.tableDatosSeguimientoDesem.bancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroCtaNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.nroCtaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroCtaNull()
            Me(Me.tableDatosSeguimientoDesem.nroCtaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssolicitanteNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.solicitanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsolicitanteNull()
            Me(Me.tableDatosSeguimientoDesem.solicitanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.rucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrucNull()
            Me(Me.tableDatosSeguimientoDesem.rucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableDatosSeguimientoDesem.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoGerenciaNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.estadoGerenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoGerenciaNull()
            Me(Me.tableDatosSeguimientoDesem.estadoGerenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoTesoreriaNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.estadoTesoreriaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoTesoreriaNull()
            Me(Me.tableDatosSeguimientoDesem.estadoTesoreriaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoContabilidadNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.estadoContabilidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoContabilidadNull()
            Me(Me.tableDatosSeguimientoDesem.estadoContabilidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmotivoNull() As Boolean
            Return Me.IsNull(Me.tableDatosSeguimientoDesem.motivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmotivoNull()
            Me(Me.tableDatosSeguimientoDesem.motivoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VOrdenDesemGerencia1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VOrdenDesemGerencia1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VOrdenDesemGerencia1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VOrdenDesemGerencia1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VGastosPorDiaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VGastosPorDiaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VGastosPorDiaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VGastosPorDiaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosAprobacionDesemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosAprobacionDesemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosAprobacionDesemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosAprobacionDesemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosKardexRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosKardexRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosKardexRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosKardexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosGastosDiaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosGastosDiaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosGastosDiaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosGastosDiaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosSeguimientoDesemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosSeguimientoDesemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosSeguimientoDesemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosSeguimientoDesemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetInformesCrTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VOrdenDesemGerencia1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VOrdenDesemGerencia1"
            tableMapping.ColumnMappings.Add("idOP", "idOP")
            tableMapping.ColumnMappings.Add("estApro", "estApro")
            tableMapping.ColumnMappings.Add("fecDes", "fecDes")
            tableMapping.ColumnMappings.Add("serie", "serie")
            tableMapping.ColumnMappings.Add("nro", "nro")
            tableMapping.ColumnMappings.Add("simbolo", "simbolo")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("nom", "nom")
            tableMapping.ColumnMappings.Add("obserDesem", "obserDesem")
            tableMapping.ColumnMappings.Add("est", "est")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("hist", "hist")
            tableMapping.ColumnMappings.Add("estDesem", "estDesem")
            tableMapping.ColumnMappings.Add("codPersDes", "codPersDes")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("codMon", "codMon")
            tableMapping.ColumnMappings.Add("datoReq", "datoReq")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=sv32.dbsqlserver.com,8888;Initial Catalog=BD_ConstrucMech;Persist Sec"& _ 
                "urity Info=True;User ID=mech;Password=mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select idOP,estApro,fecDes,serie,nro,simbolo,monto,razon,nom,obserDesem,est,nombr"& _ 
                "e,hist,estDesem,codPersDes,estado,codMon,datoReq from VOrdenDesemGerencia1 where"& _ 
                " estDesem in(@est1,@est,@est2)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@est1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@est", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@est2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetInformesCr.VOrdenDesemGerencia1DataTable, ByVal est1 As Integer, ByVal est As Integer, ByVal est2 As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(est1,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(est,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(est2,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal est1 As Integer, ByVal est As Integer, ByVal est2 As Integer) As DataSetInformesCr.VOrdenDesemGerencia1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(est1,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(est,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(est2,Integer)
            Dim dataTable As DataSetInformesCr.VOrdenDesemGerencia1DataTable = New DataSetInformesCr.VOrdenDesemGerencia1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VGastosPorDiaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VGastosPorDia"
            tableMapping.ColumnMappings.Add("fecPago", "fecPago")
            tableMapping.ColumnMappings.Add("nroOperacion", "nroOperacion")
            tableMapping.ColumnMappings.Add("ruc", "ruc")
            tableMapping.ColumnMappings.Add("razon", "razon")
            tableMapping.ColumnMappings.Add("simbolo", "simbolo")
            tableMapping.ColumnMappings.Add("montoPago", "montoPago")
            tableMapping.ColumnMappings.Add("montoD", "montoD")
            tableMapping.ColumnMappings.Add("banco", "banco")
            tableMapping.ColumnMappings.Add("nroCue", "nroCue")
            tableMapping.ColumnMappings.Add("nroDes", "nroDes")
            tableMapping.ColumnMappings.Add("codBan", "codBan")
            tableMapping.ColumnMappings.Add("codMon", "codMon")
            tableMapping.ColumnMappings.Add("idCue", "idCue")
            tableMapping.ColumnMappings.Add("codigo", "codigo")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("concepto", "concepto")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=sv32.dbsqlserver.com,8888;Initial Catalog=BD_ConstrucMech;Persist Sec"& _ 
                "urity Info=True;User ID=mech;Password=mechcusco2013"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select fecPago,nroOperacion,ruc,razon,simbolo,montoPago,montoD,banco,nroCue,(seri"& _ 
                "e +'-'+cast(nroDes as varchar)) nroDes,codBan,codMon,idCue,codigo,nombre,concept"& _ 
                "o from VGastosPorDia where fecPago between @fecIni and @fecFin"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecIni", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "fecPago", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecFin", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "fecPago", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetInformesCr.VGastosPorDiaDataTable, ByVal fecIni As String, ByVal fecFin As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (fecIni Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(fecIni,String)
            End If
            If (fecFin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fecFin,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal fecIni As String, ByVal fecFin As String) As DataSetInformesCr.VGastosPorDiaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (fecIni Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(fecIni,String)
            End If
            If (fecFin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fecFin,String)
            End If
            Dim dataTable As DataSetInformesCr.VGastosPorDiaDataTable = New DataSetInformesCr.VGastosPorDiaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetInformesCr, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetInformesCr, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetInformesCr, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetInformesCr) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
